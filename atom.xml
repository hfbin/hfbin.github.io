<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hfbin Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-18T05:03:48.965Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HuangFuBin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zookeeper集群安装</title>
    <link href="http://yoursite.com/2018/02/18/Zookeeper%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/02/18/Zookeeper集群安装/</id>
    <published>2018-02-18T04:35:25.000Z</published>
    <updated>2018-02-18T05:03:48.965Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-集群环境准备"><a href="#1-集群环境准备" class="headerlink" title="1 集群环境准备"></a><strong>1 集群环境准备</strong></h5><p>1、操作系统：Liunx（Red Hat） 6<br>2、需要装好jdk，不知道怎么安装的可以看我这篇文章: <a href="http://blog.csdn.net/qq_33524158/article/details/78484086" target="_blank" rel="external">http://blog.csdn.net/qq_33524158/article/details/78484086</a> （Red Hat 6 安装jdk跟 CentOS 7 安装基本上一样的 ）<br>3、 Zookeeper下载地址： <a href="http://mirrors.shu.edu.cn/apache/zookeeper/" target="_blank" rel="external">http://mirrors.shu.edu.cn/apache/zookeeper/</a>  需要什么版本就下载什么版本（我这里使用zookeeper-3.4.11）</p><h5 id="2-Zookeeper方案"><a href="#2-Zookeeper方案" class="headerlink" title="2 Zookeeper方案"></a><strong>2 Zookeeper方案</strong></h5><p>一共三个节点 (zk服务器集群规模不小于3个节点),要求服务器之间系统时间保持一致。<br>| 主机IP | 消息端口 | 通信端口 | 节点目录/usr/local/下 |<br>| :————- |:————-:|:—–:|:—–:|<br>| 192.168.0.110 |  2181    | 2888:3888 | zookeeper-3.4.11 |<br>| 192.168.0.111 |  2181    | 2888:3888 | zookeeper-3.4.11 |<br>| 192.168.0.112 |  2181    | 2888:3888 | zookeeper-3.4.11 |</p><h5 id="3-Zookeeper安装步骤（三台机器）"><a href="#3-Zookeeper安装步骤（三台机器）" class="headerlink" title="3 Zookeeper安装步骤（三台机器）"></a><strong>3 Zookeeper安装步骤（三台机器）</strong></h5><p>第一步：hosts配置</p><pre><code>shell&gt;vi /etc/hosts</code></pre><p>加入下面内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">192.168.0.111</div><div class="line">192.168.0.112</div><div class="line">192.168.0.113</div></pre></td></tr></table></figure></p><p>第二步：关闭防火墙和selinux</p><pre><code>shell&gt;iptables -Fshell&gt;service iptables saveshell&gt;setenforce 0shell&gt;vim /etc/selinux/config 修改SELINUX=disabled</code></pre><p>第三步：上传Zookeeper到Liunx上（上传到哪一个目录都可以）</p><p>第四步：解压Zookeeper，先进入你上传Zookeeper的目录，解压命令如下：</p><pre><code>shell&gt;tar -zvxf zookeeper-3.4.11 -C /usr/local</code></pre><p>这里我安装Zookeeper在/usr/local目录下</p><p>第五步：重命名，命令如下：</p><pre><code>shell&gt;mv zookeeper-3.4.11 zookeeper</code></pre><p>第六步：修改环境变量，命令如下：</p><pre><code>shell&gt;vi /etc/profile</code></pre><p>在文件末尾加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#zookeeper</div><div class="line">export ZOOKEEPER_HOME=/usr/local/zookeeper</div><div class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin</div></pre></td></tr></table></figure></p><p>JAVA_HOME 这个是你jdk配置变量的环境路径</p><p>使环境变量立即生效：</p><pre><code>shell&gt;source /etc/profile</code></pre><p>第七步：到zookeeper下修改配置文件</p><pre><code>shell&gt;cd /usr/local/zookeeper/conf shell&gt;mv zoo_sample.cfg zoo.cfgshell&gt;vi zoo.cfg</code></pre><p>  修改两处<br> 1、 dataDir=/usr/local/zookeeper/data</p><p>2、在最后面添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server.0=192.168.0.110:2888:3888 </div><div class="line">server.1=192.168.0.111:2888:3888 </div><div class="line">server.2=192.168.0.112:2888:3888</div></pre></td></tr></table></figure></p><p>在后面有zoo.cfg 参数说明</p><p>第八步：创建文件夹data</p><pre><code>shell&gt;cd /usr/local/zookeepershell&gt;mkdir data</code></pre><p>以上八步三台机器一样</p><p>第九步：创建文件myid</p><pre><code>shell&gt;cd /usr/local/zookeepershell&gt;vi myid</code></pre><p>加入内容（第一台机器）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0</div></pre></td></tr></table></figure></p><p>（第一台机器）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1</div></pre></td></tr></table></figure></p><p>（第一台机器）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2</div></pre></td></tr></table></figure></p><p>到这里算是配置完成了，比较简单。</p><p>启动Zookeeper</p><pre><code>shell&gt;cd /usr/local/zookeeper/binshell&gt;sh zkServer.sh start</code></pre><p>查看状态：</p><pre><code>shell&gt;sh zkServer.sh status</code></pre><p>(三台机子上执行会发现1个leader,两个follower)<br><img src="http://img.blog.csdn.net/20180208211102347?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180208211112285?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180208211120535?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>到这算Zookeeper集群安装完成了！！</p><h4 id="4-zoo-cfg参数说明"><a href="#4-zoo-cfg参数说明" class="headerlink" title="4 zoo.cfg参数说明"></a><strong>4 zoo.cfg参数说明</strong></h4><p><strong>tickTime</strong>： 基本事件单元，以毫秒为单位。这个时间是作为 Zookeeper服务器之间或户端与服务器之间维持心跳的时间间隔，也就是每隔 tickTime时间就会发送一个心跳。</p><p><strong>dataDir</strong>：存储内存中数据库快照的位置，顾名思义就是 Zookeeper保存数据的目录，默认情况下，Zookeeper将写数据的日志文件也保存在这个目录里。</p><p><strong>clientPort</strong>： 这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper会监听这个端口，接受客户端的访问请求。</p><p><strong>initLimit</strong>： 这个配置项是用来配置 Zookeeper接受客户端初始化连接时最长能忍受多少心跳时间间隔数，当已经超过 10 个心跳的时间（也就是 tickTime）长度后Zookeeper 服务器还没有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是10*2000=20 秒。</p><p><strong>syncLimit</strong>： 这个配置项标识 Leader 与 Follower之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime的时间长度，总的时间长度就是 5*2000=10 秒</p><p><strong>server.A = B:C:D </strong>  ：<br>A表示这个是第几号服务器,<br>B 是这个服务器的 ip 地址；<br>C 表示的是这个服务器与集群中的 Leader服务器交换信息的端口；<br>D 表示的是万一集群中的 Leader服务器挂了，需要一个端口来重新进行选举，选出一个新的 Leader</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;1-集群环境准备&quot;&gt;&lt;a href=&quot;#1-集群环境准备&quot; class=&quot;headerlink&quot; title=&quot;1 集群环境准备&quot;&gt;&lt;/a&gt;&lt;strong&gt;1 集群环境准备&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;1、操作系统：Liunx（Red Hat） 6&lt;br&gt;2、
      
    
    </summary>
    
      <category term="Zookeeper" scheme="http://yoursite.com/categories/Zookeeper/"/>
    
    
      <category term="Zookeeper" scheme="http://yoursite.com/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ集群介绍及安装教程</title>
    <link href="http://yoursite.com/2018/02/18/RocketMQ%E9%9B%86%E7%BE%A4%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/02/18/RocketMQ集群介绍及安装教程/</id>
    <published>2018-02-18T02:35:25.000Z</published>
    <updated>2018-02-18T05:02:45.765Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20180124150236864?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150249541?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150337027?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150401760?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150429067?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150454336?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150520295?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150542378?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150555101?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150609738?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150623725?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150637793?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150649803?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150707826?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150719761?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150732285?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150745556?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150757870?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150808786?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20180124150841009?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180124150236864?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize
      
    
    </summary>
    
      <category term="RocketMQ" scheme="http://yoursite.com/categories/RocketMQ/"/>
    
    
      <category term="RocketMQ" scheme="http://yoursite.com/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>Red Hat 6 / CentOS 6无法使用yum源问题</title>
    <link href="http://yoursite.com/2018/01/13/RedHat6%E6%88%96CentOS6%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8yum%E6%BA%90%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/01/13/RedHat6或CentOS6无法使用yum源问题/</id>
    <published>2018-01-13T15:35:25.000Z</published>
    <updated>2018-01-14T04:06:32.973Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a><strong>问题来源</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在我安装RocketMQ时候由于需要安装git，我使用yum安装时发现安装不了，于是百度了很多文章，但是都没很好的答案，所以就有了我这篇文章。</p><h4 id="卸载自带的yum"><a href="#卸载自带的yum" class="headerlink" title="卸载自带的yum"></a><strong>卸载自带的yum</strong></h4><p>查看自带的yum</p><pre><code>shell&gt;rpm -qa | grep yum    </code></pre><p>这里查出来的全部卸载掉。</p><p>卸载自带的yum命令</p><pre><code>shell&gt;rpm -e --nodeps 【查出来的名称（这里直接复制）】</code></pre><h4 id="安装yum"><a href="#安装yum" class="headerlink" title="安装yum"></a><strong>安装yum</strong></h4><p>如果你的虚拟机是可以链接外网了你可以直接下载使用下面命令：</p><p>注意：这里网址如果时间久了会更新如果网址失效了可以到<a href="http://tel.mirrors.163.com/centos/6/os/x86_64/Packages/网站找到对应的文件链接即可。" target="_blank" rel="external">http://tel.mirrors.163.com/centos/6/os/x86_64/Packages/网站找到对应的文件链接即可。</a></p><pre><code>shell&gt;rpm -ivh http://mirrors.163.com/centos/6/os/i386/Packages/python-iniparse-0.3.1-2.1.el6.noarch.rpmshell&gt;rpm -ivh http://mirrors.163.com/centos/6/os/i386/Packages/yum-metadata-parser-1.1.2-16.el6.i686.rpmshell&gt;rpm -ivh http://tel.mirrors.163.com/centos/6/os/x86_64/Packages/yum-3.2.29-81.el6.centos.noarch.rpm http://tel.mirrors.163.com/centos/6/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.30-40.el6.noarch.rpm</code></pre><p>到这一步如果你出现错误了进行这一步（到这一步我是出错的由于python-urlgrabber版本太低必须大于等于3.9.1-10，与yum-3.2.29-81.el6.centos.noarch版本不对应，照成依赖关系出错）<br><img src="http://img.blog.csdn.net/20180113231623061?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>下面查看一下python<br>    shell&gt;rpm -qa|grep python<br><img src="http://img.blog.csdn.net/20180113231913045?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>找到python-urlgrabber将其卸载</p><pre><code>shell&gt;rpm -e --nodeps python-urlgrabber-3.9.1-8.el6.noarch</code></pre><p>安装python-urlgrabber目前最新的版本</p><pre><code>shell&gt;rpm -ivh http://tel.mirrors.163.com/centos/6/os/x86_64/Packages/python-urlgrabber-3.9.1-11.el6.noarch.rpm</code></pre><p>然后再重复使用这个命令：</p><pre><code>shell&gt;rpm -ivh http://tel.mirrors.163.com/centos/6/os/x86_64/Packages/yum-3.2.29-81.el6.centos.noarch.rpm http://tel.mirrors.163.com/centos/6/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.30-40.el6.noarch.rpm</code></pre><p>到这算是安装完成了，但是还是得更改yum源，否则还是会出现错误，看下一节。</p><h4 id="更改yum源"><a href="#更改yum源" class="headerlink" title="更改yum源"></a><strong>更改yum源</strong></h4><p>进入 /etc/yum.repos.d/目录：</p><pre><code>shell&gt;cd /etc/yum.repos.d/</code></pre><p>下载配置文件</p><pre><code>shell&gt;wget http://mirrors.163.com/.help/CentOS6-Base-163.repo</code></pre><p>查看目录里面有什么</p><pre><code>shell&gt;ls</code></pre><p><img src="http://img.blog.csdn.net/20180113232828770?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>这里将rhel-source.repo文件重命名，相当于备份</p><pre><code>shell&gt;mv rhel-source.repo rhel-source.repo.bak</code></pre><p>然后将刚下载的CentOS6-Base-163.repo重命名为rhel-source.repo</p><pre><code>shell&gt;mv CentOS6-Base-163.repo rhel-source.repo</code></pre><p>清理yum缓存</p><pre><code>shell&gt;yum clean all</code></pre><p>将服务器软件包信息缓存至本地，提高搜索安装效率</p><pre><code>shell&gt;yum makecache</code></pre><p>执行shell&gt;yum repolist查看，如果显示出repo仓库列表，并显示软件包数量则OK。</p><p><img src="http://img.blog.csdn.net/20180113233339557?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>安装git测试一下</p><p><img src="http://img.blog.csdn.net/20180113233436198?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;问题来源&quot;&gt;&lt;a href=&quot;#问题来源&quot; class=&quot;headerlink&quot; title=&quot;问题来源&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题来源&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在我安
      
    
    </summary>
    
      <category term="liunx" scheme="http://yoursite.com/categories/liunx/"/>
    
    
      <category term="liunx" scheme="http://yoursite.com/tags/liunx/"/>
    
  </entry>
  
  <entry>
    <title>2018年的第一篇文章（福利篇）</title>
    <link href="http://yoursite.com/2018/01/08/2018%E5%B9%B4%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%88%E7%A6%8F%E5%88%A9%E7%AF%87%EF%BC%89/"/>
    <id>http://yoursite.com/2018/01/08/2018年的第一篇文章（福利篇）/</id>
    <published>2018-01-08T07:37:17.000Z</published>
    <updated>2018-01-08T08:28:31.105Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于前段时间在学校比较忙，加上放假 。前半个月小编都没空写博客，今天这篇文章是给大家送福利的，后面我会不断更新我的博客，坚持做到每日一篇博客，大家有什么问题的也可以在我博客给我留言，我看到的都会回复大家，也可以到我的个人博客网站留言（<a href="http://www.hfbin.cn" target="_blank" rel="external">hfbin.cn</a>里面的文章与csdn文章同步）。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面送大家一些关于java的书籍PDF文档（都是我在网上收集的，里面要是有广告请忽视。要是链接失效了请及时给我留言）。</p><h5 id="1-Java-8实战"><a href="#1-Java-8实战" class="headerlink" title="1 . Java 8实战"></a><strong>1 . Java 8实战</strong></h5><p><img src="http://img.blog.csdn.net/20180108153920580?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Java 8实战"><br>链接：<a href="https://pan.baidu.com/s/1geLxqXP" target="_blank" rel="external">https://pan.baidu.com/s/1geLxqXP</a> 密码：w1pl</p><h5 id="2-Java并发编程的艺术"><a href="#2-Java并发编程的艺术" class="headerlink" title="2 . Java并发编程的艺术"></a><strong>2 . Java并发编程的艺术</strong></h5><p><img src="http://img.blog.csdn.net/20180108153945433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Java并发编程的艺术"><br>链接：<a href="https://pan.baidu.com/s/1qYuqGBq" target="_blank" rel="external">https://pan.baidu.com/s/1qYuqGBq</a> 密码：t8r2</p><h5 id="3-JAVA并发编程实践（中文）"><a href="#3-JAVA并发编程实践（中文）" class="headerlink" title="3 . JAVA并发编程实践（中文）"></a><strong>3 . JAVA并发编程实践（中文）</strong></h5><p><img src="http://img.blog.csdn.net/20180108154003766?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="JAVA并发编程实践（中文）"><br>链接：<a href="https://pan.baidu.com/s/1boOTiph" target="_blank" rel="external">https://pan.baidu.com/s/1boOTiph</a> 密码：ba19</p><h5 id="4-Java多线程编程核心技术"><a href="#4-Java多线程编程核心技术" class="headerlink" title="4 . Java多线程编程核心技术"></a><strong>4 . Java多线程编程核心技术</strong></h5><p><img src="http://img.blog.csdn.net/20180108154012850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Java多线程编程核心技术_完整版"><br>链接：<a href="https://pan.baidu.com/s/1bQrf0y" target="_blank" rel="external">https://pan.baidu.com/s/1bQrf0y</a> 密码：hj8u</p><h5 id="5-Effective-Java-中文第二版"><a href="#5-Effective-Java-中文第二版" class="headerlink" title="5 . Effective Java 中文第二版"></a><strong>5 . Effective Java 中文第二版</strong></h5><p><img src="http://img.blog.csdn.net/20180108154034580?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Effective Java 中文第二版"><br>链接：<a href="https://pan.baidu.com/s/1cwLh98" target="_blank" rel="external">https://pan.baidu.com/s/1cwLh98</a> 密码：glrn</p><h5 id="6-深入JAVA虚拟机第二版"><a href="#6-深入JAVA虚拟机第二版" class="headerlink" title="6 . 深入JAVA虚拟机第二版"></a><strong>6 . 深入JAVA虚拟机第二版</strong></h5><p><img src="http://img.blog.csdn.net/20180108154048607?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="深入JAVA虚拟机第二版"><br>链接：<a href="https://pan.baidu.com/s/1bN9teQ" target="_blank" rel="external">https://pan.baidu.com/s/1bN9teQ</a> 密码：tamo</p><h5 id="7-Redis入门指南（第2版）"><a href="#7-Redis入门指南（第2版）" class="headerlink" title="7 . Redis入门指南（第2版）"></a><strong>7 . Redis入门指南（第2版）</strong></h5><p><img src="http://img.blog.csdn.net/20180108154056848?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Redis入门指南（第2版）"><br>链接：<a href="https://pan.baidu.com/s/1kU7bYIV" target="_blank" rel="external">https://pan.baidu.com/s/1kU7bYIV</a> 密码：qd86</p><h5 id="8-SPRING-实战（第3版）"><a href="#8-SPRING-实战（第3版）" class="headerlink" title="8 . SPRING 实战（第3版） "></a><strong>8 . SPRING 实战（第3版） </strong></h5><p><img src="http://img.blog.csdn.net/20180108154113048?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="SPRING 实战（第3版） "><br>链接：<a href="https://pan.baidu.com/s/1hsInDZY" target="_blank" rel="external">https://pan.baidu.com/s/1hsInDZY</a> 密码：p9fj</p><h5 id="9-阿里巴巴Java开发手册v1-2-0"><a href="#9-阿里巴巴Java开发手册v1-2-0" class="headerlink" title="9 . 阿里巴巴Java开发手册v1.2.0"></a><strong>9 . 阿里巴巴Java开发手册v1.2.0</strong></h5><p><img src="http://img.blog.csdn.net/20180108154120917?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="阿里巴巴Java开发手册v1.2.0"><br>链接：<a href="https://pan.baidu.com/s/1qYcFLPq" target="_blank" rel="external">https://pan.baidu.com/s/1qYcFLPq</a> 密码：8tbs</p><h5 id="10-2017阿里技术年度精选（上-、下）"><a href="#10-2017阿里技术年度精选（上-、下）" class="headerlink" title="10 . 2017阿里技术年度精选（上  、下）"></a><strong>10 . 2017阿里技术年度精选（上  、下）</strong></h5><p><img src="http://img.blog.csdn.net/20180108161849073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>上 —-&gt;链接1：<a href="https://pan.baidu.com/s/1pL3gou3" target="_blank" rel="external">https://pan.baidu.com/s/1pL3gou3</a> 密码：9qjb</p><p>下—–&gt;链接2：<a href="https://pan.baidu.com/s/1pL5igeZ" target="_blank" rel="external">https://pan.baidu.com/s/1pL5igeZ</a> 密码：0b52</p><h5 id="11-重构-改善既有代码的设计"><a href="#11-重构-改善既有代码的设计" class="headerlink" title="11 . 重构-改善既有代码的设计"></a><strong>11 . 重构-改善既有代码的设计</strong></h5><p><img src="http://img.blog.csdn.net/20180108154130473?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>链接：<a href="https://pan.baidu.com/s/1jI5YqsI" target="_blank" rel="external">https://pan.baidu.com/s/1jI5YqsI</a> 密码：h3uw</p><h5 id="12-从Paxos到Zookeeper-分布式一致性原理与实践"><a href="#12-从Paxos到Zookeeper-分布式一致性原理与实践" class="headerlink" title="12 . 从Paxos到Zookeeper  分布式一致性原理与实践"></a><strong>12 . 从Paxos到Zookeeper  分布式一致性原理与实践</strong></h5><p><img src="http://img.blog.csdn.net/20180108154226297?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>链接：<a href="https://pan.baidu.com/s/1dF6O1tn" target="_blank" rel="external">https://pan.baidu.com/s/1dF6O1tn</a> 密码：vzg0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;由于前段时间在学校比较忙，加上放假 。前半个月小编都没空写博客，今天这篇文章是给大家送福利的，后面我会不断更新我的博客，坚持做到每日一篇博客，大家有什么问题的也可以在我博客给我留言，我看到的都会回复大家
      
    
    </summary>
    
      <category term="福利" scheme="http://yoursite.com/categories/%E7%A6%8F%E5%88%A9/"/>
    
    
      <category term="福利" scheme="http://yoursite.com/tags/%E7%A6%8F%E5%88%A9/"/>
    
  </entry>
  
  <entry>
    <title>FS Shell命令与JAVA实现操作HDFS文件</title>
    <link href="http://yoursite.com/2017/12/25/FS%20Shell%E5%91%BD%E4%BB%A4%E4%B8%8EJAVA%E5%AE%9E%E7%8E%B0%E6%93%8D%E4%BD%9CHDFS%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/12/25/FS Shell命令与JAVA实现操作HDFS文件/</id>
    <published>2017-12-25T02:41:46.000Z</published>
    <updated>2018-01-06T06:29:32.352Z</updated>
    
    <content type="html"><![CDATA[<h4 id="FS-Shell命令"><a href="#FS-Shell命令" class="headerlink" title="FS Shell命令"></a><strong>FS Shell命令</strong></h4><p>创建目录 </p><pre><code>shell&gt;hadoop fs –mkdir /user</code></pre><p>列表 </p><pre><code>shell&gt;hadoop fs –ls /</code></pre><p>查看文件内容 </p><pre><code>shell&gt;hadoop fs –cat /input/file.txt</code></pre><p>上传文件 </p><pre><code>shell&gt;hadoop fs –put 本地文件 远程目录</code></pre><p>获取文件</p><pre><code>shell&gt; hadoop fs –get 远程文件 本地目录</code></pre><p>移动文件 </p><pre><code>shell&gt;hadoop fs –mv远程文件1 … 远程文件n 远程目录</code></pre><p>复制文件 </p><pre><code>shell&gt;hadoop fs –cp 远程文件1 … 远程文件n 远程目录</code></pre><p>删除文件 </p><pre><code>shell&gt;hadoop fs –rmr 目录/文件</code></pre><p><strong>测试文件命令</strong><br>文件是否存在   </p><pre><code>shell&gt;hadoop fs –test –e 文件   // 存在返回0</code></pre><p>文件是否0字节 </p><pre><code>shell&gt;hadoop fs –test –z 文件   //是0返回0</code></pre><p>文件是否为目录 </p><pre><code>shell&gt;hadoop fs –test –d 文件    //是目录返回1，否则返回0    </code></pre><p>显示目录中所有文件大小 </p><pre><code>shell&gt;hadoop fs –du 目录/文件  //目录统计总大小，文件统计大小</code></pre><p>清空回收站 </p><pre><code>shell&gt;hadoop fs -expunge </code></pre><h4 id="JAVA操作HDFS的API"><a href="#JAVA操作HDFS的API" class="headerlink" title="JAVA操作HDFS的API"></a><strong>JAVA操作HDFS的API</strong></h4><h5 id="hadoop文件系统API说明与编程步骤"><a href="#hadoop文件系统API说明与编程步骤" class="headerlink" title="hadoop文件系统API说明与编程步骤"></a><strong>hadoop文件系统API说明与编程步骤</strong></h5><p><strong>Hadoop提供的文件系统的API</strong></p><p>1、    Configuration 类(org.apache.hadoop.conf包)：封装了一个客户端或服务器的配置文件</p><p>Configuration():</p><pre><code>默认加载core-default.xml,该配置文件设置从本地文件读取。默认也会加载自定义的core-site.xml，设置配置文件从hdfs中读取，但是此文件需要放到 eclipse的 src目录，系统也会自动读取。最好也放log4j.properties </code></pre><p>注：如果其它的配置文件如hdfs-site.xml,mapred-site.xml需要手动加载读取，记载方法是conf.addResource(“hdfs-site.xml”)格式。如果单独改变参数，conf.set(参数名,值)</p><p>2、    IOUtils类(org.apache.hadoop.io包)：Hadoop提供的IO工具类</p><pre><code>copyBytes(InputStream 输入流, OutputStream 输出流, int 缓存大小, boolean  是否关闭输入输出流)：从输入流中读取数据到输出流,关闭输入输出流也可以使用IOUtils工具提供的closeStream(in)方法来关闭。</code></pre><p>3、Path类(org.apache.hadoop.fs)：一个文件被视为Path对象，该对象由文件的URI实例化。</p><pre><code>Path(String uri):构建一个path对象</code></pre><p>4、FileSystem类(org.apache.hadoop.fs包)：代表一个文件系统，可以对文件进行操作。</p><pre><code>static FileSystem get(Configuration conf):创建一个带有配置对象conf的FileSystem对象   static FileSystem get(URI uri, Configuration conf):创建带有URI和Conf的FileSystem对象  注：如果在uri中指定hdfs的前缀，那么就不需要在eclipse中加载core-site.xml文件了。</code></pre><p>例:</p><pre><code>FileSystem.get(URI.create(“hdfs://hfbin1:9000”),conf)InputStream open(path path):打开一个文件作为输入字节流 FSDataOutputStream create(Path path)：创建一个文件，返回值是一个输出流。void copyFromLocalFile(Path 本地文件,Path hdfs目录)：从本地上传到hdfscopyToLocalFil e(Path hdfs文件,Path hdfs文件)boolean delete(Path path,Boolean 是否递归删除)：删除文件/目录，通常参数2为trueboolean rename(path from, path to)：重命名，等价于fs shell命令的mvFileStatus getFileStatus(Path f)：查询文件的详细信息，包括大小，权限，块大小等。FileStatus[] listStatus(Path f)：列出目录的内容，返回文件的详细信息数组。</code></pre><p>5、FileStatus类():代表文件的详细信息</p><pre><code>文件全路径： fileStatus.getPath()文件块大小： fileStatus.getBlockSize()文件长度： fileStatus.getLen()副本数量： fileStatus.getReplication()用户： fileStatus.getOwner()用户组： fileStatus.getGroup()权限： fileStatus.getPermission().toString()</code></pre><p>6、java.net.URI</p><pre><code>create(String prefix):创建一个带有prefix前缀的uri对象</code></pre><p><strong>使用FileSystem API编程步骤</strong></p><p>1、    获取Configuration对象</p><pre><code>Configuration conf = new Configuration();    //默认加载core-default.xml//conf.addResource(&quot;core-site.xml&quot;);         //默认从eclipse的src加载core-site.xml（这个文件可以到hadoop里面配置文件copy出来）//conf.set(“fs.defaultFS”, “hdfs://hfbin1:9000/”); //也可以这么写不需要加载</code></pre><p>2、    获取文件系统的实例FileSystem对象</p><pre><code>FileSystem fs = FileSystem.get(conf);// FileSystem.get(URI.create(&quot;hdfs://hfbin1:9000&quot;), conf);//如果复制core-site.xml到src下了，需要的路径时不需要指定前缀，若core-site.xml没有加到src下则需要前缀。</code></pre><p>3、    使用FileSystem对象操作文件</p><pre><code>打开 open创建 create上传 copyFromLocalFile下载  copyToLocalFile删除 delelte重命名 rename文件详细信息 getFileStatus</code></pre><h5 id="使用hadoop提供的文件系统API操作数据（读增删改名复制和文件详细信息）"><a href="#使用hadoop提供的文件系统API操作数据（读增删改名复制和文件详细信息）" class="headerlink" title="使用hadoop提供的文件系统API操作数据（读增删改名复制和文件详细信息）"></a><strong>使用hadoop提供的文件系统API操作数据（读增删改名复制和文件详细信息）</strong></h5><p><strong>读取文件内容打印在控制台</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.hfbin;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemCat</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">//1、获取Configuration对象</span></div><div class="line">Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line"><span class="comment">//conf.addResource("core-site.xml");//已经自动从本地src目录加了。</span></div><div class="line">InputStream in = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//2、获取文件系统的实例FileSystem对象</span></div><div class="line"><span class="comment">//FileSystem fs = FileSystem.get(URI.create("hdfs://node1:9000"), conf);//不需要core-site.xml制定前缀</span></div><div class="line">FileSystem fs = FileSystem.get(conf);<span class="comment">//需要core-site.xml制定前缀</span></div><div class="line"><span class="comment">//3、使用FileSystem对象操作文件：打开一个文件作为输入字节流</span></div><div class="line">in = fs.open(<span class="keyword">new</span> Path(<span class="string">"/music/music1.txt"</span>)); <span class="comment">//例如：/input2/file4.txt</span></div><div class="line">IOUtils.copyBytes(in, System.out, <span class="number">4096</span>, <span class="keyword">false</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">IOUtils.closeStream(in);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>都是按照步骤来操作的上面都有备注，在这里我就另外说一下IOUtils.copyBytes()方法参数的意思：</p><pre><code>第一个参数 in:  是FSDataInputStream类的对象，是有关读取文件的类，也就是所谓“输入流”第二个参数 out:  是FSDataOutputStream类的对象，是有关文件写入的类，也就是“输出流”（上面我是使用System.out将内容在控制台输出）第三个参数 4096  表示用来拷贝的buffer大小（buffer是缓冲区）第四个参数 false  表明拷贝完成后我们并不关闭拷贝源可拷贝目的地</code></pre><p><strong>创建文件并将Hello World写进文件中</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemCreate</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">FileSystem fs = FileSystem.get(conf);</div><div class="line">String filename = <span class="string">"/input2/file.txt"</span>;</div><div class="line">FSDataOutputStream outputStream = fs.create(<span class="keyword">new</span> Path(filename));<span class="comment">//创建一个文件</span></div><div class="line">InputStream in = <span class="keyword">new</span> ByteArrayInputStream(<span class="string">"Hello World"</span>.getBytes(<span class="string">"utf-8"</span>));</div><div class="line">IOUtils.copyBytes(in, outputStream, <span class="number">4096</span>, <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>将本文件上传到hdfs</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemCopy</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">FileSystem fs = FileSystem.get(conf);</div><div class="line">fs.copyFromLocalFile(<span class="keyword">new</span> Path(<span class="string">"/home/hduser/file/file1"</span>), <span class="keyword">new</span> Path(<span class="string">"/output"</span>));<span class="comment">//从本地上传到hdfs (第一个参数是本地路径，第二个参数是hdf文件路径)</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>删除一个文件</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemDelete</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">String uri=<span class="string">"/input/file1"</span>;</div><div class="line">Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">FileSystem fs = FileSystem.get(conf);</div><div class="line">Path f=<span class="keyword">new</span> Path(uri);</div><div class="line">fs.delete(f,<span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>重命名/移动文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemRename</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">String fromFile=<span class="string">"/input2/file1"</span>;<span class="comment">//</span></div><div class="line">String toFile=<span class="string">"/input2/file1new"</span>;<span class="comment">//</span></div><div class="line">Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">FileSystem fs = FileSystem.get(conf);</div><div class="line">Path fromPath=<span class="keyword">new</span> Path(fromFile);</div><div class="line">Path toPath=<span class="keyword">new</span> Path(toFile);</div><div class="line">fs.rename(fromPath, toPath);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>获取文件信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemGetStatus</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">String uri=args[<span class="number">0</span>];<span class="comment">//如：/input2/file1.txt</span></div><div class="line">Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">FileSystem fs = FileSystem.get(conf);</div><div class="line">Path f=<span class="keyword">new</span> Path(uri);</div><div class="line">FileStatus stat=fs.getFileStatus(f);</div><div class="line">System.out.println(<span class="string">"文件路径："</span>+stat.getPath());</div><div class="line">System.out.println(<span class="string">"文件块大小："</span>+stat.getBlockSize());</div><div class="line">System.out.println(<span class="string">"文件大小："</span>+stat.getLen());</div><div class="line">System.out.println(<span class="string">"副本数量："</span>+stat.getReplication());</div><div class="line">System.out.println(<span class="string">"用户："</span>+stat.getOwner());</div><div class="line">System.out.println(<span class="string">"用户组："</span>+stat.getGroup());</div><div class="line">System.out.println(<span class="string">"权限："</span>+stat.getPermission().toString());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>到这就讲解完毕了！！！感谢各位老铁的阅读</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;FS-Shell命令&quot;&gt;&lt;a href=&quot;#FS-Shell命令&quot; class=&quot;headerlink&quot; title=&quot;FS Shell命令&quot;&gt;&lt;/a&gt;&lt;strong&gt;FS Shell命令&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;创建目录 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
      
    
    </summary>
    
      <category term="Hadoop" scheme="http://yoursite.com/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
      <category term="HDFS" scheme="http://yoursite.com/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop之HDFS的概念理解</title>
    <link href="http://yoursite.com/2017/12/23/Hadoop%E4%B9%8BHDFS%E7%9A%84%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/12/23/Hadoop之HDFS的概念理解/</id>
    <published>2017-12-23T02:41:46.000Z</published>
    <updated>2018-01-09T12:05:54.508Z</updated>
    
    <content type="html"><![CDATA[<h4 id="HDFS是什么？"><a href="#HDFS是什么？" class="headerlink" title="HDFS是什么？"></a><strong>HDFS是什么？</strong></h4><p>   HDFS 全称 Hadoop Distributed File System ，简称HDFS，是一个分布式文件系统。它是谷歌的GFS提出之后出现的另外一种文件系统。它有一定高度的容错性，而且提供了高吞吐量的数据访问，非常适合大规模数据集上的应用。HDFS 提供了一个高度容错性和高吞吐量的海量数据存储解决方案。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h4><p>1、存储超大文件<br>2、标准流式访问：“一次写入，多次读取”<br>3、运行在廉价的商用机器集群上</p><h4 id="不足"><a href="#不足" class="headerlink" title="不足"></a><strong>不足</strong></h4><p>1、不能满足低延迟的数据访问<br>2、无法高效存储大量小文件<br>3、暂时不支持多用户写入及随意修改文件</p><h4 id="HDFS概念理解"><a href="#HDFS概念理解" class="headerlink" title="HDFS概念理解"></a><strong>HDFS概念理解</strong></h4><p>hdfs架构图如下：<br><img src="http://img.blog.csdn.net/20180109182103618?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>1、文件块（图中1、2、3、4带颜色的小正方形）</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文件分成块存储(默认64M，如今版本是128是M)，多台计算机存储。DateNode中存储以数字编号的方块（见上图）用于备份，每个块都会复制到几台机器上（默认3台）,如果一个块不可用，可从其它地方读取副本。副本是3，表示一共3处有该块。如果配置文件中副本设置为 4 ,但是结果只有2台datanode，最后副本还是2</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1000个1M的小文件会占用1024个块和1024个 inode，但是他只是占用1个块中的1M，不会占用整个空间，不过由于inode存储在NameNode的内存里，如果NameNode内存不足以存储inode，那么就不能再存储文件了、所以说HDFS并不适合存储小文件，有时候还要将小文件合并为大文件。</p><p>显示块信息命令：</p><pre><code>hdfs fsck / -files –blocks  //列出根目录下各个文件由哪些块存储。                            //它只是从NameNode获取信息，不与DateNode交互。</code></pre><p><strong>2、    NameNode和DataNode</strong><br><strong>NameNode（名字节点）</strong>: 管理文件系统命名空间；维护文件系统树内所有文件和目录，记录每个文件在哪个DateNode的位置和副本信息，协调客户端对文件的访问。<br>以两种文件格式存在：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fsimage<em>*：元数据镜像文件，即系统的目录树，包括文件目录和inodes元信息（文件名，文件大小，创建时间，备份级别，访问权限,block的size，所有block的构成),每个inode是hdfs的一个代表文件或者目录的元数据。这个镜像文件相当于hdfs的元数据额数据库文件。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edits</em><em>：编辑日志文件，也就是事务日志文件，也就是针对文件系统做的修改操作记录，记录元数据的变化，相当于操作日志文件。一个文件的创建，追加，移动等。<br>NameNode内存中存储的是=fsimage+edits<br>检查点：NameNode启动时，从磁盘中读取上面两种文件，然后把edits_</em>里面记录的事务全部刷新到 fsimage<em>*中，这样就截去了旧的edits</em><em>事务日志，这个过程叫checkpoint。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面文件在~/hadoop-2.6/dfs/name/current目录下（在hdfs-site.xml）    ,除此之外，还有VERSION（版本信息，包含文件系统唯一标识符）和seen<em>txid(事务管理，里面保存一个整数，表示edits</em></em>的尾数)两个文件。</p><p><strong>DataNode（数据节点）</strong>：存储，检索数据块。定期向NameNode发送所存储的块的列表。存储的块大小是64M，并且尽量把数据块分布不同的DateNode节点上。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上图某文件被分成4块，在多个DataNode中存储，而且每块都复制两个备份，存储在其它DataNode中。这些数据的存储目录/home/hduser/hadoop-2.6/dfs/data(dfs-site.xml中指定)。例如下面文件：/home/hduser/hadoop-2.6/dfs/data/current/BP-1111-ip-2222/current/finalized/subbdir0/sudir0，该目录下的文件包括blk<em>{id}和blk</em>{id}.meta，前者是二进制格式的数据块，后者是数据块的元信息（版本信息，类型信息 ）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataNode负责处理文件系统客户端的文件读写请求，并在NameNode的统一调度下进行数据的创建，删除和复制工作。如果NameNode数据损坏，HDFS所有文件都不能访问，为了保证高可用性，Hadoop对NameNode进行了补充，即Sencondary NameNode。</p><p><strong>3、    Secondary NameNode结点</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;系统同步运行一个Secondary NameNode，也称二级NameNode，周期的备份NameNode，它可以用来恢复NameNode。由于有一定的滞后，所以会带来数据的损失。为了防止宕机，一般我们会把它放在另外一台计算机。使用hdfs-site.xml中dfs.namenode.secondary.http-address属性可以通过浏览器查看Secondary NameNode的运行状态。<br>默认是1小时，从NameNode获取fsimage和edits进行合并，然后再发送给namenode，减少namenode的工作量。</p><h4 id="HDFS体系架构"><a href="#HDFS体系架构" class="headerlink" title="HDFS体系架构"></a><strong>HDFS体系架构</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HDFS采用master/slave架构。一个HDFS集群是由一个Namenode和一定数目的Datanodes组成。Namenode是一个中心服务器，负责管理文件系统的名字空间(namespace)以及客户端对文件的访问。集群中的Datanode一般是一个节点一个，负责管理它所在节点上的存储。HDFS暴露了文件系统的名字空间，用户能够以文件的形式在上面存储数据。从内部看，一个文件其实被分成一个或多个数据块，这些块存储在一组Datanode上。Namenode执行文件系统的名字空间操作，比如打开、关闭、重命名文件或目录。它也负责确定数据块到具体Datanode节点的映射。Datanode负责处理文件系统客户端的读写请求。在Namenode的统一调度下进行数据块的创建、删除和复制。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一次写，多次读取：一个文件一旦创建，写入，关闭之后就不需要修改了。<br>   <img src="http://img.blog.csdn.net/20180109150555718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><strong>读写流程如下：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;读流程：客户端向NameNode请求访问某个文件，NameNode返回该文件位置在哪个DataNode上，然后客户端从DataNode上读取数据。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;写流程：客户端向NameNode发出写文件写请求，NameNode告诉客户端向哪个DataNode写文件，然后客户端将文件写入该DataNode节点，随后该 DataNode将该文件自动复制到其它DataNode节点上，默认三份备份。</p><p><strong>HDFS常见节点管理：</strong><br>1    节点添加<br>可扩展性是一个重要特征，往HDFS集群中添加一个节点步骤如下：</p><blockquote><p>1)    对新节点进行系统配置（hostname,hosts,jdk,防火墙等）<br>2)    对新节点进行hadoop的安装和配置，和其它DataNode一样。<br>3)    在NameNode中修改~/hadoop-2.6/etc/hadoop/Slaves文件，加入新节点名称。<br>4)    启动(start-all.sh，或者start-dfs.sh,start-yarn.sh)</p></blockquote><p>2    负载均衡<br>HDFS的数据在各个DataNode中的分布可能不均匀，尤其是DataNode出现故障或者新增节点时，采用下面命令可以重新平衡DataNode的数据块分布：<br>$start-balancer.sh</p><p>3    安全机制<br>由于NameNode统一调度，没有它文件系统无法使用，采用下面两种机制确保其安全：</p><blockquote><p>1）    把NameNode存储的元数据转移到其它文件系统上。<br>2）    使用Secondary NameNode同步备份。</p></blockquote><p>好了到这说了那么多大概大家都知道hdfs能干什么了，在这我就不多说了。怎么玩hdfs请看我下一篇文章<a href="http://hfbin.cn/2017/12/25/FS%20Shell%E5%91%BD%E4%BB%A4%E4%B8%8EJAVA%E5%AE%9E%E7%8E%B0%E6%93%8D%E4%BD%9CHDFS%E6%96%87%E4%BB%B6/" target="_blank" rel="external">http://hfbin.cn/2017/12/25/FS%20Shell%E5%91%BD%E4%BB%A4%E4%B8%8EJAVA%E5%AE%9E%E7%8E%B0%E6%93%8D%E4%BD%9CHDFS%E6%96%87%E4%BB%B6/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;HDFS是什么？&quot;&gt;&lt;a href=&quot;#HDFS是什么？&quot; class=&quot;headerlink&quot; title=&quot;HDFS是什么？&quot;&gt;&lt;/a&gt;&lt;strong&gt;HDFS是什么？&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;   HDFS 全称 Hadoop Distributed
      
    
    </summary>
    
      <category term="Hadoop" scheme="http://yoursite.com/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
      <category term="HDFS" scheme="http://yoursite.com/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>从零开始配置hadoop集群环境</title>
    <link href="http://yoursite.com/2017/12/20/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AEhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2017/12/20/从零开始配置hadoop集群环境/</id>
    <published>2017-12-20T02:28:00.000Z</published>
    <updated>2018-01-10T14:50:02.629Z</updated>
    
    <content type="html"><![CDATA[<h5>一张图了解hadoop集群环境架构</h5><p><img src="http://img.blog.csdn.net/20171223134751933?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>（其它废话我就不多说了，直接上）</p><p>这里在VMware装liunx（rhel-server-6.4，一定要注意是liunx版本是6的）虚拟机我就不多说了，需要的留言，有必的话留要的话我会另写一篇文章在VMware装liunx虚拟机。</p><h4 id="1-配置网络和计算机名字"><a href="#1-配置网络和计算机名字" class="headerlink" title="1.配置网络和计算机名字"></a><strong>1.配置网络和计算机名字</strong></h4><h5 id="1-关闭防火墙和selinux"><a href="#1-关闭防火墙和selinux" class="headerlink" title="1) 关闭防火墙和selinux"></a><strong>1) 关闭防火墙和selinux</strong></h5><pre><code>shell&gt;iptables -Fshell&gt;service iptables saveshell&gt;setenforce 0shell&gt;vim /etc/selinux/config 修改SELINUX=disabled</code></pre><h5 id="2-配置计算机网络"><a href="#2-配置计算机网络" class="headerlink" title="2) 配置计算机网络"></a><strong>2) 配置计算机网络</strong></h5><pre><code>shell&gt;vim /etc/sysconfig/network-scripts/ifcfg-eth0</code></pre><p>内容如下：加//的表示要修改的地方 没有的自己加进去</p><blockquote><p>DEVICE=eth0<br>HWADDR=00:0C:29:57:A1:42<br>TYPE=Ethernet<br>ONBOOT=yes //<br>NM_CONTROLLED=no//关闭，yes表示修改后不必重启网卡立刻生效。会带来隐患<br>BOOTPROTO=static    //静态分配ip，不要用DHCP分配<br>IPADDR=172.16.100.101 //<br>GATEWAY=172.16.100.2 //</p></blockquote><p>重启网卡</p><pre><code>shell&gt;service network restart </code></pre><p>测试：查看ip</p><pre><code>shell&gt;ifconfig 查看ip地址</code></pre><p>如图：<br><img src="http://img.blog.csdn.net/20171223110550365?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>此时你在本地ping虚拟机时候还是ping不通的，看下一步。</p><h5 id="3-配置vmware的网卡"><a href="#3-配置vmware的网卡" class="headerlink" title="3) 配置vmware的网卡"></a><strong>3) 配置vmware的网卡</strong></h5><p><img src="http://img.blog.csdn.net/20171223110633295?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20171223110646735?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>这里网关ip必须与/etc/sysconfig/network-scripts/ifcfg-eth0中的GATEWAY的ip一致。</p><p><img src="http://img.blog.csdn.net/20171223110655801?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>如果本虚拟机是克隆的，查看一下配置的mac地址和虚拟机分配的mac地址是否一致</p><p><img src="http://img.blog.csdn.net/20171223110705439?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>这里如果还是ping不同那就要到本地网络里去重启一下VMnet8网络。</p><p>NAT方式如果仍然上不去网另留言。</p><h5 id="4-配置计算机名字"><a href="#4-配置计算机名字" class="headerlink" title="4) 配置计算机名字"></a><strong>4) 配置计算机名字</strong></h5><p>临时修改</p><pre><code>shell&gt;hostname hfbin1  </code></pre><p>永久修改（需要重启,如果执行了临时修改，不需要重启）</p><pre><code>shell&gt;vim /etc/sysconfig/network </code></pre><h4 id="2-安装JDK和Hadoop"><a href="#2-安装JDK和Hadoop" class="headerlink" title="2 安装JDK和Hadoop"></a><strong>2 安装JDK和Hadoop</strong></h4><p>JDK和Hadoop包百度云链接：<a href="https://pan.baidu.com/s/1pLEAAa3" target="_blank" rel="external">https://pan.baidu.com/s/1pLEAAa3</a> 密码：gymn</p><h5 id="2-1-安装jdk1-7-0-71"><a href="#2-1-安装jdk1-7-0-71" class="headerlink" title="2.1    安装jdk1.7.0.71"></a><strong>2.1    安装jdk1.7.0.71</strong></h5><p><strong>卸载旧的jdk</strong></p><pre><code>shell&gt;rpm -qa | grep jdk</code></pre><p>执行命令显示内容如下：</p><p>java-1.6.0-openjdk-1.6.0.0-1.50.1.11.5.el6_3.i686</p><p>java-1.7.0-openjdk-1.7.0.9-2.3.4.1.el6_3.i686</p><p>卸载jdk:</p><pre><code>shell&gt;rpm -e --nodeps java-1.6.0-openjdk-1.6.0.0-1.50.1.11.5.el6_3.i686shell&gt;rpm -e --nodeps java-1.7.0-openjdk-1.7.0.9-2.3.4.1.el6_3.i686</code></pre><p>如图：<br> <img src="http://img.blog.csdn.net/20171223110954031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>2、    安装新的jdk，要求1.7以上版本(从现在开始我使用xshell工具链接虚拟机不用进入虚拟机里面操作了)。</strong></p><p>这里要装VMware tool 工具才能将文件往虚拟机拖，不过上面你要是网络配通了，可以使用winscp/xftp工具将文件上传到虚拟机上，在这我就不说明了，这里我将文件上传到了/opt目录中。</p><p>进入opt目录</p><pre><code>shell&gt;cd /opt</code></pre><p>执行安装：</p><pre><code>shell&gt;rpm –ivh jdk-7u67-linux_64.rpm</code></pre><p>   <img src="http://img.blog.csdn.net/20171223111035444?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>3、    配置jdk环境变量</strong><br>修改/etc/profile<br>shell&gt; vim  /etc/profile<br>在末尾加入：</p><pre><code>export JAVA_HOME=/usr/java/jdk1.7.0_67export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/libexport PATH=.:$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH</code></pre><p> <img src="http://img.blog.csdn.net/20171223111118661?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>进入终端，输入 source /etc/profile 使刚刚修改的环境变量生效。</p><pre><code>shell&gt;source /etc/profile</code></pre><p>测试是否成功：</p><pre><code>shell&gt;java –version //1.7.0.67shell&gt;javac –version //1.70.67</code></pre><p> <img src="http://img.blog.csdn.net/20171223111129827?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h5 id="2-2-创建用户hduser和组hadoop"><a href="#2-2-创建用户hduser和组hadoop" class="headerlink" title="2.2    创建用户hduser和组hadoop"></a><strong>2.2    创建用户hduser和组hadoop</strong></h5><pre><code>shell&gt;groupadd hadoopshell&gt;useradd –g hadoop hduser </code></pre><p><img src="http://img.blog.csdn.net/20171223111139851?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>    shell&gt;passwd hduser<br> <img src="http://img.blog.csdn.net/20171223111152375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>修改vim /etc/sudoers,为hduser增加sudo权限</p><pre><code>shell&gt;sudo vim /etc/sudoers</code></pre><p>输入密码，使用root权限才可以更改此文件。</p><p>大概在99行，添加内容：</p><pre><code>hduser  ALL=(ALL)  ALL  (大概99行)</code></pre><p> <img src="http://img.blog.csdn.net/20171223111205468?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>重启 </p><pre><code>shell&gt;reboot</code></pre><p>重启，切换到hduser登陆</p><h5 id="2-3-安装hadoop2-6-0"><a href="#2-3-安装hadoop2-6-0" class="headerlink" title="2.3    安装hadoop2.6.0"></a><strong>2.3    安装hadoop2.6.0</strong></h5><p>以后的身份用hduser，如果涉及到权限不够，用sudo</p><p>先通过vmtools或winscp/xftp把hadoop-2.6.0.tar.gz传到linux的/home/hduser中</p><p>解压:</p><p>shell&gt;tar xvzf hadoop-2.6.0.tar.gz </p><p>改名:</p><p>shell&gt;mv hadoop-2.6.0   hadoop-2.6</p><h5 id="2-4-配置hadoop的环境变量"><a href="#2-4-配置hadoop的环境变量" class="headerlink" title="2.4    配置hadoop的环境变量"></a><strong>2.4    配置hadoop的环境变量</strong></h5><p>shell&gt;vim /etc/profile</p><p>在末尾加入下面环境：</p><p>export HADOOP_HOME=/home/hduser/hadoop-2.6<br>export PATH=.:\$HADOOP_HOME/bin:\$HADOOP_HOME/sbin:\$PATH</p><p>进入终端，输入 shell&gt;source /etc/profile 使刚刚修改的环境变量生效</p><p>测试hadoop是否安装成功</p><p>shell&gt;hadoop version</p><p>如图：</p><p><img src="http://img.blog.csdn.net/20171223113600820?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>看到图片信息即可安装成功。</p><h4 id="3-安装ssh"><a href="#3-安装ssh" class="headerlink" title="3    安装ssh"></a><strong>3    安装ssh</strong></h4><p>1）    生成公钥和私钥</p><pre><code>shell&gt;ssh-keygen  -t rsa         //在 /home/hduser/.ssh/目录下有两把钥匙，其中后缀.pub是公</code></pre><p>2）    在本机进行免密码登陆</p><pre><code>shell&gt;ssh-copy-id localhost            //复制私钥到其它计算机，当前是本机                                          //一会克隆完其它两台机器，还要再用此命令。</code></pre><p>测试，输入：</p><pre><code>shell&gt;ssh localhost</code></pre><p>如果不需要密码则正确</p><h4 id="4-配置完全分布式"><a href="#4-配置完全分布式" class="headerlink" title="4    配置完全分布式"></a><strong>4    配置完全分布式</strong></h4><h5 id="4-1-配置host映射文件"><a href="#4-1-配置host映射文件" class="headerlink" title="4.1    配置host映射文件"></a><strong>4.1    配置host映射文件</strong></h5><p>修改shell&gt;sudo vim /etc/hosts文件，做ip和主机名映射</p><pre><code>172.16.100.101 hfbin1172.16.100.102 hfbin2172.16.100.103 hfbin3</code></pre><p>修改本机的主机名为hfbin1</p><pre><code>shell&gt;hostname hfbin1             //临时修改，立刻起作用shell&gt;vim /etc/sysconfig/network    //永久修改，需要重启</code></pre><h5 id="4-2-克隆两台虚拟机-修改主机名和ip-注意mac地址"><a href="#4-2-克隆两台虚拟机-修改主机名和ip-注意mac地址" class="headerlink" title="4.2    克隆两台虚拟机,修改主机名和ip(注意mac地址)"></a><strong>4.2    克隆两台虚拟机,修改主机名和ip(注意mac地址)</strong></h5><p><strong>1） 克隆两台虚拟机，分别是hfbin2和hfbin3</strong><br> <img src="http://img.blog.csdn.net/20171223130621247?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>然后一直点下一步，下一步，然后选择“完整克隆”，之后选择存放目录，再点完成。<br>  <img src="http://img.blog.csdn.net/20171223130659445?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><strong>2)修改主机(ip和mac地址)</strong></p><p>主机：</p><pre><code>shell&gt;sudo vim /etc/sysconfig/network ，之后重启（不想重启需要再执行命令hostname）hostname=hfbin2（hfbin3）同时删除；NETWORKING=yes</code></pre><p>ip:  </p><pre><code>shell&gt;sudo vim /etc/sysconfig/network-scripts/ifcfg-eth0IPADDR=172.16.100.102(172.16.100.103)HWADDR=？ 见下图</code></pre><p>mac: 还是在上面的文件中修改mac地址，要和vmware分配的一样。<br> <img src="http://img.blog.csdn.net/20171223130723053?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>克隆后的虚拟机，如果ip没有发现，先重启，还不行，执行以下步骤：</p><blockquote><p>1、    删除文件 shell&gt;rm -rf /etc/udev/rules.d/70-persistent-net.rules</p><p>2、    修改hwaddr为实际的mac地址。shell&gt;vim /etc/sysconfig/network-scripts/ifcfg-eth0</p><p>3、     shell&gt;reboot重启</p></blockquote><h5 id="4-3-设置ssh免登陆到其它主机"><a href="#4-3-设置ssh免登陆到其它主机" class="headerlink" title="4.3    设置ssh免登陆到其它主机"></a><strong>4.3    设置ssh免登陆到其它主机</strong></h5><p>把hfbin1的公钥复制到hfbin2和 hfbin3中，这样hfbin1可以免登录到其它两台主机上。</p><pre><code>shell&gt;ssh-copy-id    hfbin2shell&gt;ssh-copy-id    hfbin3</code></pre><p>测试，在hfbin1输入：</p><pre><code>shell&gt;ssh hfbin2shell&gt;ssh hfbin3</code></pre><p>如果不需要密码则正确（注意进入hfbin2或hfbin3想退出可以用shell&gt;exit ,即可）</p><h5 id="4-4-修改hadoop的七个配置文件"><a href="#4-4-修改hadoop的七个配置文件" class="headerlink" title="4.4    修改hadoop的七个配置文件"></a><strong>4.4    修改hadoop的七个配置文件</strong></h5><p>这里只对hfbin1进行更改，hfbin2和hfbin3等一下直接copy进去即可。</p><p>以下7个文件在hadoop的安装目录的etc下，也就是~/hadoop-2.6/etc/hadoop下</p><p>1)Hadoop的环境配置，我们主要配置一下JDK路径。</p><pre><code>shell&gt;vim hadoop-env.sh</code></pre><p>修改下面内容</p><pre><code>export JAVA_HOME=/usr/java/jdk1.7.0_67</code></pre><p> <img src="http://img.blog.csdn.net/20171223130801918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>2)Yarn框架环境配置，也要指定JDK路径。</p><pre><code>shell&gt;vim yarn-env.sh</code></pre><p>修改下面内容</p><pre><code>export JAVA_HOME=/usr/java/jdk1.7.0_67</code></pre><p> <img src="http://img.blog.csdn.net/20171223130816324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>3)    增加slave节点，也就是DateNode节点。</p><pre><code>shell&gt;vim slaves</code></pre><p>删除所有，加入下面内容</p><pre><code>hfbin2hfbin3    </code></pre><p>4)Hdoop的全局配置。例如：客户端连接HDFS时，路径前缀和工作端口。</p><pre><code>shell&gt;vim core-site.xml</code></pre><p>在configuration标签里加入下面内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hfbin1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/hduser/hadoop-2.6/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p><p>5)HDFS的配置</p><pre><code>shell&gt;vim hdfs-site.xml</code></pre><p>在configuration标签里加入下面内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hfbin1:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/hduser/hadoop-2.6/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span> file:/home/hduser/hadoop-2.6/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p><p>6)Mapreduce的配置</p><pre><code>shell&gt;vim mapred-site.xml</code></pre><p>在configuration标签里加入下面内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hfbin1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span> hfbin1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p><p>7)Yarn框架的配置Hadoop集群测试</p><pre><code>shell&gt;vim yarn-site.xml</code></pre><p>在configuration标签里加入下面内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hfbin1:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hfbin1:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hfbin1:8035<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hfbin1:8033<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hfbin1:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p><p>复制7个文件到hfbin2和hfbin3</p><pre><code>shell&gt;scp -r /home/hduser/hadoop-2.6/etc/hadoop/ hduser@hfbin2:/home/hduser/hadoop-2.6/etc/shell&gt;scp -r /home/hduser/hadoop-2.6/etc/hadoop/ hduser@hfbin3:/home/hduser/hadoop-2.6/etc/</code></pre><h5 id="4-5-验证hadoop配置是否正确"><a href="#4-5-验证hadoop配置是否正确" class="headerlink" title="4.5    验证hadoop配置是否正确"></a><strong>4.5    验证hadoop配置是否正确</strong></h5><p><strong>1、    格式化master(namenode)的文件系统</strong></p><pre><code>shell&gt; hdfs namenode –format</code></pre><p>注：如果已经格式化后，重新格式化，需要删除172.16.100.101、172.16.100.102、172.16.100.103节点的此目录下的文件：/home/hduser/hadoop-2.6/dfs</p><p><strong>2、    启动dfs</strong></p><pre><code>shell&gt;start-dfs.sh</code></pre><p><img src="http://img.blog.csdn.net/20171223131225949?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>如果出现WARN util.NativeCodeLoader: Unable：： to load native-hadoop library….</p><p>解决：在shell&gt;vim /home/hduser/hadoop-2.6/etc/hadoop/log4j.properties文件中末尾添加</p><pre><code>log4j.logger.org.apache.hadoop.util.NativeCodeLoader=ERROR</code></pre><p>3、    输入 jps查看进程</p><pre><code>shell&gt;jps</code></pre><p><img src="http://img.blog.csdn.net/20171223131322168?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>4、    启动yarn</p><pre><code>shell&gt;start-yarn.sh</code></pre><p><img src="http://img.blog.csdn.net/20171223131357970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>5、    查看集群状态</p><pre><code>shell&gt;hdfs dfsadmin -report</code></pre><p> <img src="http://img.blog.csdn.net/20171223131535051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>6、    在浏览中查看dfs的运行状态</p><pre><code>http://172.16.100.101:50070</code></pre><p><img src="http://img.blog.csdn.net/20171223131742714?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>7、    停止hadoop</p><pre><code>shell&gt;stop-all.sh</code></pre><h5 id="4-6-运行例子wordcount"><a href="#4-6-运行例子wordcount" class="headerlink" title="4.6    运行例子wordcount"></a><strong>4.6    运行例子wordcount</strong></h5><p>该例子为hadoop自带例子，统计出所有文件的单词的词频。</p><p>如图：<br><img src="http://img.blog.csdn.net/20171223134322221?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>1)    创建文件file1和file2(放到目录/home/hduser/file)</p><pre><code>shell&gt;mkdir file (在/home/hduser/下输入命令)shell&gt;vim file1加入下面内容：Hello World hi HADOOPshell&gt;vim file2加入下面内容：Hello Hadoop hi CHINA</code></pre><p>2)    启动hdfs，并且创建hdfs目录 /input3</p><pre><code>shell&gt;start-dfs.shshell&gt;start-yarn.shshell&gt;hadoop  fs  -mkdir  /input3</code></pre><p>3)    把file1和file2放到hdfs的目录/input2/中。</p><pre><code>shell&gt; hadoop fs  -put file* /input3</code></pre><p>4)    查看hdfs中是否有file和file2</p><pre><code>shell&gt;hadoop fs  -ls /input3</code></pre><p><img src="http://img.blog.csdn.net/20171223133710586?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>5)    运行命令</p><pre><code>shell&gt;hadoop jar /home/hduser/hadoop-2.6/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0.jar wordcount  /input3/ /output3/wordcount1</code></pre><p>6)    查看输出文件</p><pre><code>shell&gt;hadoop fs -ls /output3/wordcount1</code></pre><p><img src="http://img.blog.csdn.net/20171223133951715?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><pre><code>shell&gt;hadoop fs -cat /output3/wordcount1/part-r-00000</code></pre><p><img src="http://img.blog.csdn.net/20171223134008623?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>后续我会写一篇关于<strong>hdfs命令</strong>的使用方法</p><p></p><h3>目前到这hdoop集群搭建就完毕了</h3>有什么问题在下面留言即可<p></p><p>转发者必须经同意才可以转发。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5&gt;一张图了解hadoop集群环境架构&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171223134751933?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQ
      
    
    </summary>
    
      <category term="Hadoop" scheme="http://yoursite.com/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>liunx目录结构说明与常用命令（基于6.4版本）</title>
    <link href="http://yoursite.com/2017/12/19/liunx%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E8%AF%B4%E6%98%8E%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E5%9F%BA%E4%BA%8E6.4%E7%89%88%E6%9C%AC%EF%BC%89/"/>
    <id>http://yoursite.com/2017/12/19/liunx目录结构说明与常用命令（基于6.4版本）/</id>
    <published>2017-12-19T02:07:44.000Z</published>
    <updated>2018-01-06T06:24:53.050Z</updated>
    
    <content type="html"><![CDATA[<h4 id="根目录结构"><a href="#根目录结构" class="headerlink" title="根目录结构"></a><strong>根目录结构</strong></h4><p>bin        用户可执行的命令,除此之外,还有 /user/bin, /bin, /user/local/bin</p><p>sbin        系统管理员执行的命令， 除此之外, 还有/user/sbin, /bin, /user/local/sbin</p><p>lib        库文件(32位)， 除此之外, 还有/user/lib, /bin, /user/local/lib</p><p>lib64        库文件(64位)， 除此之外, 还有/user/lib64, /bin, /user/local/lib64</p><p>etc        配置文件</p><p>usr        应用程序目录</p><p>var        服务器数据，日志等，伪文件系统</p><p>boot        启动目录</p><p>dev        设备文件目录</p><p>cgroup        6b版本的新特性，资源控制，做系统优化用。</p><p>tmp        临时文件目录</p><p>proc        虚拟的文件系统，进程和内存信息，不是实际存储在磁盘上的。</p><p>sys        它和proc很像，但目录比较干净。区别是,它比proc多包含了一些内核参数等。而且它是真是存在的，而proc是虚拟的。</p><p>root        root的家目录</p><p>home        普通用户家目录</p><p>media        媒介目录</p><p>mnt        以前放软驱的，现在一般用来我们想挂什么就挂什么的目录.</p><p>opt        放第三方软件。</p><p>selinux        selinux的组建。</p><p>misc和net    autofs服务使用的目录</p><p>srv        服务器数据目录。我们常用的是var,所以这个常常为空。</p><p>lost+found    文件系统维护自己系统的。例如文件重启丢失了，那么可以在这里找回。</p><p>swap        交换分区</p><p>shm        共享内存</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h4><p>cd : 进到目录下</p><pre><code>&gt;cd /home :进到/home目录下&gt;cd .. :进到上一级目录&gt;cd ~ :进到家目录,和直接输入cd相同     &gt;例： cd /etc/</code></pre><p>pwd:显示当前所有的目录.</p><p>cat  : 查看文件内容</p><pre><code>&gt;cat /root/install.log&gt;cat -n /root/install.log 显示行号(所有行)&gt;cat -n /root/install.log|more 分页查看,首先显示第一页，看下一页按空格键，退出按q</code></pre><p>more : 查看文件（分页)</p><pre><code>&gt;空格 向下翻页&gt;b    向上翻页&gt;q    退出</code></pre><p>head :默认显示前10行</p><pre><code>&gt;head -n 30 /root/install.log 显示前30行&gt;cat -n /root/install.log | head -n 10 显示带有行号的前10行</code></pre><p>tail :默认后10行</p><pre><code>&gt;tail -n 10 /root/install.log    显示后10行数据&gt;tail -f /root/install.log 动态的显示文件。</code></pre><p>touch:创建文件</p><pre><code>&gt;cd ~:进到家目录&gt;touch cc.txt</code></pre><p>mkdir:创建目录</p><pre><code>&gt;mkdir abcd&gt;mkdir -p xx/yy：递归创建&gt;mkdir -pv kk/nn    -p 递归  -v 显示过程</code></pre><p>cp 源文件地址 目标地址</p><pre><code>&gt;cp /root/install.log /tmp/ll.txt  拷贝过程中 重命名文件复制目录        &gt;cp -r /root/abcd/ /tmp/     -r 递归 recursive&gt;cp -r /root/abcd/ /tmp/aaaa   </code></pre><p>mv 源文件地址 目标地址 移动或重命名目录</p><pre><code>&gt;mv /root/yy.txt  /tmp/&gt;mv cc.txt kk.txt   重命名文件(当前目录下)</code></pre><p>rm -rf :删除文件和目录</p><pre><code>&gt;rm -rf 1.txt&gt;rm -rf /tmp/</code></pre><p><strong>vim/vi 编辑命令</strong></p><p>命令模式：控制屏幕光标的移动，删除，撤销，复制 , 粘贴，选择<br>    进入编辑模式：    </p><pre><code>&gt;i：字符前面插入a：字符后面插入o：下一行插入I：行首插入A：行尾插入O：在上一行插入</code></pre><p>进入到末行模式：冒号<br>编辑模式：输入内容<br>进入命令模式：按键盘esc<br>末行模式：保存，退出，查找，替换<br>打开文件：vi [文件名]<br>保存并退出：wq<br>退出但不保存：q!<br>保存:w<br>ZZ：强制保存退出</p><p>命令模式（移动，删除，撤销，复制,粘贴，选择）<br>移动：方法1用上下左右键 方法2：h/j/k/l</p><blockquote><p>gg 到第一行的行首<br>   G  到最后一行的行首<br>   G$  到最后一行的行尾<br>   ^ 到行首<br>   $ 到行尾<br>   5gg:跳到第5行</p></blockquote><p>删除</p><blockquote><p> x:删除一个字符<br>  dd：剪切/删除1行。<br>  5dd:剪切/删除5行。<br>  d^:删除当前字符到行首<br>  d$:从当前字符删除到末尾<br>  dG：删除当前行到尾行。<br>  dgg:删除当前行到首行 </p></blockquote><p>撤销</p><blockquote><p>u:撤销上一次的操作</p><p>重做<br>ctrl+r:重做</p></blockquote><p>复制</p><blockquote><p>yy:复制1行<br>  5yy:复制5行</p></blockquote><p>粘贴</p><blockquote><p>p: 粘贴</p></blockquote><p><strong>末行模式(工作模式)</strong></p><p>查找</p><pre><code>&gt;:/xxx: 从上往下查找字符串xxx      &gt; n:下一个符合的字符串（向下）       &gt;N:下一个符合的字符串（向上）&gt;:?xxx: 从下往上查找字符串xxx</code></pre><p>替换</p><blockquote><p>：%s/zhang3/li4/g<br>%表示所有行，s表示替换 , g控制这一行，如果不写g,则会发现只有每一行的第1个符合条件的字符串替换。</p><p>：3,8/zhang3/li4/g<br>第3行到第8行替换</p><p>：3,8/zhang3/li4/gc<br>加了一个c, 会问答形式</p><p>在一个文件中，所有开头都加入#<br>:%s/^/#/g</p><p>把文件中所有空格去掉<br>:%s/ //g</p><p>所有开头空格去掉<br>:%s/^ //g</p><p>所有变成1行<br>:%s/\n//g</p><p>删除换行<br>:g/^\s*$/d</p></blockquote><p>行号</p><pre><code>&gt;设置行号：set nu或者set number取消行号:set nonu或 set nonumber</code></pre><p>自动缩进 </p><pre><code>&gt;set autoindentset noautoindent</code></pre><p>设置制表符</p><pre><code>&gt;set tabstop=8         全局调配set softtabstop=4    前面的不做调整，后面的制表符调整</code></pre><p><strong>用户管理</strong></p><p> 进入图形界面<br> system-config-users</p><p>创建用户<br>useradd zhang3<br>passwd zhang3      设置密码    </p><p>创建组<br>groupadd game</p><p>修改用户组<br>usermod -g 用户组 用户名</p><p>创建用户同时指定组<br>useradd -g game wang5</p><p><strong>文件权限</strong></p><p>ls -l中显示的内容如下：</p><p>-rwxrw-r– 1 zhang3 sport 1213 Feb 2 09:39 1.txt</p><ul><li><p>10个字符确定不同用户能对文件干什么</p></li><li><p>第一个字符代表文件（-）、目录（d），链接（l）</p></li><li><p>其余字符每3个一组（rwx），读权限r（4）、写权限w（2）、执行权限x（1）,-表示不具有该项权限</p></li><li><p>第一组rwx：文件所有者的权限是读、写和执行</p></li><li><p>第二组rw-：与文件所有者同一组的用户的权限是读、写但不能执行</p></li><li>第三组r–：不与文件所有者同组的其他用户的权限是读不能写和执行<br>目录没有-x权限，则无法对目录执行任何命令。甚至无法cd进入目录</li></ul><p>也可用数字表示为：r=4，w=2，x=1  因此rwx=4+2+1=7</p><ul><li>1 表示连接的文件数</li><li>zhang3 表示用户</li><li>sport 表示用户所在的组</li><li>1213 表示文件大小（字节）</li><li>Feb 2 09:39 表示最后修改日期</li><li>1.txt 表示文件名 </li></ul><p><strong>改变文件权限的命令</strong></p><p>创建文件/目录，默认全是 644（rw-r-xr-x）</p><p>chmod 改变文件或目录的权限</p><pre><code>chmod 755 abc：赋予abc权限rwxr-xr-xchmod u=rwx，g=rx，o=rx abc：同上u=用户权限，g=组权限，o=不同组其他用户权限chmod u-x，g+w abc：给abc去除用户执行的权限，增加组写的权限chmod a+r abc：给所有用户添加读的权限chmod u+r 文件/目录 chmod u+r,g-w 文件/目录 同时修改用户和组chmod u+r,g-w,o+rw 文件/目录chmod ugo+rwx 文件/目录chmod a+rw 文件/目录chmod u=r 文件/目录chmod u=rw,g=x 文件/目录chmod ugo=rwx 文件/目录chmod a=rwx 文件/目录</code></pre><p><strong>改变文件所有者（chown）和用户组（chgrp）命令</strong><br>chown robin 文件/目录     修改用户<br>chgrp film 文件/目录     修改组<br>chown .film  文件/目录    修改组<br>chown robin.film 文件/目录 修改组合用户</p><p>上面的.也可以换成:</p><p>从上面看出，chown既可以改组，也可以改用户。</p><p>chown -R robin.film test/<br>递归修改目录和内部所有文件的所属组和拥有者<br>chmod -R 777 test/<br>递归修改目录和内部所有文件的权限</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;根目录结构&quot;&gt;&lt;a href=&quot;#根目录结构&quot; class=&quot;headerlink&quot; title=&quot;根目录结构&quot;&gt;&lt;/a&gt;&lt;strong&gt;根目录结构&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;bin        用户可执行的命令,除此之外,还有 /user/bin, /b
      
    
    </summary>
    
      <category term="liunx" scheme="http://yoursite.com/categories/liunx/"/>
    
    
      <category term="liunx" scheme="http://yoursite.com/tags/liunx/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper+ActiveMQ集群搭建</title>
    <link href="http://yoursite.com/2017/12/02/Zookeeper+ActiveMQ%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/12/02/Zookeeper+ActiveMQ集群搭建/</id>
    <published>2017-12-02T03:19:55.000Z</published>
    <updated>2018-01-06T06:22:49.370Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a><strong>1 前言</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用ZooKeeper实现的Master-Slave实现方式，是对ActiveMQ进行高可用的一种有效的解决方案，高可用的原理：使用ZooKeeper（集群）注册所有的ActiveMQ Broker。只有其中的一个Broker可以对外提供服务（也就是Master节点），其 他的Broker处于待机状态，被视为Slave。如果Master因故障而不能提供服务， 则利用ZooKeeper的内部选举机制会从Slave中选举出一个Broker充当Master节 点，继续对外提供服务。</p><p>原理图：</p><p><img src="http://img.blog.csdn.net/20171223143709938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>官方文档：<a href="http://activemq.apache.org/replicated-leveldb-store.html" target="_blank" rel="external">http://activemq.apache.org/replicated-leveldb-store.html</a></p><h4 id="2-部署方案，ZooKeeper、ActiveMQ集群环境准备"><a href="#2-部署方案，ZooKeeper、ActiveMQ集群环境准备" class="headerlink" title="2 部署方案，ZooKeeper、ActiveMQ集群环境准备"></a><strong>2 部署方案，ZooKeeper、ActiveMQ集群环境准备</strong></h4><p>这里需要下载apache-activemq-5.11.1bin.tar.gz、zookeeper-3.3.6.tar.gz文件，可以到官网去下载。</p><p>apache-activemq-5.11.1bin.tar.gz、zookeeper-3.3.6.tar.gz百度云链接：链接：<a href="https://pan.baidu.com/s/1ge5htFP" target="_blank" rel="external">https://pan.baidu.com/s/1ge5htFP</a> 密码：lkb6</p><h5 id="2、1-Zookeeper方案"><a href="#2、1-Zookeeper方案" class="headerlink" title="2、1 Zookeeper方案"></a><strong>2、1 Zookeeper方案</strong></h5><table><thead><tr><th style="text-align:left">主机IP</th><th style="text-align:center">消息端口</th><th style="text-align:center">通信端口</th><th style="text-align:center">节点目录/opt/下</th></tr></thead><tbody><tr><td style="text-align:left">192.168.0.107</td><td style="text-align:center">2181</td><td style="text-align:center">2888:3888</td><td style="text-align:center">zookeeper-3.3.6</td></tr><tr><td style="text-align:left">192.168.0.108</td><td style="text-align:center">2181</td><td style="text-align:center">2888:3888</td><td style="text-align:center">zookeeper-3.3.6</td></tr><tr><td style="text-align:left">192.168.0.109</td><td style="text-align:center">2181</td><td style="text-align:center">2888:3888</td><td style="text-align:center">zookeeper-3.3.6</td></tr></tbody></table><h5 id="2、2-ActiveMQ方案"><a href="#2、2-ActiveMQ方案" class="headerlink" title="2、2 ActiveMQ方案"></a><strong>2、2 ActiveMQ方案</strong></h5><table><thead><tr><th style="text-align:left">主机IP</th><th style="text-align:center">集群通信端口</th><th style="text-align:center">消息端口</th><th style="text-align:center">控制台端口</th><th style="text-align:center">节点目录/opt/下</th></tr></thead><tbody><tr><td style="text-align:left">192.168.0.107</td><td style="text-align:center">62621</td><td style="text-align:center">51511</td><td style="text-align:center">8161</td><td style="text-align:center">activemq-cluster/node1/</td></tr><tr><td style="text-align:left">192.168.0.107</td><td style="text-align:center">62621</td><td style="text-align:center">51512</td><td style="text-align:center">8162</td><td style="text-align:center">activemq-cluster/node1/</td></tr><tr><td style="text-align:left">192.168.0.107</td><td style="text-align:center">62621</td><td style="text-align:center">51513</td><td style="text-align:center">8163</td><td style="text-align:center">activemq-cluster/node1/</td></tr></tbody></table><p>ActiveMQ集群我部署在一台机器上而已，你感兴趣的话看完这篇文章，不妨你把ActiveMQ搭建到每一台机器上。</p><h5 id="2、3-Zookeeper集群搭建"><a href="#2、3-Zookeeper集群搭建" class="headerlink" title="2、3 Zookeeper集群搭建"></a><strong>2、3 Zookeeper集群搭建</strong></h5><p>将zookeeper-3.3.6.tar.gz上传到/opt目录下</p><p>下面三台机器都是使用同一个操作，如有不同我会另作说明</p><p>解压</p><pre><code>shell&gt;tar -zxvf zookeeper-3.3.6.tar.gz</code></pre><p>进入conf目录</p><pre><code>shell&gt;cd zookeeper-3.3.6/conf</code></pre><p>将zoo_sample.cfg文件名改为zoo.cfg</p><pre><code>shell&gt;mv zoo_sample.cfg zoo.cfg</code></pre><p>编辑zoo.cfg</p><pre><code>shell&gt;vim zoo.cfg</code></pre><p>修改dataDir路径</p><pre><code>dataDir=/opt/zookeeper-3.3.6/data</code></pre><p>加入内容</p><pre><code>server.0=192.168.0.109:2888:3888server.1=192.168.0.107:2888:3888server.2=192.168.0.108:2888:3888</code></pre><p><img src="http://img.blog.csdn.net/20171223153704984?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="我也不懂为什么上传后的图片变模糊了，估计是csdn....."></p><p>这里几个参数我说明一下：</p><pre><code>tickTime: zookeeper中使用的基本时间单位, 毫秒值.dataDir: 数据目录. 可以是任意目录.dataLogDir: log目录, 同样可以是任意目录. 如果没有设置该参数, 将使用和dataDir相同的设置.（这里我不配置）clientPort: 监听client连接的端口号.</code></pre><p>还需修改最后一个文件zookeeper集群就算搭建完成了</p><p>进入data目录</p><pre><code>shell&gt;cd zookeeper-3.3.6/data</code></pre><p>编辑myid每台机器只需要加入你在zoo.cfg中加入的server配置对应得数字即可。</p><pre><code>shell&gt;vim myid</code></pre><p>192.168.0.109内容如下</p><pre><code>0</code></pre><p>192.168.0.108内容如下</p><pre><code>1</code></pre><p>192.168.0.107内容如下</p><pre><code>2</code></pre><p>好到这就算配置完成了启动zookeeper试一下，是否成功：</p><p>启动服务端：<br><img src="http://img.blog.csdn.net/20171223155724897?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>启动客户端：</p><p><img src="http://img.blog.csdn.net/20171223160217180?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>好zookeeper集群的搭建到这就完成了。</p><h5 id="2、4-ActiveMQ集群搭建"><a href="#2、4-ActiveMQ集群搭建" class="headerlink" title="2、4 ActiveMQ集群搭建"></a><strong>2、4 ActiveMQ集群搭建</strong></h5><p>将apache-activemq-5.11.1bin.tar.gz上传到/opt目录下</p><p>在192.168.0.107节点下，创建/opt/activemqcluster文件夹，解压apache-activemq-5.11.1bin.tar.gz文件，然后对解压好的文件改名，操作如下： </p><pre><code>shell&gt;mkdir /opt/activemq-cluster shell&gt;cd opt/ shell&gt;tar -zxvf apache-activemq-5.11.1-bin.tar.gz -C /opt/activemq-cluster/ shell&gt;cd /opt/activemq-cluster/ shell&gt;mv apache-activemq-5.11.1/ node1</code></pre><p>如此操作，再次反复解压apache-activemq-5.11.1bin.tar.gz文件到/opt/activemq-cluster/下，建立node2和node3文件夹，如下:</p><p>那我们现在已经解压好了三个ActiveMQ节点也就是node1、node2、node3，下面 我们要做的事情就是更改每个节点不同的配置和端口（由于是在一台机器上实现集群）</p><p><strong>1 修改控制台端口（默认为8161)</strong></p><p>在mq安装路径下的conf/jetty.xml进行修改即可。（三个节点都要修改，并且端口都不同） </p><pre><code>shell&gt;cd /opt/activemq-cluster/node1/conf/ shell&gt;vim jetty.xml</code></pre><p><img src="http://img.blog.csdn.net/20171223162200901?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>三个节点都需要修改为8161、8162、8163！！！</p><p><strong>2 集群配置文件修改</strong></p><p>我们在mq安装路径下的conf/activemq.xml进行修改其中的持久化适配器，修改其中的bind、zkAddress、hostname、zkPath。 然后也需要修改mq的brokerName，并且每个节点名称都必须相同。 </p><p>命令：vim /opt/activemq-cluster/node1/conf/activemq.xml </p><p>第一处修改：brokerName=”activemq-cluster”（三个节点都需要修改）<br><img src="http://img.blog.csdn.net/20171223162315705?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>第二处修改：先注释掉适配器（persistenceAdapter标签）中的kahadb,添加新的leveldb配置如下（三个节点都需要修改）,内容如下：<br>Node1: </p><pre><code>&lt;persistenceAdapter&gt;         &lt;!--kahaDB directory=&quot;${activemq.data}/kahadb&quot;/ --&gt;         &lt;replicatedLevelDB                directory=&quot;${activemq.data}/leveldb&quot;                replicas=&quot;3&quot;                 bind=&quot;tcp://0.0.0.0:62621&quot;                zkAddress=&quot;192.168.0.107:2181,192.168.0.108:2181,192.168.0.109:2181&quot;                hostname=&quot;hfbin107&quot;                zkPath=&quot;/activemq/leveldb-stores&quot;/&gt;&lt;/persistenceAdapter&gt;</code></pre><p>Node2: </p><pre><code>&lt;persistenceAdapter&gt;         &lt;!--kahaDB directory=&quot;${activemq.data}/kahadb&quot;/ --&gt;         &lt;replicatedLevelDB                directory=&quot;${activemq.data}/leveldb&quot;                replicas=&quot;3&quot;                 bind=&quot;tcp://0.0.0.0:62622&quot;                zkAddress=&quot;192.168.0.107:2181,192.168.0.108:2181,192.168.0.109:2181&quot;                hostname=&quot;hfbin107&quot;                zkPath=&quot;/activemq/leveldb-stores&quot;/&gt;&lt;/persistenceAdapter&gt;</code></pre><p>Node3:</p><pre><code>&lt;persistenceAdapter&gt;         &lt;!--kahaDB directory=&quot;${activemq.data}/kahadb&quot;/ --&gt;         &lt;replicatedLevelDB                 directory=&quot;${activemq.data}/leveldb&quot;                 replicas=&quot;3&quot;                 bind=&quot;tcp://0.0.0.0:62623&quot;                 zkAddress=&quot;192.168.0.107:2181,192.168.0.108:2181,192.168.0.109:2181&quot;                 hostname=&quot;hfbin107&quot;                 zkPath=&quot;/activemq/leveldb-stores&quot;/&gt;&lt;/persistenceAdapter&gt;</code></pre><p><img src="http://img.blog.csdn.net/20171223162503915?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="node1图片"></p><p><strong>第四处修改</strong></p><p>修改通信的端口，避免冲突,大概在120行：</p><pre><code>shell&gt;vim /opt/activemq-cluster/node1/conf/activemq.xml </code></pre><p><img src="http://img.blog.csdn.net/20171223163211246?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>修改这个文件的通信端口号，三个节点都需要修改（51511,51512,51513）</p><p>Ok，到此为止，我们的activemq集群环境已经搭建完毕！</p><h4 id="3-测试启动activemq集群"><a href="#3-测试启动activemq集群" class="headerlink" title="3 测试启动activemq集群"></a><strong>3 测试启动activemq集群</strong></h4><p>第一步：启动zookeeper集群，命令：zkServer.sh start </p><p>第二步：启动mq集群：顺序启动mq:</p><pre><code>shell&gt;/opt/activemq-cluster/node1/bin/activemq start（关闭stop） shell&gt;/opt/activemq-cluster/node2/bin/activemq start（关闭stop） shell&gt;/opt/activemq-cluster/node3/bin/activemq start（关闭stop） </code></pre><p><img src="http://img.blog.csdn.net/20171223163806772?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>第三步：查看日志信息： </p><pre><code>shell&gt;tail -f /opt/activemq-cluster/node1/data/activemq.log shell&gt;tail -f /opt/activemq-cluster/node2/data/activemq.log shell&gt;tail -f /opt/activemq-cluster/node3/data/activemq.log </code></pre><p>如果不报错，我们的集群启动成功，可以使用控制台查看！</p><p>这里有个小案例你可以试一下，运行结果需要你自己去动手了我这里截一两张图说明补了什么。具体操作我可以说一下你可以按照我说操作来看看结果如何。</p><p>生产端代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//第一步：建立ConnectionFactory工厂对象，需要填入用户名、密码、以及要连接的地址，均使用默认即可，默认端口为"tcp://localhost:61616"</span></div><div class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(</div><div class="line">ActiveMQConnectionFactory.DEFAULT_USER, </div><div class="line">ActiveMQConnectionFactory.DEFAULT_PASSWORD, </div><div class="line"><span class="string">"failover:(tcp://192.168.0.107:51511,tcp://192.168.0.108:51512,tcp://192.168.0.109:51513)?Randomize=false"</span>);</div><div class="line"></div><div class="line"><span class="comment">//第二步：通过ConnectionFactory工厂对象我们创建一个Connection连接，并且调用Connection的start方法开启连接，Connection默认是关闭的。</span></div><div class="line">Connection connection = connectionFactory.createConnection();</div><div class="line">connection.start();</div><div class="line"></div><div class="line"><span class="comment">//第三步：通过Connection对象创建Session会话（上下文环境对象），用于接收消息，参数配置1为是否启用是事务，参数配置2为签收模式，一般我们设置自动签收。</span></div><div class="line">Session session = connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);</div><div class="line"></div><div class="line"><span class="comment">//第四步：通过Session创建Destination对象，指的是一个客户端用来指定生产消息目标和消费消息来源的对象，在PTP模式中，Destination被称作Queue即队列；在Pub/Sub模式，Destination被称作Topic即主题。在程序中可以使用多个Queue和Topic。</span></div><div class="line">Destination destination = session.createQueue(<span class="string">"first"</span>);</div><div class="line"></div><div class="line"><span class="comment">//第五步：我们需要通过Session对象创建消息的发送和接收对象（生产者和消费者）MessageProducer/MessageConsumer。</span></div><div class="line">MessageProducer producer = session.createProducer(<span class="keyword">null</span>);</div><div class="line"></div><div class="line"><span class="comment">//第六步：我们可以使用MessageProducer的setDeliveryMode方法为其设置持久化特性和非持久化特性（DeliveryMode），我们稍后详细介绍。</span></div><div class="line"><span class="comment">//producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</span></div><div class="line"></div><div class="line"><span class="comment">//第七步：最后我们使用JMS规范的TextMessage形式创建数据（通过Session对象），并用MessageProducer的send方法发送数据。同理客户端使用receive方法进行接收数据。最后不要忘记关闭Connection连接。</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">500000</span> ; i ++)&#123;</div><div class="line">TextMessage msg = session.createTextMessage(<span class="string">"我是消息内容"</span> + i);</div><div class="line"><span class="comment">// 第一个参数目标地址</span></div><div class="line"><span class="comment">// 第二个参数 具体的数据信息</span></div><div class="line"><span class="comment">// 第三个参数 传送数据的模式</span></div><div class="line"><span class="comment">// 第四个参数 优先级</span></div><div class="line"><span class="comment">// 第五个参数 消息的过期时间</span></div><div class="line">producer.send(destination, msg, DeliveryMode.NON_PERSISTENT, <span class="number">0</span> , <span class="number">1000L</span>);</div><div class="line">System.out.println(<span class="string">"发送消息："</span> + msg.getText());</div><div class="line">Thread.sleep(<span class="number">1000</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</div><div class="line">connection.close();</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>消费端：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//第一步：建立ConnectionFactory工厂对象，需要填入用户名、密码、以及要连接的地址，均使用默认即可，默认端口为"tcp://localhost:61616"</span></div><div class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(</div><div class="line">ActiveMQConnectionFactory.DEFAULT_USER, </div><div class="line">ActiveMQConnectionFactory.DEFAULT_PASSWORD, </div><div class="line"><span class="string">"failover:(tcp://192.168.0.107:51511,tcp://192.168.0.108:51512,tcp://192.168.0.109:51513)?Randomize=false"</span>);</div><div class="line"></div><div class="line"><span class="comment">//第二步：通过ConnectionFactory工厂对象我们创建一个Connection连接，并且调用Connection的start方法开启连接，Connection默认是关闭的。</span></div><div class="line">Connection connection = connectionFactory.createConnection();</div><div class="line">connection.start();</div><div class="line"></div><div class="line"><span class="comment">//第三步：通过Connection对象创建Session会话（上下文环境对象），用于接收消息，参数配置1为是否启用是事务，参数配置2为签收模式，一般我们设置自动签收。</span></div><div class="line">Session session = connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);</div><div class="line"></div><div class="line"><span class="comment">//第四步：通过Session创建Destination对象，指的是一个客户端用来指定生产消息目标和消费消息来源的对象，在PTP模式中，Destination被称作Queue即队列；在Pub/Sub模式，Destination被称作Topic即主题。在程序中可以使用多个Queue和Topic。</span></div><div class="line">Destination destination = session.createQueue(<span class="string">"first"</span>);</div><div class="line"><span class="comment">//第五步：通过Session创建MessageConsumer</span></div><div class="line">MessageConsumer consumer = session.createConsumer(destination);</div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">TextMessage msg = (TextMessage)consumer.receive();</div><div class="line"><span class="keyword">if</span>(msg == <span class="keyword">null</span>) <span class="keyword">break</span>;</div><div class="line">System.out.println(<span class="string">"收到的内容："</span> + msg.getText());</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对代码不了解的可以去看我以前的文章。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里你先启动消费端代码，让消费端一直在等，然后再启动生产端（生产端生产五十万条数字），生产到上百条时候我模拟Node1（Master）挂掉了然后看看Node2（Slave）或Node3（Slave）有没有一个节点成为Master，这个只是我说的之一更多模拟可以自己搞。</p><p>说明：如何知道Node1是Master，就看你创建ConnectionFactory工厂对象的连接地址第一个地址默认为Master，你要是想确认是不是这里需要辅助的一些工具了。在这我就不做说明了，要是人想了解可以给我留言。</p><p>转发者必须注明转发链接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1 前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;1 前言&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;使用ZooKeep
      
    
    </summary>
    
      <category term="Zookeeper+ActiveMQ" scheme="http://yoursite.com/categories/Zookeeper-ActiveMQ/"/>
    
    
      <category term="Zookeeper" scheme="http://yoursite.com/tags/Zookeeper/"/>
    
      <category term="ActiveMQ" scheme="http://yoursite.com/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件之ActiveMQ整合Spring实现邮箱发送（四）</title>
    <link href="http://yoursite.com/2017/12/01/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B9%8BActiveMQ%E6%95%B4%E5%90%88Spring%E5%AE%9E%E7%8E%B0%E9%82%AE%E7%AE%B1%E5%8F%91%E9%80%81%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2017/12/01/消息中间件之ActiveMQ整合Spring实现邮箱发送（四）/</id>
    <published>2017-11-30T17:19:55.000Z</published>
    <updated>2018-01-06T06:18:56.893Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面几篇文章介绍了ActiveMQ的使用，今天来点实际的使用ActiveMQ整合Spring实现异步邮箱发送。在讲之前先提两个问题，第一个问题ActiveMQ是如何与Spring整合的？第二个问题又是这样实现异步发送电子邮件的？好！带着这两个问题来看下面代码。</p><p>实现模型图：<br><img src="http://img.blog.csdn.net/20171203023404190?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>工程目录：</p><p><img src="http://img.blog.csdn.net/20171203023851076?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;分为两个项目一个为生产端（ActiveMQ-Provider）、一个为消费端（ActiveMQ-Consumer）。数据格式采用json，使用alibaba的fastjson来做格式转换。通过Spring提供的组件来实现邮箱发送。好废话不多说，上代码。</p><h4 id="使用maven创建项目"><a href="#使用maven创建项目" class="headerlink" title="使用maven创建项目"></a><strong>使用maven创建项目</strong></h4><p>我是使用idea开发工具来进行开发的，如何创建maven 我就不多介绍了。</p><p>创建好项目之后在你<code>两</code>个项目中的pom.xml文件中加入依赖，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--activemq--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-pool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--spring jms--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 返回json字符串的支持 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!--Spring-test --&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Spring面向切面编程 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- （jstl，servlet-api，junit） --&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/jstl/jstl --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- alibaba fastjson--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- junit --&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="生产端（ActiveMQ-Provider）"><a href="#生产端（ActiveMQ-Provider）" class="headerlink" title="生产端（ActiveMQ-Provider）"></a><strong>生产端（ActiveMQ-Provider）</strong></h4><p>因为涉及到Spring，个人习惯我先从Spring配置文件入手。</p><p>先准备一些参数文件，创建一个config.properties，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># ActiveMQ Config</div><div class="line">activemq.brokerURL=tcp\://192.168.0.106\:61616</div><div class="line">activemq.userName=hfbin</div><div class="line">activemq.password=hfbin</div><div class="line">activemq.pool.maxConnections=10</div><div class="line"></div><div class="line">#queueName</div><div class="line">activemq.queueName=mailqueue</div></pre></td></tr></table></figure><p>这里主要是配置ActiveMQ的一些配置参数路径、用户名、密码、线程池数量、队列名。</p><p>打印日记用的log4j.properties配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">log4j.rootLogger=INFO, console, file</div><div class="line"></div><div class="line">log4j.appender.console=org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.console.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.console.layout.ConversionPattern=%d %p [%c] - %m%n</div><div class="line"></div><div class="line">log4j.appender.file=org.apache.log4j.DailyRollingFileAppender</div><div class="line">#log4j.appender.file.File=D:/acmq.log</div><div class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.file.layout.ConversionPattern=%d %p [%c] - %m%n</div><div class="line"></div><div class="line">log4j.logger.org.springframework=WARN</div></pre></td></tr></table></figure><p>spring-context.xml配置文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></div><div class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></div><div class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans  </span></span></div><div class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  </span></span></div><div class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/aop   </span></span></div><div class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  </span></span></div><div class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/tx  </span></span></div><div class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd  </span></span></div><div class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context  </span></span></div><div class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context/spring-context-3.2.xsd"</span></span></div><div class="line"><span class="tag"><span class="attr">default-autowire</span>=<span class="string">"byName"</span> <span class="attr">default-lazy-init</span>=<span class="string">"false"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 读入配置属性文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:config.properties"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 注释配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 自动扫描包起始位置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.hfbin"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 加入spring与ActiveMQ整合配置文件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-activemq.xml"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure><p>每一行代码我都做有注释，我在这不做过多的说明。</p><p>下面介绍的才是今天主题的重点就是如何实现Spring与ActiveMQ整合。</p><p>spring-activemq.xml配置文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></div><div class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></div><div class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans  </span></span></div><div class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  </span></span></div><div class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/aop   </span></span></div><div class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  </span></span></div><div class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/tx  </span></span></div><div class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd  </span></span></div><div class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context  </span></span></div><div class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context/spring-context-3.2.xsd"</span></span></div><div class="line"><span class="tag"><span class="attr">default-autowire</span>=<span class="string">"byName"</span> <span class="attr">default-lazy-init</span>=<span class="string">"false"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 第三方MQ工厂: ConnectionFactory --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- ActiveMQ Address --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.brokerURL&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.userName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">    ActiveMQ为我们提供了一个PooledConnectionFactory，通过往里面注入一个ActiveMQConnectionFactory</span></div><div class="line"><span class="comment">    可以用来将Connection、Session和MessageProducer池化，这样可以大大的减少我们的资源消耗,要依赖于 activemq-pool包</span></div><div class="line"><span class="comment">     --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pooledConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.pool.PooledConnectionFactory"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxConnections"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.pool.maxConnections&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"pooledConnectionFactory"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 队列模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span>  </div><div class="line">    <span class="comment">&lt;!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 --&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultDestinationName"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.queueName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每一行代码我都做有注释，在这我就简单说明一下，在spring-context.xml文件中我们已经导入过config.properties，在这个文件里我们就不用重复的去导入了。这些都是固定的写法，没有什么技巧，记得哪一步到哪一步就好。好这就是Spring与ActiveMQ整合。所有的关于spring配置的文件都讲完了，下面就进行实现生产数据的代码。</p><p>首先先创建一个实体类Mail：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mail</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/** 发件人 **/</span></div><div class="line"><span class="keyword">private</span> String from;</div><div class="line"><span class="comment">/** 收件人 **/</span></div><div class="line"><span class="keyword">private</span> String to;</div><div class="line"><span class="comment">/** 主题 **/</span></div><div class="line"><span class="keyword">private</span> String subject;</div><div class="line"><span class="comment">/** 邮件内容 **/</span></div><div class="line"><span class="keyword">private</span> String content;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Mail</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Mail</span><span class="params">(String from, String to, String subject, String content)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line"><span class="keyword">this</span>.from = from;</div><div class="line"><span class="keyword">this</span>.to = to;</div><div class="line"><span class="keyword">this</span>.subject = subject;</div><div class="line"><span class="keyword">this</span>.content = content;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFrom</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> from;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFrom</span><span class="params">(String from)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.from = from;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTo</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> to;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTo</span><span class="params">(String to)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.to = to;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSubject</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> subject;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubject</span><span class="params">(String subject)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.subject = subject;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> content;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.content = content;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>实现生产数据的代码如下 MQProducer：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Service</span>()</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQProducer</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> JmsTemplate jmsTemplate;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(<span class="keyword">final</span> Mail mail)</span> </span>&#123;</div><div class="line">jmsTemplate.send(<span class="keyword">new</span> MessageCreator() &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line"><span class="keyword">return</span> session.createTextMessage(JSONObject.toJSONString(mail));</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里的代码非常简单，整合spring后什么数据都在配置文件创建好了，与之前直接写ActiveMQ实现数据生产的方法差别就是天地之大。这里只需要注入jmsTemplate，使用send方法即可实现数据发送。注意这里使用fastjson将实体类数据转换成json字符串了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;既然实现生产数据的也写好了那就差一个测试类了，项目是maven创建的，使用idea创建maven项目是没有test测试的文件，在这我就自己创建了，新建一个类TestProducer，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:spring-context.xml"</span> &#125;)</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProducer</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> MQProducer mqProducer;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</div><div class="line">Mail mail = <span class="keyword">new</span> Mail();</div><div class="line">mail.setTo(<span class="string">"1716850375@qq.com"</span>);</div><div class="line">mail.setSubject(<span class="string">"异步发送邮件"</span>);</div><div class="line">mail.setContent(<span class="string">"Hello,This is a message!"</span>);</div><div class="line"></div><div class="line"><span class="keyword">this</span>.mqProducer.sendMessage(mail);</div><div class="line">System.out.println(<span class="string">"发送成功  &gt;&gt;&gt;  "</span>+ mail.getTo());</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里使用到了spring的测试工具<br>@ContextConfiguration(locations = {“classpath:spring-context.xml” }) 加载spring文件路径</p><p>@RunWith(SpringJUnit4ClassRunner.class) 使用spring提供的测试工具。</p><p>这里需要注入我们刚刚写好的生产数据的类，然后传入Mail数据调用sendMessage（）方法既可以实现生产数据。</p><p>我运行这个测试方法：</p><p>到浏览器查看我的ActiveMQ Web端，如图：</p><p><img src="http://img.blog.csdn.net/20171203023504840?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>从图可看出我们已经成功生产一条数据了。</p><p>到这生产端代码编写完成！！！</p><h4 id="消费端及其实现发邮箱（ActiveMQ-Consumer）"><a href="#消费端及其实现发邮箱（ActiveMQ-Consumer）" class="headerlink" title="消费端及其实现发邮箱（ActiveMQ-Consumer）"></a><strong>消费端及其实现发邮箱（ActiveMQ-Consumer）</strong></h4><p>这里spring配置很多都跟消费端的一样，我就直接复制了（config.properties、log4j.properties、spring-activemq.xml、spring-context.xml），好下面我只对更改部分做说明：</p><p>config.properties原先只是配置了ActiveMQ的相关信息，现在要加多一下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">## SMTP Configuration  我这里使用的是qq</div><div class="line">#主机</div><div class="line">mail.host=smtp.qq.com</div><div class="line">##mail.port=21</div><div class="line">#你发送的邮箱</div><div class="line">mail.username=1340287013@qq.com </div><div class="line">#你邮箱的密码</div><div class="line">mail.password=******</div><div class="line">#是否开启认证</div><div class="line">mail.smtp.auth=true</div><div class="line">#超时</div><div class="line">mail.smtp.timeout=30000</div><div class="line">#你发送的邮箱</div><div class="line">mail.default.from=1340287013@qq.com</div></pre></td></tr></table></figure></p><p>这里的数据主要是为了后面我们实现发送邮箱用的。</p><p>log4j.properties这个不变。</p><p>spring-context.xml这里加多如下内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- proxy-target-class默认"false",更改为"ture"使用CGLib动态代理 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--引入发送邮箱的配置--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:spring-mail.xml"</span> /&gt;</span></div></pre></td></tr></table></figure></p><p>这里spring-mail.xml我后面会说。</p><p>spring-activemq.xml在后面加入下面内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!--这个是目的地:mailQueue --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mailQueue"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;activemq.queueName&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 配置自定义监听：MessageListener --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mailQueueMessageListener"</span> <span class="attr">class</span>=<span class="string">"cn.hfbin.mq.MailQueueMessageListener"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 将连接工厂、目标对了、自定义监听注入jms模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionAwareListenerContainer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"mailQueue"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"mailQueueMessageListener"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这些都是一些固定的配置，注意这里我设置了自定义的监听类MailQueueMessageListener，只要我们spring启动这个类就会被执行。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好！到这复制的文件就改动到这，下面来看一下实现发邮箱的spring配置即spring-mail.xml，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></div><div class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></div><div class="line"><span class="tag"><span class="attr">xmlns:cache</span>=<span class="string">"http://www.springframework.org/schema/cache"</span></span></div><div class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></div><div class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></div><div class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd"</span>&gt;</span></div><div class="line">       </div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Spring提供的发送电子邮件的高级抽象类 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mailSender"</span> <span class="attr">class</span>=<span class="string">"org.springframework.mail.javamail.JavaMailSenderImpl"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.host&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.username&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;mail.password&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaMailProperties"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"mail.smtp.auth"</span>&gt;</span>$&#123;mail.smtp.auth&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"mail.smtp.timeout"</span>&gt;</span>$&#123;mail.smtp.timeout&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleMailMessage"</span> <span class="attr">class</span>=<span class="string">"org.springframework.mail.SimpleMailMessage"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"from"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;mail.default.from&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置线程池 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"threadPool"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 线程池维护线程的最少数量 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"corePoolSize"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 线程池维护线程所允许的空闲时间 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keepAliveSeconds"</span> <span class="attr">value</span>=<span class="string">"30000"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 线程池维护线程的最大数量 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"50"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 线程池所使用的缓冲队列 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queueCapacity"</span> <span class="attr">value</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spring提供了一个高级类JavaMailSenderImpl，这里只需要配置一些参数值就好。还有spring也提供了线程池，不需要我们另外创建，这里直接加入就好，到时候使用直接注入使用即可。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到这spring所以有配置文件已经完成，下面来干点实际的如何消费我们生产端的数据，然后实现邮箱发送。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实体类Mail还是一样直接复制生产端Mail就好了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;刚刚在上面文件提到了，自己创建一个监听类MailQueueMessageListener这里要实现SessionAwareMessageListener<message>接口里面的onMessage()方法，该方法相当于获取生产端队列中的数据，代码如下：</message></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailQueueMessageListener</span> <span class="keyword">implements</span> <span class="title">SessionAwareMessageListener</span>&lt;<span class="title">Message</span>&gt; </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> JmsTemplate jmsTemplate;</div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> Destination mailQueue;</div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> MailService mailService;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Session session)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">TextMessage msg = (TextMessage) message;</div><div class="line"><span class="keyword">final</span> String ms = msg.getText();</div><div class="line"></div><div class="line"><span class="comment">//转换成相应的对象</span></div><div class="line">Mail mail = JSONObject.parseObject(ms, Mail.class);</div><div class="line">System.out.println(<span class="string">"收到消息："</span> + mail);</div><div class="line"><span class="keyword">if</span> (mail == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//执行发送业务</span></div><div class="line">mailService.mailSend(mail);</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="comment">// 发送异常，重新放回队列</span></div><div class="line">jmsTemplate.send(mailQueue, <span class="keyword">new</span> MessageCreator() &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line"><span class="keyword">return</span> session.createTextMessage(ms);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里通过fastjson将json数据格式转换为实体类Mail，也注入MailService实现发邮箱业务逻辑的类，如果出现异常这里也将会将数据重新放回队列。</p><p>下面说说是如何实现发邮箱的MailService类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>()</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailService</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> JavaMailSender mailSender;</div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> SimpleMailMessage simpleMailMessage;</div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> ThreadPoolTaskExecutor threadPool;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> mail</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mailSend</span><span class="params">(<span class="keyword">final</span> Mail mail)</span> </span>&#123;</div><div class="line">threadPool.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">//发送人</span></div><div class="line">simpleMailMessage.setFrom(simpleMailMessage.getFrom());</div><div class="line"><span class="comment">//收件者</span></div><div class="line">simpleMailMessage.setTo(mail.getTo()); </div><div class="line"></div><div class="line">simpleMailMessage.setSubject(mail.getSubject());</div><div class="line"><span class="comment">//发送的信息</span></div><div class="line">simpleMailMessage.setText(mail.getContent());</div><div class="line">mailSender.send(simpleMailMessage);</div><div class="line">&#125; <span class="keyword">catch</span> (MailException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line"><span class="keyword">throw</span> e;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里使用到了线程池来执行，在spring里我们已经做了配置，在这里只需要注入即可使用。通过SimpleMailMessage来设置发送邮箱的参数，使用JavaMailSender的send()方法实现发送。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到这目前都讲完了是不是觉得很简单，大多数都是固定的写法。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好！到这讲完了现在写一个，启动spring的类，在这我不使用跟生产端的那种方式了，因为这里我配置了监听类只要启动spring，整个程序就会跑起来了，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="keyword">new</span> String[] &#123; <span class="string">"spring-context.xml"</span> &#125;);</div><div class="line">context.start();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用ClassPathXmlApplicationContext加载spring-context.xml文件，然后调用start()方法进行启动。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这时候测试程序就需要你自己测试了，注意测试前一定要开启你的邮箱（我这使用QQ邮箱）的这两个功能（发送者的QQ号必须开启），否则会出现异常认证失败。</p><p><img src="http://img.blog.csdn.net/20171204005911322?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>转发者必须注明转发链接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前面几篇文章介绍了ActiveMQ
      
    
    </summary>
    
      <category term="消息中间件" scheme="http://yoursite.com/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="ActiveMQ" scheme="http://yoursite.com/tags/ActiveMQ/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="消息中间件" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件之ActiveMQ PTP和PUB/SUB模式实例（三）</title>
    <link href="http://yoursite.com/2017/11/29/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B9%8BActiveMQ%20PTP%E5%92%8CPUB-SUB%E6%A8%A1%E5%BC%8F%E5%AE%9E%E4%BE%8B%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/29/消息中间件之ActiveMQ PTP和PUB-SUB模式实例（三）/</id>
    <published>2017-11-29T15:32:17.000Z</published>
    <updated>2018-01-06T06:10:53.810Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a><strong>1 前言</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在JMS那篇文章中我有提过消息通信模式，主要的模式有两种点对点（Point-to-Point）、发布-订阅（Publish/Subscribe），在那篇文章中我只是描述了一些理论性的东西，并没有实际的案例，这篇文章我将用案例来讨论这两个模式。</p><h4 id="2-点对点-P2P"><a href="#2-点对点-P2P" class="headerlink" title="2 点对点(P2P)"></a><strong>2 点对点(P2P)</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p2p的过程则理解起来比较简单。它好比是两个人打电话，这两个人是独享这一条通信链路的。一方发送消息，另外一方接收，就这么简单。它的通信场景如下图所示：</p><p><img src="http://img.blog.csdn.net/20171130111124171?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h5 id="2-1-案例"><a href="#2-1-案例" class="headerlink" title="2.1 案例"></a><strong>2.1 案例</strong></h5><p>生产端<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publisher</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ActiveMQConnectionFactory factory;</div><div class="line">    <span class="keyword">private</span> Connection connection;</div><div class="line">    <span class="keyword">private</span> Session session;</div><div class="line">    <span class="keyword">private</span> MessageProducer producer;</div><div class="line">    <span class="keyword">private</span> Destination destination;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Publisher</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">       </div><div class="line">        <span class="comment">//建立ConnectionFactory工厂对象，需要填入用户名、密码、以及要连接的地址，均使用默认即可，默认端囗为“tcp://localhost:61616”</span></div><div class="line">        factory = <span class="keyword">new</span> ActiveMQConnectionFactory(</div><div class="line">                <span class="string">"hfbin"</span>,</div><div class="line">                <span class="string">"hfbin"</span>,</div><div class="line">                <span class="string">"tcp://localhost:61616"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//2通过ConnectionFactory工厂对象我们创建一个Connection连接，并且调用Connection的start方法开启连接，Connection默认是关闭的。</span></div><div class="line">        connection = factory.createConnection();</div><div class="line">        connection.start();</div><div class="line">       </div><div class="line">        <span class="comment">//3 过Connection对象创建Session会话（上下文环境对象），用于接收消息，参数配置1为是否启用是事务，参数配置2为签收模式，一般我们设置自动签收。</span></div><div class="line">        session = connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);</div><div class="line">       </div><div class="line">        <span class="comment">////4通过Session创建Destination对象,指的是一个客户端用来指定生产消息目标和消费消息来源的对象，在PTP模式中，Destination被称作Queue即队列：在Pub/Sub模式，Destination被称作Topic及主题。在程序中可以使用多个Queue和Topic。</span></div><div class="line">        destination = session.createQueue(<span class="string">"queue2"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//5我们需要通过Session对象创建消息的发送和接收对象生产者 MessageProducer。</span></div><div class="line">        producer = session.createProducer(destination);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//6 该方法实现数据发送</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</div><div class="line">        &#123;</div><div class="line">            TextMessage message = session.createTextMessage(<span class="string">"I Tell You &gt;&gt; "</span>+i);</div><div class="line">            System.out.println(<span class="string">"生产数据: "</span> + <span class="string">"I Tell You &gt;&gt; "</span>+i);</div><div class="line">            producer.send(destination, message);</div><div class="line">        &#125;</div><div class="line">        connection.close();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">        Publisher publisher = <span class="keyword">new</span> Publisher();</div><div class="line">        publisher.sendMessage();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里我使用了构造函数初始化所有的资源，在这我不做过多说明，这里代码我<a href="">上一篇文章</a>都有详细的说明。</p><p>消费端<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>  </span>&#123;</div><div class="line">    <span class="keyword">private</span> ActiveMQConnectionFactory factory;</div><div class="line">    <span class="keyword">private</span> Connection connection;</div><div class="line">    <span class="keyword">private</span> Session session;</div><div class="line">    <span class="keyword">private</span> MessageConsumer consumer;</div><div class="line">    <span class="keyword">private</span> Destination destination;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">        factory = <span class="keyword">new</span> ActiveMQConnectionFactory(</div><div class="line">                <span class="string">"hfbin"</span>,</div><div class="line">                <span class="string">"hfbin"</span>,</div><div class="line">                <span class="string">"tcp://localhost:61616"</span></div><div class="line">        );</div><div class="line">        connection = factory.createConnection();</div><div class="line">        connection.start();</div><div class="line">        session = connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);</div><div class="line">        destination = session.createQueue(<span class="string">"queue2"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//通过Session对象创建消息的发送和接收对象消费者 MessageConsumer。</span></div><div class="line">        consumer = session.createConsumer(destination);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取数据</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">        <span class="comment">//使用监听方式获取数据 ，在这我定义了内部类Listener需要实现MessageListener接口然后实现里面的方法。</span></div><div class="line">        consumer.setMessageListener(<span class="keyword">new</span> Listener());</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//内部类 实现了MessageListener接口，里面的onMessage方法就是在接收到消息之后会被调用的方法</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Listener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (message <span class="keyword">instanceof</span> TextMessage)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.out.println(((TextMessage) message).getText());</div><div class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">        Consumer consumer = <span class="keyword">new</span> Consumer();</div><div class="line">        consumer.getMessage();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接收和处理消息的方法有两种，分为同步和异步的，一般同步的方式我们是通过MessageConsumer.receive()方法来处理接收到的消息。而异步的方法则是通过注册一个MessageListener的方法，使用MessageConsumer.setMessageListener()。这里我采用异步的方式实现。</p><p>这里我就不给出结果了，需要的可以自己到我的GitHub上下载代码，自己测试。</p><p>源代码：<a href="https://github.com/hfbin/Thread_Socket/tree/master/ActiveMQ/PTP" target="_blank" rel="external">https://github.com/hfbin/Thread_Socket/tree/master/ActiveMQ/PTP</a></p><h4 id="3-发布-订阅-Pub-Sub"><a href="#3-发布-订阅-Pub-Sub" class="headerlink" title="3 发布/订阅(Pub/Sub)"></a><strong>3 发布/订阅(Pub/Sub)</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发布订阅模式有点类似于我们日常生活中订阅报纸。每年到年尾的时候，邮局就会发一本报纸集合让我们来选择订阅哪一个。在这个表里头列了所有出版发行的报纸，那么对于我们每一个订阅者来说，我们可以选择一份或者多份报纸。比如北京日报、潇湘晨报等。那么这些个我们订阅的报纸，就相当于发布订阅模式里的topic。有很多个人订阅报纸，也有人可能和我订阅了相同的报纸。那么，在这里，相当于我们在同一个topic里注册了。对于一份报纸发行方来说，它和所有的订阅者就构成了一个1对多的关系。这种关系如下图所示：</p><p><img src="http://img.blog.csdn.net/20171130111134191?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h5 id="3-1-案例"><a href="#3-1-案例" class="headerlink" title="3.1 案例"></a><strong>3.1 案例</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实这个案例跟PTP差不多就改一下创建类型而已，将<code>session.createQueue()</code>改成<code>session.createTopic()</code> 而已，然后多几个消费端的类。</p><p>生产端<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publisher</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ActiveMQConnectionFactory factory;</div><div class="line">    <span class="keyword">private</span> Connection connection;</div><div class="line">    <span class="keyword">private</span> Session session;</div><div class="line">    <span class="keyword">private</span> MessageProducer producer;</div><div class="line">    <span class="keyword">private</span> Destination destination;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Publisher</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">       </div><div class="line">        <span class="comment">//建立ConnectionFactory工厂对象，需要填入用户名、密码、以及要连接的地址，均使用默认即可，默认端囗为“tcp://localhost:61616”</span></div><div class="line">        factory = <span class="keyword">new</span> ActiveMQConnectionFactory(</div><div class="line">                <span class="string">"hfbin"</span>,</div><div class="line">                <span class="string">"hfbin"</span>,</div><div class="line">                <span class="string">"tcp://localhost:61616"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//2通过ConnectionFactory工厂对象我们创建一个Connection连接，并且调用Connection的start方法开启连接，Connection默认是关闭的。</span></div><div class="line">        connection = factory.createConnection();</div><div class="line">        connection.start();</div><div class="line">       </div><div class="line">        <span class="comment">//3 过Connection对象创建Session会话（上下文环境对象），用于接收消息，参数配置1为是否启用是事务，参数配置2为签收模式，一般我们设置自动签收。</span></div><div class="line">        session = connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);</div><div class="line">       </div><div class="line">        <span class="comment">////4通过Session创建Destination对象,指的是一个客户端用来指定生产消息目标和消费消息来源的对象，在PTP模式中，Destination被称作Queue即队列：在Pub/Sub模式，Destination被称作Topic及主题。在程序中可以使用多个Queue和Topic。</span></div><div class="line">        destination = session.createTopic(<span class="string">"Topic"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//5我们需要通过Session对象创建消息的发送和接收对象生产者 MessageProducer。</span></div><div class="line">        producer = session.createProducer(destination);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//6 该方法实现数据发送</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</div><div class="line">        &#123;</div><div class="line">            TextMessage message = session.createTextMessage(<span class="string">"I Tell You &gt;&gt; "</span>+i);</div><div class="line">            System.out.println(<span class="string">"生产数据: "</span> + <span class="string">"I Tell You &gt;&gt; "</span>+i);</div><div class="line">            producer.send(destination, message);</div><div class="line">        &#125;</div><div class="line">        connection.close();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">        Publisher publisher = <span class="keyword">new</span> Publisher();</div><div class="line">        publisher.sendMessage();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>每一个消费端的代码都是一模一样的。</p><p>消费端1<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span>  </span>&#123;</div><div class="line">    <span class="keyword">private</span> ActiveMQConnectionFactory factory;</div><div class="line">    <span class="keyword">private</span> Connection connection;</div><div class="line">    <span class="keyword">private</span> Session session;</div><div class="line">    <span class="keyword">private</span> MessageConsumer consumer;</div><div class="line">    <span class="keyword">private</span> Destination destination;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer1</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">        factory = <span class="keyword">new</span> ActiveMQConnectionFactory(</div><div class="line">                <span class="string">"hfbin"</span>,</div><div class="line">                <span class="string">"hfbin"</span>,</div><div class="line">                <span class="string">"tcp://localhost:61616"</span></div><div class="line">        );</div><div class="line">        connection = factory.createConnection();</div><div class="line">        connection.start();</div><div class="line">        session = connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);</div><div class="line">        destination = session.createTopic(<span class="string">"Topic"</span>);</div><div class="line">        consumer = session.createConsumer(destination);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">        consumer.setMessageListener(<span class="keyword">new</span> Listener());</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Listener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (message <span class="keyword">instanceof</span> TextMessage)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.out.println(((TextMessage) message).getText());</div><div class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">        Consumer1 consumer1 = <span class="keyword">new</span> Consumer1();</div><div class="line">        consumer1.getMessage();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>消费端2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span>  </span>&#123;</div><div class="line">    <span class="keyword">private</span> ActiveMQConnectionFactory factory;</div><div class="line">    <span class="keyword">private</span> Connection connection;</div><div class="line">    <span class="keyword">private</span> Session session;</div><div class="line">    <span class="keyword">private</span> MessageConsumer consumer;</div><div class="line">    <span class="keyword">private</span> Destination destination;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer2</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">        factory = <span class="keyword">new</span> ActiveMQConnectionFactory(</div><div class="line">                <span class="string">"hfbin"</span>,</div><div class="line">                <span class="string">"hfbin"</span>,</div><div class="line">                <span class="string">"tcp://localhost:61616"</span></div><div class="line">        );</div><div class="line">        connection = factory.createConnection();</div><div class="line">        connection.start();</div><div class="line">        session = connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);</div><div class="line">        destination = session.createTopic(<span class="string">"Topic"</span>);</div><div class="line">        consumer = session.createConsumer(destination);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">        consumer.setMessageListener(<span class="keyword">new</span> Listener());</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Listener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (message <span class="keyword">instanceof</span> TextMessage)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.out.println(((TextMessage) message).getText());</div><div class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">        Consumer2 Consumer2 = <span class="keyword">new</span> Consumer2();</div><div class="line">        Consumer2.getMessage();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里启动时候建议先启动消费端，然后再进行生产端的启动，等生产端运行完毕后我们查看消费端1、消费端2都打印了生产端发送的数据。</p><p>源代码：<a href="https://github.com/hfbin/Thread_Socket/tree/master/ActiveMQ/PubSub" target="_blank" rel="external">https://github.com/hfbin/Thread_Socket/tree/master/ActiveMQ/PubSub</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在如果我们比较一下pub-sub和p2p模式的具体实现步骤的话，我们会发现他们基本的处理流程都是类似的，除了在pub-sub中要通过createTopic来设置topic，而在p2p中要通过createQueue来创建通信队列。</p><p>转发者必须注明转发链接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1 前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;1 前言&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在JMS那篇文章中
      
    
    </summary>
    
      <category term="消息中间件" scheme="http://yoursite.com/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="ActiveMQ" scheme="http://yoursite.com/tags/ActiveMQ/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="消息中间件" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件之ActiveMQ初步认识及第一个程序（二）</title>
    <link href="http://yoursite.com/2017/11/29/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B9%8BActiveMQ%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86%E5%8F%8A%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/29/消息中间件之ActiveMQ初步认识及第一个程序（二）/</id>
    <published>2017-11-29T08:30:08.000Z</published>
    <updated>2018-01-06T06:10:54.036Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-ActiveMQ-简介"><a href="#1-ActiveMQ-简介" class="headerlink" title="1 ActiveMQ 简介"></a><strong>1 ActiveMQ 简介</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActiveMQ是Apache出品，最流行的，能力强劲的开源消息总线。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActiveMQ是一个完全支持JMS1.1和J2EE 1．4规范的JMS Provider现，尽管JMS规范出台己经是很久的事情了，但是JMS在当今的J2EE应用中间仍然扮演着特殊的地位，可以说ActiveMQ在业界应用最广泛，当然如果想要有更强大的性能和海量数据处理能力，ActiveMQ还需要不断的升级版本，80%以上的业务我们使用ActiveMQ以及足够满足需求，当然后续如天猫、淘宝网这种大型的电商网站，尤其是双11这种特殊时间，ActiveMQ需要进行很复杂的优化源码以及架构设计才能完成，后面我还会介绍更强大的分布式消息中间件，RocketMQ，可以说ActiveMQ是核心，是基础，所以我们必须要掌握好。</p><h4 id="1-ActiveMQ-Windows-安装说明"><a href="#1-ActiveMQ-Windows-安装说明" class="headerlink" title="1 ActiveMQ Windows 安装说明"></a><strong>1 ActiveMQ Windows 安装说明</strong></h4><p>由于这个是windows的安装这里我不做太多说明。</p><p>下载链接（目前是最新版）：<a href="http://activemq.apache.org/activemq-5152-release.html" target="_blank" rel="external">http://activemq.apache.org/activemq-5152-release.html</a></p><p>安装完后的目录：</p><p><img src="http://img.blog.csdn.net/20171129160837655?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这时我们启动ActiveMQ,进入bin目录一个32位的一个64位的，我的机子是64位的，打开64位的文件夹找的activemq.bat双击启动。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;默认的范围问路径是：<a href="http://localhost:8161" target="_blank" rel="external">http://localhost:8161</a> 注意这里端口是8161这个可以自己改，这时你在浏览器访问时，会弹出一个登陆的界面，默认用户名密码都是<code>admin</code>。</p><p>登陆进去如图：</p><p><img src="http://img.blog.csdn.net/20171129160858644?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h5 id="1-1-如何修改端口？"><a href="#1-1-如何修改端口？" class="headerlink" title="1.1 如何修改端口？"></a><strong>1.1 如何修改端口？</strong></h5><p>打开conf目录找到jetty.xml文件，打开文件，大概在110行左右。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jettyPort"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.web.WebConsolePort"</span> <span class="attr">init-method</span>=<span class="string">"start"</span>&gt;</span></div><div class="line">         <span class="comment">&lt;!-- the default port number for the web console --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"0.0.0.0"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--改成一个自己电脑不占用的端口（其实改不改都无所谓，自己知道有这回事就好）--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"8161"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><h5 id="1-2-如何修改用户名跟密码？"><a href="#1-2-如何修改用户名跟密码？" class="headerlink" title="1.2 如何修改用户名跟密码？"></a><strong>1.2 如何修改用户名跟密码？</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开conf目录找到jetty-realm.properties文件，打开文件，看到底部，改成自己用户名密码即可（其实改不改都无所谓，自己知道有这回事就好）。</p><p>记得如果你改了，一定要重新启动 ！！！</p><h4 id="2-ActiveMQ-Hello-World"><a href="#2-ActiveMQ-Hello-World" class="headerlink" title="2 ActiveMQ Hello World"></a><strong>2 ActiveMQ Hello World</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们首先写一个简单的HelloWorld示例，让大家感受下ActiveMQ ,我们的要实现接受者和发送者两部分代码的编写。</p><p>步骤如下(这个步骤都是固定的)：Sendert/Receivert</p><p>第一步：建立ConnectionFactory工厂对象，需要填入用户名、密码、以及要连接的地址，均使用默认即可，默认端囗为“tcp://localhost:61616” </p><p>第二步，通过ConnectionFactory工厂对象我们创建一个Connection连接，并且调用Connection的start方法开启连接，Connection默认是关闭的。</p><p>第三步，过Connection对象创建Session会话（上下文环境对象），用于接收消息，参数配置1为是否启用是事务，参数配置2为签收模式，一般我们设置自动签收。</p><p>第四步：通过Session创建Destination对象,指的是一个客户端用来指定生产消息目标和消费消息来源的对象，在PTP模式中，Destination被称作Queue即队列：在Pub/Sub模式，Destination被称作Topic及主题。在程序中可以使用多个Queue和Topic。</p><p>第五步：我们需要通过Session对象创建消息的发送和接收对象（生产者和消费者） MessageProducer/MessageConsumer。</p><p>第六步：我们可以使用MessageProducer的setDeIiveryMode方法为其设置持久化特性和非持久化特性（DeliveryMode），消费端这部分不用写，我们稍后详细介绍。</p><p>第七步：最后我们使用JMS范的TextMessage形式创建数据（通过Session对象），并用MessageProducer的send方法发送数据同理客户端使用receive方法进行接收数据。最后不要忘记关闭Connection连接</p><p>生产端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">//1 建立ConnectionFactory工厂对象，需要填入用户名、密码、以及要连接的地址，均使用默认即可，默认端囗为“tcp://localhost:61616”</span></div><div class="line">        <span class="comment">// 由于这里我们还没有设置 用户名 密码 这里使用默认，在下一节我会介绍这个用户名密码如何设置</span></div><div class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(</div><div class="line">                ActiveMQConnectionFactory.DEFAULT_USER,</div><div class="line">                ActiveMQConnectionFactory.DEFAULT_PASSWORD,</div><div class="line">                <span class="string">"tcp://localhost:61616"</span></div><div class="line">        );</div><div class="line">        </div><div class="line">        <span class="comment">//2通过ConnectionFactory工厂对象我们创建一个Connection连接，并且调用Connection的start方法开启连接，Connection默认是关闭的。</span></div><div class="line">        Connection connection = activeMQConnectionFactory.createConnection();</div><div class="line">        connection.start();</div><div class="line">        </div><div class="line">        <span class="comment">//3 过Connection对象创建Session会话（上下文环境对象），用于接收消息，参数配置1为是否启用是事务，参数配置2为签收模式，一般我们设置自动签收。</span></div><div class="line">        Session session = connection.createSession(Boolean.FALSE , Session.AUTO_ACKNOWLEDGE);</div><div class="line">        </div><div class="line">        <span class="comment">//4通过Session创建Destination对象,指的是一个客户端用来指定生产消息目标和消费消息来源的对象，在PTP模式中，Destination被称作Queue即队列：在Pub/Sub模式，Destination被称作Topic及主题。在程序中可以使用多个Queue和Topic。</span></div><div class="line">        Destination destination = (Destination) session.createQueue(<span class="string">"queue"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//5我们需要通过Session对象创建消息的发送和接收对象（生产者和消费者） MessageProducer/MessageConsumer。</span></div><div class="line">        MessageProducer producer = session.createProducer(destination);</div><div class="line">        </div><div class="line">        <span class="comment">//6我们可以使用MessageProducer的setDeIiveryMode方法为其设置持久化特性和非持久化特性（DeliveryMode），消费端这部分不用写，我们稍后详细介绍。</span></div><div class="line">        producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</div><div class="line">       </div><div class="line">        <span class="comment">//7最后我们使用JMS范的TextMessage形式创建数据（通过Session对象），并用MessageProducer的send方法发送数据同理客户端使用receive方法进行接收数据。</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            TextMessage textMessage = session.createTextMessage();</div><div class="line">            textMessage.setText(<span class="string">"I Tell You &gt;&gt;&gt; "</span>+i);</div><div class="line">            producer.send(textMessage);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//最后不要忘记关闭Connection连接</span></div><div class="line">        <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</div><div class="line">            connection.close();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>消费端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception</span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1</span></div><div class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(</div><div class="line">                ActiveMQConnectionFactory.DEFAULT_USER,</div><div class="line">                ActiveMQConnectionFactory.DEFAULT_PASSWORD,</div><div class="line">                <span class="string">"tcp://localhost:61616"</span></div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="comment">//2</span></div><div class="line">        Connection connection = activeMQConnectionFactory.createConnection();</div><div class="line">        connection.start();</div><div class="line"></div><div class="line">        <span class="comment">//3</span></div><div class="line">        Session session = connection.createSession(Boolean.FALSE , Session.AUTO_ACKNOWLEDGE);</div><div class="line"></div><div class="line">        <span class="comment">//4</span></div><div class="line">        Destination destination = (Destination) session.createQueue(<span class="string">"queue"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//5</span></div><div class="line">        MessageConsumer producer = session.createConsumer(destination);</div><div class="line">       </div><div class="line">        <span class="comment">//7</span></div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line"></div><div class="line">            TextMessage receive = (TextMessage) producer.receive();</div><div class="line">            <span class="keyword">if</span> (receive==<span class="keyword">null</span>) <span class="keyword">break</span>;</div><div class="line">            System.out.println(<span class="string">"收到的内容 &gt;&gt;&gt;  "</span> +receive.getText());</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</div><div class="line">            connection.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>启动生产端，在浏览器访问：<a href="http://localhost:8161/admin/queues.jsp" target="_blank" rel="external">http://localhost:8161/admin/queues.jsp</a> 查看我们的数据,如图：</p><p><img src="http://img.blog.csdn.net/20171129160949491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>好我们启动消费端，控制台打印如下：</p><p><img src="http://img.blog.csdn.net/20171129161007665?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>再次访问<a href="http://localhost:8161/admin/queues.jsp，如图（注意参数的变化）：" target="_blank" rel="external">http://localhost:8161/admin/queues.jsp，如图（注意参数的变化）：</a></p><p><img src="http://img.blog.csdn.net/20171129161020262?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="3-ActiveMQ-安全机制"><a href="#3-ActiveMQ-安全机制" class="headerlink" title="3 ActiveMQ 安全机制"></a><strong>3 ActiveMQ 安全机制</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在安装时候我已经教大家如何修改那个ActiveMQ的Web管理界面的密码了，在这不说了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这主要说的是ActiveMQ应该设置有安全机制，只有符合验证的用户才能进行发送和获取消息。其实刚刚在Hello Wolrd 第一步中我就给大家提示过用户名跟密码使用的是默认的，现在我教大家如何改成自己的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在conf目录下找到acivemq.xml,打开文件，在大概126行中加入(在broker结束标签上)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">simpleAuthenticationPlugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">users</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">authenticationUser</span> <span class="attr">username</span>=<span class="string">"hfbin"</span> <span class="attr">password</span>=<span class="string">"hfbin"</span> <span class="attr">groups</span>=<span class="string">"users,admins"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">users</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">simpleAuthenticationPlugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个时候你改了这里，那个生产/消费端中第一步就不能使用默认用户名和密码了，更改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory(</div><div class="line">        &quot;hfbin&quot;,</div><div class="line">        &quot;hfbin&quot;,</div><div class="line">        &quot;tcp://localhost:61616&quot;</div><div class="line">);</div></pre></td></tr></table></figure></p><h4 id="4-方法使用"><a href="#4-方法使用" class="headerlink" title="4 方法使用"></a><strong>4 方法使用</strong></h4><h5 id="4-1-Conection方法使用"><a href="#4-1-Conection方法使用" class="headerlink" title="4.1 Conection方法使用"></a><strong>4.1 Conection方法使用</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在成功创建正确的ConectionFactory后，下一步将是创建一个连接，它是JMS定义的一个接囗。ConectionFactory负责返回可以与底层消息传递系统进行通信的 Connectionn实现。通常客户端只使用单一连接。根据JMS文档，Connection的目的是“利用JMS提供者封装开放的连接”，以及表示“客户端与提供者服务例程之间的开放TCP/IP套接字”。该文档还指出Connection应该是进行客户端身份验证的地方等等。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当一一个Connection被创建时，它的传输默认是关闭的，必须使用start方法开启。一个Connection可以建立一个或多个的Session。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当一个程序执行完成后，必须关闭之前创建Connection，否则ActiveMQ不能释放资源，关闭一个Connection同样也关闭了Session，MessageProducer和 MessageConsumer。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">Connection <span class="title">createConnection</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function">Connection <span class="title">createConnection</span><span class="params">(String userName，String password)</span></span>;</div></pre></td></tr></table></figure><h5 id="4-2-Session方法使用"><a href="#4-2-Session方法使用" class="headerlink" title="4.2 Session方法使用"></a><strong>4.2 Session方法使用</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一旦从ConectionFactory中获得一个Connection，必须从Connection中创建一个或者多个Session。Session是一个发送或接收消息线程，可以使用Session创建 MessageProducer, MessageConsumer和Message。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Session可以被事务化，也可以不被事务化，通常， 可以通过向Connection上的适当创建方法传递一个布尔参数对此进行设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Session <span class="title">createsession</span><span class="params">(<span class="keyword">boolean</span> transacted ， <span class="keyword">int</span> acknowledgeMode)</span></span>;</div></pre></td></tr></table></figure><p>其中transacted为使用事务标识，acknowledgeMode为签收模式。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结束事务有两种方法：提交或者回滚。当一个事务提交，消息被处理。如果事务中有个步骤操作失败，事务就回滚，这个事务中已执行的动作将被撤销。在发送消息最后也必要使用session.commit()方法表示提交事务。如果你设置为false则不同提交事务，如果是true则使用session.commit()方法提交事务。</p><p>最后必须要使用签收模式有三种形式：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Session.AUTO_ACKNOWLEDGE 当客户端从receive或onMessage成功返回时。Session自动签收客户端的这条消息的收条。（建议使用自动签收模式）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Session.CLIENT_ACKNOWLEDGE客户端通过调用消息（Message）的ackonwledge方法签收消息。在这种情况下，签收发生在Session层面：签收一个已消费的消息会自动的签收这个Session所有已消费消息的收条。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Session.DUPS_OK_ACKNOWLEDGE此选项指示Session不必确保对传送消息的签收。它可能引起消息的重复，但降低了Session的开销，所以只有客户端能容忍重复的消息，才能使用。</p><h5 id="4-3-MessageProducer方法使用"><a href="#4-3-MessageProducer方法使用" class="headerlink" title="4.3 MessageProducer方法使用"></a><strong>4.3 MessageProducer方法使用</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageProducer：MessageProducer是一个由Session创建的对象，用来向Destination发送消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(Message message)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(Message message, <span class="keyword">int</span> deliveryMode, <span class="keyword">int</span> priority, <span class="keyword">long</span> timeToLive)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(Destination destination, Message message)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(Destination destination, Message message, <span class="keyword">int</span> deliveryMode, <span class="keyword">int</span> priority, <span class="keyword">long</span> timeToLive)</span></span>;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中deliveryMode为传输模式，priority为消息优先级，timeToLive为消息过期时间。ActiverMQ支持两种消息传送模式：PERSISTENT和PERSISTENT两种。如果不指定传输模式，那么默认的是持久性消息。如果容忍消息丢失，那么使用非持久性消息可以改善性能和减少存储的开销。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;消息优先级从0-9是个级别，0-4是普通消息，5-9是加急消息。如果不指定优先级，默认为4。需要注意的是，JMS并不一定保证按照优先级的顺序提交消息，建议使用事务，这样的准确性更高，我已经测试过，基本上按照优先级消费。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用优先级必须要在activemq.xml文件中添加如下配置（大概在44行，在policyEntries标签内加入）：<code>&lt;policyEntry queue=&quot;queue1&quot; prioritizedMessages=&quot;true&quot; /&gt;</code>这里queue要跟程序中<code>session.createQueue(&quot;queue1&quot;)</code>里面参数一致。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;默认情况下，消息永远不会过期，如果消息在指定周期内，则失去意义，那么可以设置过期时间，时间单位为毫秒。</p><h5 id="4-4-MessageComsumer方法使用"><a href="#4-4-MessageComsumer方法使用" class="headerlink" title="4.4 MessageComsumer方法使用"></a><strong>4.4 MessageComsumer方法使用</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageConsumer是由一个Session创建的对象，用来从Destination接收消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function">MessageProducer <span class="title">createProducer</span><span class="params">(Destination destination)</span></span>;</div><div class="line"></div><div class="line"><span class="function">MessageConsumer <span class="title">createConsumer</span><span class="params">(Destination destination)</span></span>;</div><div class="line"></div><div class="line"><span class="function">MessageConsumer <span class="title">createConsumer</span><span class="params">(Destination destination, String messageSelector)</span></span>;</div><div class="line"></div><div class="line"><span class="function">MessageConsumer <span class="title">createConsumer</span><span class="params">(Destination destination, String name, <span class="keyword">boolean</span> noLocal)</span></span>;</div><div class="line"></div><div class="line"><span class="function">TopicSubscriber <span class="title">createDurableSubscriber</span><span class="params">(Topic topic, String name)</span></span>;</div><div class="line"></div><div class="line"><span class="function">TopicSubscriber <span class="title">createDurableSubscriber</span><span class="params">(Topic topic, String name, String messageSelector, <span class="keyword">boolean</span> noLocal)</span></span>;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中messageSelector为消息选择器，noLocal标志默认为false，当设置为true时限制消费者只能接收和自己相同的连接（Connection）所发布的消息，此标志只适用于主题，不适用于队列；name标识订阅主题所对应的订阅名称，持久订阅时需要设置此参数。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Public final String SELECTOR = “name = ‘hfbin’”;该选择器检查了传入消息Name属性，并确定了这个属性的值是否等于hfbin，如果等于，则消息被消费，否者该消息会被忽略。</p><p>消息的同步和异步接收：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;消息的同步接收是指客户端主动去接收消息，客户端可以采用MessageConsumer的 receive方法去接收下一个消息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">Message <span class="title">receive</span><span class="params">()</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">Message <span class="title">receive</span><span class="params">(<span class="keyword">long</span> timeout)</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">Message <span class="title">receiveNoWait</span><span class="params">()</span></span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;消息的异步接收是指当消息到达时，ActiveMQ主动通知客户端，可以通过注册一个实现MessageListener接囗的的对象到MessageConsumer。MessageListener只有一个必须实现的方法一一onMessage，它只接收一个参数，即Message。在为每个发送Destination的消息实现onMessage时，将调用该方法。</p><h5 id="4-5-Message方法使用"><a href="#4-5-Message方法使用" class="headerlink" title="4.5 Message方法使用"></a><strong>4.5 Message方法使用</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JMS程序的最终目的是生产和消费的消息能被其他程序使用，JMS的Message是一个即简单又不灵活性的基本格式，允许创建不同平台上的符合非JMS程序格式的消息，Message由以下几部分组成：消息头，属性和消息体。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function">BlobMessage <span class="title">createBlobMessage</span><span class="params">(File file)</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">Blobtaessage <span class="title">createBIobMessage</span><span class="params">(InputStream in)</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">BlobMessage <span class="title">createBIobMessage</span><span class="params">(URL url)</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">BlobMessage <span class="title">createBIobMessage</span><span class="params">(URL url, <span class="keyword">boolean</span> deletedByBroker)</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">BytesMessage <span class="title">createBytesMessage</span><span class="params">()</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">MapMessage <span class="title">createMapMessage</span><span class="params">()</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">Message <span class="title">createMessage</span><span class="params">()</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">ObjectMessage <span class="title">createObjectMessage</span><span class="params">()</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">ObjectMessage <span class="title">createObjectMessage</span><span class="params">(SeriaIizabIe object)</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">TextMessage <span class="title">createTextMessage</span><span class="params">()</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">TextMessage <span class="title">createTextaessage</span><span class="params">(String text)</span></span></div></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们一般会在接收端通过instanceof方法去区别数据类型。</p><p>这里我就不一一举例说明上面的这些方法使用了，想试的自己动手，根据我的Hello World那个程序改就好了。</p><p>转发者必须注明转发链接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-ActiveMQ-简介&quot;&gt;&lt;a href=&quot;#1-ActiveMQ-简介&quot; class=&quot;headerlink&quot; title=&quot;1 ActiveMQ 简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;1 ActiveMQ 简介&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nb
      
    
    </summary>
    
      <category term="消息中间件" scheme="http://yoursite.com/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="ActiveMQ" scheme="http://yoursite.com/tags/ActiveMQ/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="消息中间件" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件之JMS概念理解篇（一）</title>
    <link href="http://yoursite.com/2017/11/29/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B9%8BJMS%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/29/消息中间件之JMS概念理解篇（一）/</id>
    <published>2017-11-28T17:18:17.000Z</published>
    <updated>2018-01-06T06:10:52.765Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-背景-amp-JMS概述"><a href="#1-背景-amp-JMS概述" class="headerlink" title="1 背景 &amp; JMS概述"></a><strong>1 背景 &amp; JMS概述</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前，CORBA、DCOM、RMI等RPC中间件技术己广泛应用于各个领域。但是面对規模和复杂度都越来越高的分布式系统，这些技术也显示出其局限性：</p><p>（1）    同步信：客户发出调用后,必须等待服务对象完成处理并回结果后才能续执行；</p><p>（2）    客户和服务对象的生命周期紧密耦合：客户进程和服务对象进程都必须正常运行；如果由于服务对象崩溃或者网故障导致客户的请求不可达，客户会接收到异常；</p><p>（3）    点对点通信：客户的一次调用只发送给某个单独的目标对象。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;面向消息的中间件(Message Oriented Middleware，MOM)较好的解决了以上问题。发送者将消息发送给消息服务器，消息服务器将消息存放在若干队列中。在合适的时候再将消息转发给接收者。这种模式下，发送和接收是异步的，发送者无需等待：二者的生命周期未必相同：发送消息的时候接收者不一定运行，接收消息的时候发送者也不一定运行；一对多通信：对于一个消息可以有多个接收者。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JAVA消息服务(JMS)定义了Java中访问消息中间件的接口。JMS只是接口，并没有给予实现，实现JMS接口的消息中间件称为JMS Provider,己有的MOM系统包括Apache的ActiveMQ、以及阿里巴巴的RocketMQ、IBM的MQSeries、Microsoft 的MSMQ和BEA的MessageQ、RabbitMQ等等，它们基本都遵循JMS规范。</p><p>后面我会陆续的写关于Apache的ActiveMQ跟阿里巴巴的RocketMQ（开源版）的文章。</p><h4 id="2-对象模型"><a href="#2-对象模型" class="headerlink" title="2 对象模型"></a><strong>2 对象模型</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JMS对象模型包含如下几个要素：</p><p>（1）连接工厂。连接工厂（ConnectionFactory）是由管理员创建，并绑定到JNDI树中。客户端使用JNDI查找连接工厂，然后利用连接工厂创建一个JMS连接。</p><p>（2）JMS连接。JMS连接（Connection）表示JMS客户端和服务器端之间的一个活动的连接，是由客户端通过调用连接工厂的方法建立的。</p><p>（3）JMS会话。JMS会话（Session）表示JMS客户与JMS服务器之间的会话状态。JMS会话建立在JMS连接上，表示客户与服务器之间的一个会话线程。</p><p>（4）JMS目的。JMS目的（Destination），又称为消息队列，是实际的消息源。</p><p>（5）JMS生产者和消费者。生产者（Message Producer）和消费者（Message Consumer）对象由Session对象创建，用于发送和接收消息。</p><p>（6）JMS消息通常有两种类型：</p><p>① 点对点（Point-to-Point）。在点对点的消息系统中，消息分发给一个单独的使用者。点对点消息往往与队列（javax.jms.Queue）相关联。</p><p>② 发布/订阅（Publish/Subscribe）。发布/订阅消息系统支持一个事件驱动模型，消息生产者和消费者都参与消息的传递。生产者发布事件，而使用者订阅感兴趣的事件，并使用事件。该类型消息一般与特定的主题（javax.jms.Topic）关联。</p><p>如图（图片来源于百度百科）：</p><p><img src="http://img.blog.csdn.net/20171129011739339?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="3-模型"><a href="#3-模型" class="headerlink" title="3 模型"></a><strong>3 模型</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java消息服务应用程序结构支持两种模型：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;点对点或队列模型（Point-to-Point）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发布者/订阅者模型（Publish/Subscribe）</p><h5 id="Point-to-Point（P2P）"><a href="#Point-to-Point（P2P）" class="headerlink" title="Point-to-Point（P2P）"></a><strong>Point-to-Point（P2P）</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在P2P模型中，有下列概念：消息队列(Queue)、发送者(Sender)、接收者(Receiver)。每个消息都被发送到一个特定的队列，接收者从队列中获取消息。队列保留着消息，直到它们被消费或超时。 </p><p>特点：</p><p>（1）每个消息只有一个消费者（Consumer）(即一旦被消费，消息就不再在消息队列中)</p><p>（2）发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行，它不会影响到消息被发送到队列</p><p>（3）接收者在成功接收消息之后需向队列应答成功</p><p>建议：如果你希望发送的每个消息都应该被成功处理的话，那么你需要P2P模型。 </p><h5 id="Publish-Subscribe（Pub-Sub）"><a href="#Publish-Subscribe（Pub-Sub）" class="headerlink" title="Publish/Subscribe（Pub/Sub）"></a><strong>Publish/Subscribe（Pub/Sub）</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Pub/Sub模型中，有下列概念： 主题（Topic）、发布者（Publisher）、订阅者（Subscriber）。客户端将消息发送到主题。多个发布者将消息发送到Topic，系统将这些消息传递给多个订阅者。 </p><p>特点：</p><p>（1）每个消息可以有多个消费者</p><p>（2）发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息，而且为了消费消息，订阅者必须保持运行的状态。</p><p>（3）为了缓和这样严格的时间相关性，JMS允许订阅者创建一个可持久化的订阅。这样，即使订阅者没有被激活（运行），它也能接收到发布者的消息。</p><p>建议：如果你希望发送的消息可以不被做任何处理、或者被一个消费者处理、或者可以被多个消费者处理的话，那么可以采用Pub/Sub模型。 </p><h4 id="4-术语概念"><a href="#4-术语概念" class="headerlink" title="4 术语概念"></a><strong>4 术语概念</strong></h4><p>ConnectionFactory 接口（连接工厂）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用户用来创建到JMS提供者的连接的被管对象。JMS客户通过可移植的接口访问连接，这样当下层的实现改变时，代码不需要进行修改。管理员在JNDI名字空间中配置连接工厂，这样，JMS客户才能够查找到它们。根据消息类型的不同，用户将使用队列连接工厂，或者主题连接工厂。</p><p>Connection 接口（连接）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;连接代表了应用程序和消息服务器之间的通信链路。在获得了连接工厂后，就可以创建一个与JMS提供者的连接。根据不同的连接类型，连接允许用户创建会话，以发送和接收队列和主题到目标。</p><p>Destination 接口（目标）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;目标是一个包装了消息目标标识符的被管对象，消息目标是指消息发布和接收的地点，或者是队列，或者是主题。JMS管理员创建这些对象，然后用户通过JNDI发现它们。和连接工厂一样，管理员可以创建两种类型的目标，点对点模型的队列，以及发布者/订阅者模型的主题。</p><p>Session 接口（会话）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示一个单线程的上下文，用于发送和接收消息。由于会话是单线程的，所以消息是连续的，就是说消息是按照发送的顺序一个一个接收的。会话的好处是它支持事务。如果用户选择了事务支持，会话上下文将保存一组消息，直到事务被提交才发送这些消息。在提交事务之前，用户可以使用回滚操作取消这些消息。一个会话允许用户创建消息，生产者来发送消息，消费者来接收消息。</p><p>MessageConsumer 接口（消息消费者）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由会话创建的对象，用于接收发送到目标的消息。消费者可以同步地（阻塞模式），或（非阻塞）接收队列和主题类型的消息。</p><p>MessageProducer 接口（消息生产者）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由会话创建的对象，用于发送消息到目标。用户可以创建某个目标的发送者，也可以创建一个通用的发送者，在发送消息时指定目标。</p><p>Message 接口（消息）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是在消费者和生产者之间传送的对象，也就是说从一个应用程序传送到另一个应用程序。一个消息有三个主要部分：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;消息头（必须）：包含用于识别和为消息寻找路由的操作设置。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一组消息属性（可选）：包含额外的属性，支持其他提供者和用户的兼容。可以创建定制的字段和过滤器（消息选择器）。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个消息体（可选）：允许用户创建五种类型的消息（文本消息，映射消息，字节消息，流消息和对象消息）。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;消息接口非常灵活，并提供了许多方式来定制消息的内容。</p><h4 id="消息格式定义"><a href="#消息格式定义" class="headerlink" title="消息格式定义"></a><strong>消息格式定义</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JMS定义了五种不同的消息正文格式，以及调用的消息类型。允许你发送并接收以一些不同形式的数据，提供现有消息格式的一些级别的兼容性。</p><p>StreamMessage Java原始值的数据流  </p><p>MapMessage一套名称值对  </p><p>TextMessage一个字符串对象</p><p>ObjectMessage一个序列化的Java对象</p><p>BytesMessage一个未解释字节的数据流</p><p>好！JMS大概介绍到这，后面我会陆续的写关于Apache的ActiveMQ跟阿里巴巴的RocketMQ（开源版）的文章。</p><p>转发者必须注明转发链接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-背景-amp-JMS概述&quot;&gt;&lt;a href=&quot;#1-背景-amp-JMS概述&quot; class=&quot;headerlink&quot; title=&quot;1 背景 &amp;amp; JMS概述&quot;&gt;&lt;/a&gt;&lt;strong&gt;1 背景 &amp;amp; JMS概述&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&amp;
      
    
    </summary>
    
      <category term="消息中间件" scheme="http://yoursite.com/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="消息中间件" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="JMS" scheme="http://yoursite.com/tags/JMS/"/>
    
  </entry>
  
  <entry>
    <title>java网络编程之Netty实战心跳检测（八）</title>
    <link href="http://yoursite.com/2017/11/27/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BNetty%E5%AE%9E%E6%88%98%E5%BF%83%E8%B7%B3%E6%A3%80%E6%B5%8B%EF%BC%88%E5%85%AB%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/27/java网络编程之Netty实战心跳检测（八）/</id>
    <published>2017-11-27T04:05:11.000Z</published>
    <updated>2018-01-06T06:11:05.088Z</updated>
    
    <content type="html"><![CDATA[<h3>Netty实战心跳检测</h3><h4 id="1-概念理解"><a href="#1-概念理解" class="headerlink" title="1 概念理解"></a><strong>1 概念理解</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们使用Socket通信一般经常会处理多个服务器之间的心跳检测，一般来讲我们去维护服务器集群，肯定要有一台或（几台）服务器主机(Master)，然后还应该有N台(Slave)，那么我们的主机肯定要时时刻刻知道自己下面的从服务器的各方面情况。然后进行实时监控的功能。这个在分布式架构里叫做心跳检测或者说心跳监控。最佳处理方案我还是觉得是使用一些通信框架进行实现，我们的Netty就可以去做这样一件事。<br><img src="http://img.blog.csdn.net/20171127120439806?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>废话不多说直接上案例。</p><h4 id="2-案例"><a href="#2-案例" class="headerlink" title="2 案例"></a><strong>2 案例</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在编写案例之前先说一下要加入jar包， 1、netty     2、log4j     3、jboss-marshalling    jboss-marshalling-serial 4、sigar（这个jar包是用来获得电脑cpu信息、内存信息等）不理解的可去官网查看使用教程，在讲完案例后我附上sigar一些例子。<br>jar包我已上传github：<a href="https://github.com/hfbin/Thread_Socket/tree/master/Socket/heartBeat/jar%E5%8C%85" target="_blank" rel="external">https://github.com/hfbin/Thread_Socket/tree/master/Socket/heartBeat/jar%E5%8C%85</a></p><p>还是老规矩从实体类入手。</p><h5 id="2-1-实体类"><a href="#2-1-实体类" class="headerlink" title="2.1 实体类"></a><strong>2.1 实体类</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//1</span></div><div class="line"><span class="keyword">private</span> String ip ;</div><div class="line"><span class="comment">//2</span></div><div class="line"><span class="keyword">private</span> HashMap&lt;String, Object&gt; cpuPercMap ;</div><div class="line"><span class="comment">//3</span></div><div class="line"><span class="keyword">private</span> HashMap&lt;String, Object&gt; memoryMap;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> ip;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIp</span><span class="params">(String ip)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.ip = ip;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> HashMap&lt;String, Object&gt; <span class="title">getCpuPercMap</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> cpuPercMap;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpuPercMap</span><span class="params">(HashMap&lt;String, Object&gt; cpuPercMap)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.cpuPercMap = cpuPercMap;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> HashMap&lt;String, Object&gt; <span class="title">getMemoryMap</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> memoryMap;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemoryMap</span><span class="params">(HashMap&lt;String, Object&gt; memoryMap)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.memoryMap = memoryMap;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个实体类主要用来封装了客户端的1、ip地址 2、cpu信息 3、内存信息。</p><h5 id="2-2-Jboss-Marshalling-编解码工具类"><a href="#2-2-Jboss-Marshalling-编解码工具类" class="headerlink" title="2.2 Jboss Marshalling 编解码工具类"></a><strong>2.2 Jboss Marshalling 编解码工具类</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MarshallingCodeCFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 创建Jboss Marshalling解码器MarshallingDecoder</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> MarshallingDecoder</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MarshallingDecoder <span class="title">buildMarshallingDecoder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//1</span></div><div class="line">        <span class="keyword">final</span> MarshallerFactory marshallerFactory = Marshalling.getProvidedMarshallerFactory(<span class="string">"serial"</span>);</div><div class="line">        <span class="comment">//2</span></div><div class="line">        <span class="keyword">final</span> MarshallingConfiguration configuration = <span class="keyword">new</span> MarshallingConfiguration();</div><div class="line">        configuration.setVersion(<span class="number">5</span>);</div><div class="line">        <span class="comment">//3</span></div><div class="line">        UnmarshallerProvider provider = <span class="keyword">new</span> DefaultUnmarshallerProvider(marshallerFactory, configuration);</div><div class="line">        <span class="comment">//4</span></div><div class="line">        MarshallingDecoder decoder = <span class="keyword">new</span> MarshallingDecoder(provider, <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> decoder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 创建Jboss Marshalling编码器MarshallingEncoder</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> MarshallingEncoder</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MarshallingEncoder <span class="title">buildMarshallingEncoder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> MarshallerFactory marshallerFactory = Marshalling.getProvidedMarshallerFactory(<span class="string">"serial"</span>);</div><div class="line">        <span class="keyword">final</span> MarshallingConfiguration configuration = <span class="keyword">new</span> MarshallingConfiguration();</div><div class="line">        configuration.setVersion(<span class="number">5</span>);</div><div class="line">        MarshallerProvider provider = <span class="keyword">new</span> DefaultMarshallerProvider(marshallerFactory, configuration);</div><div class="line">        <span class="comment">//5</span></div><div class="line">        MarshallingEncoder encoder = <span class="keyword">new</span> MarshallingEncoder(provider);</div><div class="line">        <span class="keyword">return</span> encoder;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1、首先通过Marshalling工具类的精通方法获取Marshalling实例对象 参数serial标识创建的是java序列化工厂对象。</p><p>2、创建了MarshallingConfiguration对象，配置了版本号为5</p><p>3、根据marshallerFactory和configuration创建provider</p><p>4、构建Netty的MarshallingDecoder对象，俩个参数分别为provider和单个消息序列化后的最大长度</p><p>5、构建Netty的MarshallingEncoder对象，MarshallingEncoder用于实现序列化接口的POJO对象序列化为二进制数组</p><p>个人感觉不难都是一些固定的写法，记住每一步要做什么就好,建议你去看一些我编解码技术的这篇文章</p><h5 id="2-3-服务端"><a href="#2-3-服务端" class="headerlink" title="2.3 服务端"></a><strong>2.3 服务端</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"></div><div class="line">EventLoopGroup pGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">EventLoopGroup cGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line">ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">b.group(pGroup, cGroup)</div><div class="line"> .channel(NioServerSocketChannel.class)</div><div class="line"> .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)</div><div class="line"> <span class="comment">//1</span></div><div class="line"> .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</div><div class="line"> .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">//2</span></div><div class="line">sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</div><div class="line"><span class="comment">//3</span></div><div class="line">sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> ServerHeartBeatHandler());</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ChannelFuture cf = b.bind(<span class="number">8765</span>).sync();</div><div class="line"></div><div class="line">cf.channel().closeFuture().sync();</div><div class="line">pGroup.shutdownGracefully();</div><div class="line">cGroup.shutdownGracefully();</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1、设置日志（这里需要自己导入log4j.jar） 当然你也可以不设置打印日记</p><p>2、这是我们写的Jboss Marshalling工具类的解码器MarshallingDecoder</p><p>3、这是我们写的Jboss Marshalling工具类的编码器MarshallingEncoder </p><p>其他不懂的去看我Netty的第一篇文章</p><h5 id="服务端业务逻辑"><a href="#服务端业务逻辑" class="headerlink" title="服务端业务逻辑"></a><strong>服务端业务逻辑</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHeartBeatHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</div><div class="line">    </div><div class="line"><span class="comment">/** key:ip value:auth */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, String&gt; AUTH_IP_MAP = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUCCESS_KEY = <span class="string">"auth_success_key"</span>;</div><div class="line"></div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">AUTH_IP_MAP.put(<span class="string">"169.254.165.147"</span>, <span class="string">"1234"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//认证</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">auth</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span></span>&#123;</div><div class="line"><span class="comment">//System.out.println(msg);</span></div><div class="line">    <span class="comment">//分割</span></div><div class="line">String [] ret = ((String) msg).split(<span class="string">","</span>);</div><div class="line"><span class="comment">//在AUTH_IP_MAP中获取values</span></div><div class="line">String auth = AUTH_IP_MAP.get(ret[<span class="number">0</span>]);</div><div class="line"><span class="keyword">if</span>(auth != <span class="keyword">null</span> &amp;&amp; auth.equals(ret[<span class="number">1</span>]))&#123;</div><div class="line">ctx.writeAndFlush(SUCCESS_KEY);</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">//链接失败，关闭客户端的链接</span></div><div class="line">ctx.writeAndFlush(<span class="string">"auth failure !"</span>).addListener(ChannelFutureListener.CLOSE);</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="keyword">if</span>(msg <span class="keyword">instanceof</span> String)&#123;</div><div class="line">auth(ctx, msg);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> RequestInfo) &#123;</div><div class="line"><span class="comment">//将数据放到RequestInfo中</span></div><div class="line">RequestInfo info = (RequestInfo) msg;</div><div class="line">System.out.println(<span class="string">"--------------------------------------------"</span>);</div><div class="line">System.out.println(<span class="string">"当前主机ip为: "</span> + info.getIp());</div><div class="line">System.out.println(<span class="string">"当前主机cpu情况: "</span>);</div><div class="line">HashMap&lt;String, Object&gt; cpu = info.getCpuPercMap();</div><div class="line">System.out.println(<span class="string">"总使用率: "</span> + cpu.get(<span class="string">"combined"</span>));</div><div class="line">System.out.println(<span class="string">"用户使用率: "</span> + cpu.get(<span class="string">"user"</span>));</div><div class="line">System.out.println(<span class="string">"系统使用率: "</span> + cpu.get(<span class="string">"sys"</span>));</div><div class="line">System.out.println(<span class="string">"等待率: "</span> + cpu.get(<span class="string">"wait"</span>));</div><div class="line">System.out.println(<span class="string">"空闲率: "</span> + cpu.get(<span class="string">"idle"</span>));</div><div class="line"></div><div class="line">System.out.println(<span class="string">"当前主机memory情况: "</span>);</div><div class="line">HashMap&lt;String, Object&gt; memory = info.getMemoryMap();</div><div class="line">System.out.println(<span class="string">"内存总量: "</span> + memory.get(<span class="string">"total"</span>));</div><div class="line">System.out.println(<span class="string">"当前内存使用量: "</span> + memory.get(<span class="string">"used"</span>));</div><div class="line">System.out.println(<span class="string">"当前内存剩余量: "</span> + memory.get(<span class="string">"free"</span>));</div><div class="line">System.out.println(<span class="string">"--------------------------------------------"</span>);</div><div class="line"></div><div class="line"><span class="comment">//返回一条状态给客户端</span></div><div class="line">ctx.writeAndFlush(<span class="string">"info received!"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">ctx.writeAndFlush(<span class="string">"connect failure!"</span>).addListener(ChannelFutureListener.CLOSE);</div><div class="line">&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;服务端业务逻辑，主要是获取客户端的信息，但是获取客户端信息必须要经过验证后客户端才能连上服务端，向服务端推送客户端机子的各种信息。为了操作方便，这里采用了一个静态模块用来保存客户端机ip、key（我放在Map中ip为Map中的key，key为Map中的value），注意为了安全起见key建议使用加密后的key,比如用MD5加密，还有这里不建议使用静态模块保存客户端机ip、key，你可以保存到数据库，或者写一个配置文件,我这里为了方便才放在静态模块中的。</p><p>由于没什么难的地方我不一一说明了，要说的我都注释在代码中了</p><p>这里我要说一下instanceof运算符：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instanceof 运算符是用来在运行时指出对象是否是特定类的一个实例。instanceof通过返回一个布尔值来指出，这个对象是否是这个特定类或者是它的子类的一个实例。</p><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a><strong>客户端</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"></div><div class="line">EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">Bootstrap b = <span class="keyword">new</span> Bootstrap();</div><div class="line">b.group(group)</div><div class="line"> .channel(NioSocketChannel.class)</div><div class="line"> .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">//1</span></div><div class="line">sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</div><div class="line"><span class="comment">//2</span></div><div class="line">sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> ClienHeartBeattHandler());</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ChannelFuture cf = b.connect(<span class="string">"127.0.0.1"</span>, <span class="number">8765</span>).sync();</div><div class="line"></div><div class="line">cf.channel().closeFuture().sync();</div><div class="line">group.shutdownGracefully();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1、这是我们写的Jboss Marshalling工具类的解码器MarshallingDecoder</p><p>2、这是我们写的Jboss Marshalling工具类的编码器MarshallingEncoder</p><p>其他不懂的去看我Netty的第一篇文章</p><h5 id="客户端业务逻辑"><a href="#客户端业务逻辑" class="headerlink" title="客户端业务逻辑"></a><strong>客户端业务逻辑</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClienHeartBeattHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</div><div class="line"><span class="comment">//线程池</span></div><div class="line">    <span class="keyword">private</span> ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(<span class="number">1</span>);</div><div class="line">    <span class="comment">//异步</span></div><div class="line">    <span class="keyword">private</span> ScheduledFuture&lt;?&gt; heartBeat;</div><div class="line"><span class="comment">//主动向服务器发送认证信息</span></div><div class="line">    <span class="keyword">private</span> InetAddress addr ;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUCCESS_KEY = <span class="string">"auth_success_key"</span>;</div><div class="line"></div><div class="line">    <span class="comment">//客户端启动时这个方法自动启动，不懂的可以去官网看看Netty Handler的生命周期</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="comment">//得到本机ip</span></div><div class="line">addr = InetAddress.getLocalHost();</div><div class="line">String ip = addr.getHostAddress();</div><div class="line">System.out.println(<span class="string">"ip = "</span>+ip);</div><div class="line">String key = <span class="string">"1234"</span>;</div><div class="line"><span class="comment">//证书</span></div><div class="line">String auth = ip + <span class="string">","</span> + key;</div><div class="line">ctx.writeAndFlush(auth);</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span>(msg <span class="keyword">instanceof</span> String)&#123;</div><div class="line">        String ret = (String)msg;</div><div class="line">        <span class="keyword">if</span>(SUCCESS_KEY.equals(ret))&#123;</div><div class="line">            <span class="comment">// 握手成功，主动发送心跳消息</span></div><div class="line"><span class="comment">//1、要执行的任务  传入ctx 是为了能在这个类里面直接可以往服务端发数据</span></div><div class="line"><span class="comment">//2、初始化等待时间</span></div><div class="line"><span class="comment">//3、多少秒执行一次</span></div><div class="line"><span class="comment">//4、</span></div><div class="line">            <span class="keyword">this</span>.heartBeat = <span class="keyword">this</span>.scheduler.scheduleWithFixedDelay(<span class="keyword">new</span> HeartBeatTask(ctx), <span class="number">0</span>, <span class="number">2</span>, TimeUnit.SECONDS);</div><div class="line">            System.out.println(msg);    </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">        System.out.println(msg);</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">ReferenceCountUtil.release(msg);</div><div class="line">&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//内部类</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartBeatTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChannelHandlerContext ctx;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeartBeatTask</span><span class="params">(<span class="keyword">final</span> ChannelHandlerContext ctx)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.ctx = ctx;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    RequestInfo info = <span class="keyword">new</span> RequestInfo();</div><div class="line">    <span class="comment">//ip</span></div><div class="line">    info.setIp(addr.getHostAddress());</div><div class="line">        Sigar sigar = <span class="keyword">new</span> Sigar();</div><div class="line">        <span class="comment">//cpu</span></div><div class="line">        CpuPerc cpuPerc = sigar.getCpuPerc();</div><div class="line">        HashMap&lt;String, Object&gt; cpuPercMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">        cpuPercMap.put(<span class="string">"combined"</span>, cpuPerc.getCombined());</div><div class="line">        cpuPercMap.put(<span class="string">"user"</span>, cpuPerc.getUser());</div><div class="line">        cpuPercMap.put(<span class="string">"sys"</span>, cpuPerc.getSys());</div><div class="line">        cpuPercMap.put(<span class="string">"wait"</span>, cpuPerc.getWait());</div><div class="line">        cpuPercMap.put(<span class="string">"idle"</span>, cpuPerc.getIdle());</div><div class="line">        <span class="comment">// memory</span></div><div class="line">        Mem mem = sigar.getMem();</div><div class="line">HashMap&lt;String, Object&gt; memoryMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">memoryMap.put(<span class="string">"total"</span>, mem.getTotal() / <span class="number">1024L</span>);</div><div class="line">memoryMap.put(<span class="string">"used"</span>, mem.getUsed() / <span class="number">1024L</span>);</div><div class="line">memoryMap.put(<span class="string">"free"</span>, mem.getFree() / <span class="number">1024L</span>);</div><div class="line">info.setCpuPercMap(cpuPercMap);</div><div class="line">    info.setMemoryMap(memoryMap);</div><div class="line">    ctx.writeAndFlush(info);</div><div class="line">    </div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个也不难，认真读大家都能读懂。难理解的我都在代码中注释了。这里<code>使用线程池执行定时任务</code>每隔两秒就往服务端发送当前机子的cpu等各种信息。</p><p>好！到这目前所有代码都编写完了来测试一下效果。</p><p>服务端启动打印如图：</p><p><img src="http://img.blog.csdn.net/20171127120141387?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>客户端启动打印如图： </p><p><img src="http://img.blog.csdn.net/20171127120151869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>这里只截取部分，由于两秒执行一次，打印比较多，自己可以下载代码自己测试效果怎样。</p><p>客户端启动后服务端的打印：</p><p><img src="http://img.blog.csdn.net/20171127120200388?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>这里只截取部分，由于两秒执行一次，打印比较多，自己可以下载代码自己测试效果怎样。</p><p>源代码：<a href="https://github.com/hfbin/Thread_Socket/tree/master/Socket/heartBeat" target="_blank" rel="external">https://github.com/hfbin/Thread_Socket/tree/master/Socket/heartBeat</a></p><p>转发者必须注明转发链接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;Netty实战心跳检测&lt;/h3&gt;

&lt;h4 id=&quot;1-概念理解&quot;&gt;&lt;a href=&quot;#1-概念理解&quot; class=&quot;headerlink&quot; title=&quot;1 概念理解&quot;&gt;&lt;/a&gt;&lt;strong&gt;1 概念理解&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nb
      
    
    </summary>
    
      <category term="网络编程" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java网络编程之Netty实战数据通信（七）</title>
    <link href="http://yoursite.com/2017/11/27/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BNetty%E5%AE%9E%E6%88%98%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/27/java网络编程之Netty实战数据通信（七）/</id>
    <published>2017-11-26T17:01:11.000Z</published>
    <updated>2018-01-06T06:11:04.074Z</updated>
    
    <content type="html"><![CDATA[<h3>Netty最佳实战数据通信</h3><h4 id="1-分析"><a href="#1-分析" class="headerlink" title="1 分析"></a><strong>1 分析</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们需要了解下在真正项目应用中如何去考虚Netty的使用，大体上对于一参数设置都是根据服务器性能决定的。这个不是最主要的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们要考虑的问题是两台机器（甚至多台）使用Netty的怎样进行通信，我把他分为三种：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一种，使用长连接通道不断开的形式进行通信，也就是服务器和客户端的通道一直处于开启状态，如果服务器性能足够好，并且我们的客户端数量也比较少的情况下，我还是推荐这种方式的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二种，一次性批量提交数据，采用短连接方式。也就是我们会把数据保存在本地临时缓冲区或者临时表里，当达到临界值时进行一次性批量提交。又或者根据定时任务轮询提交，这种情况弊端是做不到实时性传输，在对实时性不高的应用程序中可以推荐使用。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第三种，我们可以使用一种特殊的长连接，在指定某一时间之内，服务器与某台客户端没有任何通信，则断开连接。下次连接则是客户端向服务器发送请求的时候，再次立连接。但是这种模式我们要考虑2个因素：</p><p>1、如何在超时（即服务器和客户端没有任何通信）后关闭通道？关闭通道后我们又如何再次建立连接？</p><p>2、客户端宕机时，我们无需考虑，下次客户端重启之后我们就可以与服务器建立连接，但是服务器宕机时，我们的客户端如何与服务器进行连接呢？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好到这这三种场景都描述了一个遍，再简单的来说一下。第一种，主要你的服务器性能够好，ok你可以采取第一种完全没问题；第二种，感觉也没什么毛病，但是做不到实时性；第三种，个人强烈建议使用第三种，我会用一个小小案例来说明，需要考虑的因素，等我把案例讲完了也许你就懂如何解决了，当然如果你会了第三个，第一个也就不算什么难事了，就相当于我们刚开始学的HelloWorld案例一样，好说了那么多废话，在这就不BB了，直接上案例，注意这里只拿第三种来说明：</p><h4 id="2-案例"><a href="#2-案例" class="headerlink" title="2 案例"></a><strong>2 案例</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在讲解案例之前先说一下，这个案例用到JBoss Marshalling编解码框架，不了解编解码技术的可以看我上一篇文章。说实话，如果你看过上一篇文章，这个案例就相当于上一篇文章的更改版，只是在客户端这里做了一些修改。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;需要的jar包有 &nbsp;&nbsp;1、netty  &nbsp;&nbsp;&nbsp;&nbsp;2、log4j &nbsp;&nbsp;&nbsp;&nbsp;3、jboss-marshalling &nbsp;&nbsp; jboss-marshalling-serial 需要jar包的可以去我的github下载或者自己去官网下载。<a href="https://github.com/hfbin/Thread_Socket/tree/master/Socket/runtime/jar%E5%8C%85" target="_blank" rel="external">https://github.com/hfbin/Thread_Socket/tree/master/Socket/runtime/jar%E5%8C%85</a></p><p>还是老规矩有实体类先上实体类</p><h5 id="2-1-实体类"><a href="#2-1-实体类" class="headerlink" title="2.1 实体类"></a><strong>2.1 实体类</strong></h5><p> 首先，需要两个实体类，实体类都需要实现Serializable接口，Request类是用来做客户端的请求的， Response类是用来做服务端返回给客户端的响应。</p><p> Request<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span>  SerialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> String id ;</div><div class="line"><span class="keyword">private</span> String name ;</div><div class="line"><span class="keyword">private</span> String requestMessage ;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> id;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.id = id;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRequestMessage</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> requestMessage;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestMessage</span><span class="params">(String requestMessage)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.requestMessage = requestMessage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Response</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> String id;</div><div class="line"><span class="keyword">private</span> String name;</div><div class="line"><span class="keyword">private</span> String responseMessage;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> id;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.id = id;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getResponseMessage</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> responseMessage;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResponseMessage</span><span class="params">(String responseMessage)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.responseMessage = responseMessage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里代码没什么好说的</p><h5 id="2-2-Jboss-Marshalling-编解码工具类"><a href="#2-2-Jboss-Marshalling-编解码工具类" class="headerlink" title="2.2 Jboss Marshalling 编解码工具类"></a><strong>2.2 Jboss Marshalling 编解码工具类</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MarshallingCodeCFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 创建Jboss Marshalling解码器MarshallingDecoder</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> MarshallingDecoder</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MarshallingDecoder <span class="title">buildMarshallingDecoder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//1</span></div><div class="line">        <span class="keyword">final</span> MarshallerFactory marshallerFactory = Marshalling.getProvidedMarshallerFactory(<span class="string">"serial"</span>);</div><div class="line">        <span class="comment">//2</span></div><div class="line">        <span class="keyword">final</span> MarshallingConfiguration configuration = <span class="keyword">new</span> MarshallingConfiguration();</div><div class="line">        configuration.setVersion(<span class="number">5</span>);</div><div class="line">        <span class="comment">//3</span></div><div class="line">        UnmarshallerProvider provider = <span class="keyword">new</span> DefaultUnmarshallerProvider(marshallerFactory, configuration);</div><div class="line">        <span class="comment">//4</span></div><div class="line">        MarshallingDecoder decoder = <span class="keyword">new</span> MarshallingDecoder(provider, <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> decoder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 创建Jboss Marshalling编码器MarshallingEncoder</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> MarshallingEncoder</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MarshallingEncoder <span class="title">buildMarshallingEncoder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> MarshallerFactory marshallerFactory = Marshalling.getProvidedMarshallerFactory(<span class="string">"serial"</span>);</div><div class="line">        <span class="keyword">final</span> MarshallingConfiguration configuration = <span class="keyword">new</span> MarshallingConfiguration();</div><div class="line">        configuration.setVersion(<span class="number">5</span>);</div><div class="line">        MarshallerProvider provider = <span class="keyword">new</span> DefaultMarshallerProvider(marshallerFactory, configuration);</div><div class="line">        <span class="comment">//5</span></div><div class="line">        MarshallingEncoder encoder = <span class="keyword">new</span> MarshallingEncoder(provider);</div><div class="line">        <span class="keyword">return</span> encoder;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1、首先通过Marshalling工具类的精通方法获取Marshalling实例对象 参数serial标识创建的是java序列化工厂对象。</p><p>2、创建了MarshallingConfiguration对象，配置了版本号为5</p><p>3、根据marshallerFactory和configuration创建provider</p><p>4、构建Netty的MarshallingDecoder对象，俩个参数分别为provider和单个消息序列化后的最大长度</p><p>5、构建Netty的MarshallingEncoder对象，MarshallingEncoder用于实现序列化接口的POJO对象序列化为二进制数组</p><p>个人感觉不难都是一些固定的写法，记住每一步要做什么就好。</p><h5 id="2-3-服务端"><a href="#2-3-服务端" class="headerlink" title="2.3 服务端"></a><strong>2.3 服务端</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"></div><div class="line">EventLoopGroup pGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">EventLoopGroup cGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line">ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">b.group(pGroup, cGroup)</div><div class="line"> .channel(NioServerSocketChannel.class)</div><div class="line"> .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)</div><div class="line"> <span class="comment">//1</span></div><div class="line"> .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</div><div class="line"> .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">//2</span></div><div class="line">sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</div><div class="line"><span class="comment">//3</span></div><div class="line">sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</div><div class="line"><span class="comment">//4</span></div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> ReadTimeoutHandler(<span class="number">5</span>)); </div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> ServerHandler());</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ChannelFuture cf = b.bind(<span class="number">8765</span>).sync();</div><div class="line"></div><div class="line">cf.channel().closeFuture().sync();</div><div class="line">pGroup.shutdownGracefully();</div><div class="line">cGroup.shutdownGracefully();</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1、设置日志（这里需要自己导入log4j.jar） 当然你也可以不设置打印日记</p><p>2、这是我们写的Jboss Marshalling工具类的解码器MarshallingDecoder</p><p>3、这是我们写的Jboss Marshalling工具类的编码器MarshallingEncoder </p><p>4、超时handler（当服务器端与客户端在指定时间以上没有任何进行通信，则会关闭响应的通道，主要为减小服务端资源占用）单位是秒</p><p>其他不懂的去看我Netty的第一篇文章</p><h5 id="2-4-服务端业务逻辑"><a href="#2-4-服务端业务逻辑" class="headerlink" title="2.4 服务端业务逻辑"></a><strong>2.4 服务端业务逻辑</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">Request request = (Request)msg;</div><div class="line">System.out.println(<span class="string">"Server : "</span> + request.getId() + <span class="string">", "</span> + request.getName() + <span class="string">", "</span> + request.getRequestMessage());</div><div class="line">Response response = <span class="keyword">new</span> Response();</div><div class="line">response.setId(request.getId());</div><div class="line">response.setName(<span class="string">"response"</span> + request.getId());</div><div class="line">response.setResponseMessage(<span class="string">"响应内容"</span> + request.getId());</div><div class="line">ctx.writeAndFlush(response);<span class="comment">//.addListener(ChannelFutureListener.CLOSE);</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里业务逻辑主要是将客户端传过来的信息进行打印，然后将数据传入返回的实体类Response，将实体类Response返回给客户端</p><h5 id="2-5-客户端"><a href="#2-5-客户端" class="headerlink" title="2.5 客户端"></a><strong>2.5 客户端</strong></h5><p>上面的那些代码之前案例我都写过，基本上没什么变化，只有客户端的代码变化最大，下面来一一说明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 1</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> Client instance = <span class="keyword">new</span> Client();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Client <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">return</span> SingletonHolder.instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> EventLoopGroup group;</div><div class="line"><span class="keyword">private</span> Bootstrap b;</div><div class="line"><span class="keyword">private</span> ChannelFuture cf ;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Client</span><span class="params">()</span></span>&#123;</div><div class="line">group = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">b = <span class="keyword">new</span> Bootstrap();</div><div class="line">b.group(group)</div><div class="line"> .channel(NioSocketChannel.class)</div><div class="line"> .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</div><div class="line"> .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">//2</span></div><div class="line">sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</div><div class="line"><span class="comment">//3</span></div><div class="line">sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</div><div class="line"><span class="comment">//4</span></div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> ReadTimeoutHandler(<span class="number">5</span>)); </div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> ClientHandler());</div><div class="line">&#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//5</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">this</span>.cf = b.connect(<span class="string">"127.0.0.1"</span>, <span class="number">8765</span>).sync();</div><div class="line">System.out.println(<span class="string">"远程服务器已经连接, 可以进行数据交换.."</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//6</span></div><div class="line"><span class="function"><span class="keyword">public</span> ChannelFuture <span class="title">getChannelFuture</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//如果没有连接先链接</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.cf == <span class="keyword">null</span>)&#123;</div><div class="line"><span class="keyword">this</span>.connect();</div><div class="line">&#125;</div><div class="line"><span class="comment">//this.cf.channel().isActive() 这里得到的是链接状态 在重新连接时候使用的 返回true/false</span></div><div class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.cf.channel().isActive())&#123;</div><div class="line"><span class="keyword">this</span>.connect();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.cf;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"><span class="keyword">final</span> Client c = Client.getInstance();</div><div class="line"><span class="comment">//c.connect();</span></div><div class="line">ChannelFuture cf = c.getChannelFuture();</div><div class="line"><span class="comment">//7</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++ )&#123;</div><div class="line">Request request = <span class="keyword">new</span> Request();</div><div class="line">request.setId(<span class="string">""</span> + i);</div><div class="line">request.setName(<span class="string">"pro"</span> + i);</div><div class="line">request.setRequestMessage(<span class="string">"数据信息"</span> + i);</div><div class="line">cf.channel().writeAndFlush(request);</div><div class="line">TimeUnit.SECONDS.sleep(<span class="number">4</span>);</div><div class="line">&#125;</div><div class="line">        <span class="comment">//8</span></div><div class="line">cf.channel().closeFuture().sync();</div><div class="line"></div><div class="line"><span class="comment">//9 重连</span></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">System.out.println(<span class="string">"进入子线程..."</span>);</div><div class="line"><span class="comment">//重新调用连接</span></div><div class="line">ChannelFuture cf = c.getChannelFuture();</div><div class="line">System.out.println(cf.channel().isActive());</div><div class="line">System.out.println(cf.channel().isOpen());</div><div class="line"></div><div class="line"><span class="comment">//再次发送数据</span></div><div class="line">Request request = <span class="keyword">new</span> Request();</div><div class="line">request.setId(<span class="string">""</span> + <span class="number">4</span>);</div><div class="line">request.setName(<span class="string">"pro"</span> + <span class="number">4</span>);</div><div class="line">request.setRequestMessage(<span class="string">"数据信息"</span> + <span class="number">4</span>);</div><div class="line">cf.channel().writeAndFlush(request);</div><div class="line">cf.channel().closeFuture().sync();</div><div class="line">System.out.println(<span class="string">"子线程结束."</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;).start();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"断开连接,主线程结束.."</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>还是老规矩，在这我只对一些重要的做说明：</p><p>1、为了保证线安全我采用了单例模式，构造静态内部类实现单例模式，在这不懂的可以看我的这篇<a href="http://blog.csdn.net/qq_33524158/article/details/78566403" target="_blank" rel="external">文章</a></p><p>2、这是我们写的Jboss Marshalling工具类的解码器MarshallingDecoder</p><p>3、这是我们写的Jboss Marshalling工具类的编码器MarshallingEncoder </p><p>4、超时handler（当服务器端与客户端在指定时间以上没有任何进行通信，则会关闭响应的通道，主要为减小服务端资源占用）单位是秒</p><p>5、connect()这里我单独抽出一个方法来做服务器连接的</p><p>6、getChannelFuture()这个方法主要是为了超时时候做的，也就简单的调用了连接的方法</p><p>7、每隔四秒发送一条数据给服务端，注意这里插完三条数据后超过五秒（看4）后没有给服务端发送数据就会进入重连状态</p><p>8、等待关闭</p><p>9、重连，里面的代码很简单，我就不做说明了</p><h5 id="2-6-客户端业务逻辑"><a href="#2-6-客户端业务逻辑" class="headerlink" title="2.6 客户端业务逻辑"></a><strong>2.6 客户端业务逻辑</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">Response resp = (Response)msg;</div><div class="line">System.out.println(<span class="string">"Client : "</span> + resp.getId() + <span class="string">", "</span> + resp.getName() + <span class="string">", "</span> + resp.getResponseMessage());</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">ReferenceCountUtil.release(msg);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里很简单，没什么好说的了。</p><p>好！到这目前所有代码都编写完了来测试一下效果。</p><p>服务端启动打印如图：</p><p><img src="http://img.blog.csdn.net/20171127004448326?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>客户端启动打印如图： </p><p><img src="http://img.blog.csdn.net/20171127004459063?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>客户端启动后服务端的打印：</p><p><img src="http://img.blog.csdn.net/20171127004512265?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里只看几张照片是看不出什么效果的，建议下载源码，自己测试，注意看打印结果。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好代码说完了，运行结果也看了，刚刚留的两个问题现在可以说一下了，为了大家方便我重新说一下要解决的两个问题。</p><p>1、如何在超时（即服务器和客户端没有任何通信）后关闭通道？关闭通道后我们又如何再次建立连接？</p><p>2、客户端宕机时，我们无需考虑，下次客户端重启之后我们就可以与服务器建立连接，但是服务器宕机时，我们的客户端如何与服务器进行连接呢？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一个问题，相信大家都知道如何解决的了，在客户端跟服务端都使用了Netty提供的超时方法ReadTimeoutHandler(5)，参数是以秒来算的。关闭通道后我们重新启动一个线程调用getChannelFuture()方法。重新连接。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二个问题，首先我们肯定的是在liunx环境下做部署的，我们可以在liunx下编写启动服务端的脚本（.sh），要是服务端真出问题只需要启动脚本就可以启动服务器了。</p><p>好！到这这个案例就讲解完了，下一篇文章是Netty实战的第二个使用场景。</p><p>源代码：<a href="https://github.com/hfbin/Thread_Socket/tree/master/Socket/runtime" target="_blank" rel="external">https://github.com/hfbin/Thread_Socket/tree/master/Socket/runtime</a></p><p>转发者必须注明转发链接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;Netty最佳实战数据通信&lt;/h3&gt;

&lt;h4 id=&quot;1-分析&quot;&gt;&lt;a href=&quot;#1-分析&quot; class=&quot;headerlink&quot; title=&quot;1 分析&quot;&gt;&lt;/a&gt;&lt;strong&gt;1 分析&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nb
      
    
    </summary>
    
      <category term="网络编程" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java网络编程之Netty编解码技术（六）</title>
    <link href="http://yoursite.com/2017/11/24/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BNetty%E7%BC%96%E8%A7%A3%E7%A0%81%E6%8A%80%E6%9C%AF%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/24/java网络编程之Netty编解码技术（六）/</id>
    <published>2017-11-24T08:48:11.000Z</published>
    <updated>2018-01-06T06:10:51.788Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a><strong>概念理解</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;编解码技术，说白了就是Java序列化技术，序列化目的就两个，第一进行网络传输，第二对象持久化。虽然我们可以使用java进行对象序列化，Netty去传输，但是Java序列化的硬伤太多，比如Java序列化没法跨语言、序列化后码流太大、序列化性能太低等等。JBoss Marshalling序列化的速度是JDK的3倍。</p><p>主流的编解码框架：</p><p>1、JBoss的Marshalling包</p><p>2、Google的Protobuf</p><p>3、基于 Protobuf 的Kyro</p><p>4、MessagePack框架</p><p>每个编解码的框架都不难，下面我主要是通过JBoss来讲解，需要了解其他框架的可以去百度。</p><h4 id="JBoos-Marshalling"><a href="#JBoos-Marshalling" class="headerlink" title="JBoos Marshalling"></a><strong>JBoos Marshalling</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JBoos Marshalling是一个java对象系列化的包，对JDK默认的序列化框架进行了优化，但又保持跟java.io.Serializable接口的兼容，同时增加了一些可调的参数和附加特征。</p><p>类库：jboss-marshalling-1.3.0   jboss-marshalling-serial-1.3.0</p><p>下载地址：<a href="https://www.jboss.org/jbossmarshalling/downloads" target="_blank" rel="external">https://www.jboss.org/jbossmarshalling/downloads</a></p><p>JBoos Marshalling与Netty结合后进行序列化对象的代码编写非常简单，下面我会一一介绍。</p><h5 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a><strong>实体类</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，需要两个实体类，实体类都需要实现Serializable接口，Req类是用来做客户端的请求的，  Resp类是用来做服务端返回给客户端的响应。</p><p>Req类代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Req</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span>  SerialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> String id ;</div><div class="line"><span class="keyword">private</span> String name ;</div><div class="line"><span class="keyword">private</span> String requestMessage ;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> id;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.id = id;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRequestMessage</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> requestMessage;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestMessage</span><span class="params">(String requestMessage)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.requestMessage = requestMessage;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Resp类代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resp</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> String id;</div><div class="line"><span class="keyword">private</span> String name;</div><div class="line"><span class="keyword">private</span> String responseMessage;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> id;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.id = id;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getResponseMessage</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> responseMessage;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResponseMessage</span><span class="params">(String responseMessage)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.responseMessage = responseMessage;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里代码没什么好说的</p><h5 id="Jboss-Marshalling-编解码工具类"><a href="#Jboss-Marshalling-编解码工具类" class="headerlink" title="Jboss Marshalling 编解码工具类"></a><strong>Jboss Marshalling 编解码工具类</strong></h5><p>在编写之前必须先导入Jboss需要的包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MarshallingCodeCFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 创建Jboss Marshalling解码器MarshallingDecoder</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> MarshallingDecoder</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MarshallingDecoder <span class="title">buildMarshallingDecoder</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//1</span></div><div class="line"><span class="keyword">final</span> MarshallerFactory marshallerFactory = Marshalling.getProvidedMarshallerFactory(<span class="string">"serial"</span>);</div><div class="line"><span class="comment">//2</span></div><div class="line"><span class="keyword">final</span> MarshallingConfiguration configuration = <span class="keyword">new</span> MarshallingConfiguration();</div><div class="line">configuration.setVersion(<span class="number">5</span>);</div><div class="line"><span class="comment">//3</span></div><div class="line">UnmarshallerProvider provider = <span class="keyword">new</span> DefaultUnmarshallerProvider(marshallerFactory, configuration);</div><div class="line"><span class="comment">//4</span></div><div class="line">MarshallingDecoder decoder = <span class="keyword">new</span> MarshallingDecoder(provider, <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1</span>);</div><div class="line"><span class="keyword">return</span> decoder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 创建Jboss Marshalling编码器MarshallingEncoder</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> MarshallingEncoder</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MarshallingEncoder <span class="title">buildMarshallingEncoder</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">final</span> MarshallerFactory marshallerFactory = Marshalling.getProvidedMarshallerFactory(<span class="string">"serial"</span>);</div><div class="line"><span class="keyword">final</span> MarshallingConfiguration configuration = <span class="keyword">new</span> MarshallingConfiguration();</div><div class="line">configuration.setVersion(<span class="number">5</span>);</div><div class="line">MarshallerProvider provider = <span class="keyword">new</span> DefaultMarshallerProvider(marshallerFactory, configuration);</div><div class="line"><span class="comment">//5</span></div><div class="line">MarshallingEncoder encoder = <span class="keyword">new</span> MarshallingEncoder(provider);</div><div class="line"><span class="keyword">return</span> encoder;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1、首先通过Marshalling工具类的精通方法获取Marshalling实例对象 参数serial标识创建的是java序列化工厂对象。</p><p>2、创建了MarshallingConfiguration对象，配置了版本号为5 </p><p>3、根据marshallerFactory和configuration创建provider</p><p>4、构建Netty的MarshallingDecoder对象，俩个参数分别为provider和单个消息序列化后的最大长度</p><p>5、构建Netty的MarshallingEncoder对象，MarshallingEncoder用于实现序列化接口的POJO对象序列化为二进制数组</p><p>个人感觉不难都是一些固定的写法，记住每一步要做什么就好。</p><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a><strong>服务端</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"></div><div class="line">EventLoopGroup pGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">EventLoopGroup cGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line">ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">b.group(pGroup, cGroup)</div><div class="line"> .channel(NioServerSocketChannel.class)</div><div class="line"> .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)</div><div class="line"> <span class="comment">//1</span></div><div class="line"> .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</div><div class="line"> .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">//2</span></div><div class="line">sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</div><div class="line"><span class="comment">//3</span></div><div class="line">sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> ServerHandler());</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ChannelFuture cf = b.bind(<span class="number">8765</span>).sync();</div><div class="line"></div><div class="line">cf.channel().closeFuture().sync();</div><div class="line">pGroup.shutdownGracefully();</div><div class="line">cGroup.shutdownGracefully();</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里其实没什么改动，跟我上一篇文章的<a href="http://example.com/" title="optional title" target="_blank" rel="external">Netty流数据的传输处理</a>差不多，</p><p>1、设置日志（这里需要自己导入log4j.jar）  当然你也可以不设置打印日记</p><p>2、这是我们写的Jboss Marshalling工具类的解码器MarshallingDecoder</p><p>3、这是我们写的Jboss Marshalling工具类的编码器MarshallingEncoder  </p><p>其它代码说明可以去看我的<a href="http://blog.csdn.net/qq_33524158/article/details/78620584" target="_blank" rel="external">Netty第一个程序</a>的那篇文章。</p><h5 id="服务端业务处理"><a href="#服务端业务处理" class="headerlink" title="服务端业务处理"></a><strong>服务端业务处理</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">Req req = (Req)msg;</div><div class="line">System.out.println(<span class="string">"Server : "</span> + req.getId() + <span class="string">", "</span> + req.getName() + <span class="string">", "</span> + req.getRequestMessage());</div><div class="line">Resp resp = <span class="keyword">new</span> Resp();</div><div class="line">resp.setId(req.getId());</div><div class="line">resp.setName(<span class="string">"resp"</span> + req.getId());</div><div class="line">resp.setResponseMessage(<span class="string">"响应内容"</span> + req.getId());</div><div class="line">ctx.writeAndFlush(resp);<span class="comment">//.addListener(ChannelFutureListener.CLOSE);</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里业务逻辑主要是将客户端传过来的信息进行打印，然后将数据传入返回的实体类Resp，将实体类Resp返回给客户端</p><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a><strong>客户端</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"></div><div class="line">EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">Bootstrap b = <span class="keyword">new</span> Bootstrap();</div><div class="line">b.group(group)</div><div class="line"> .channel(NioSocketChannel.class)</div><div class="line"> .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">//1  解码</span></div><div class="line">sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingDecoder());</div><div class="line"><span class="comment">//2  编码</span></div><div class="line">sc.pipeline().addLast(MarshallingCodeCFactory.buildMarshallingEncoder());</div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> ClientHandler());</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ChannelFuture cf = b.connect(<span class="string">"127.0.0.1"</span>, <span class="number">8765</span>).sync();</div><div class="line"></div><div class="line"><span class="comment">//3</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ )&#123;</div><div class="line">Req req = <span class="keyword">new</span> Req();</div><div class="line">req.setId(<span class="string">""</span> + i);</div><div class="line">req.setName(<span class="string">"pro"</span> + i);</div><div class="line">req.setRequestMessage(<span class="string">"数据信息"</span> + i);</div><div class="line">cf.channel().writeAndFlush(req);</div><div class="line">&#125;</div><div class="line"></div><div class="line">cf.channel().closeFuture().sync();</div><div class="line">group.shutdownGracefully();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里编解码跟服务端一样，不再详细说，不懂可以回头看看服务端的。</p><p>3、for循环向服务端发送五条消息</p><h5 id="客户端业务处理"><a href="#客户端业务处理" class="headerlink" title="客户端业务处理"></a><strong>客户端业务处理</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">Resp resp = (Resp)msg;</div><div class="line">System.out.println(<span class="string">"Client : "</span> + resp.getId() + <span class="string">", "</span> + resp.getName() + <span class="string">", "</span> + resp.getResponseMessage());</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">ReferenceCountUtil.release(msg);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里很简单，没什么好说的了。</p><p>好！到这目前所有代码都编写完了来测试一下效果。</p><p>服务端启动打印如图：</p><p><img src="http://img.blog.csdn.net/20171124164759405?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>客户端启动打印如图： </p><p><img src="http://img.blog.csdn.net/20171124164808165?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>客户端启动后服务端的打印：</p><p><img src="http://img.blog.csdn.net/20171124164816168?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>源代码：<a href="https://github.com/hfbin/Thread_Socket/tree/master/Socket/serializable" target="_blank" rel="external">https://github.com/hfbin/Thread_Socket/tree/master/Socket/serializable</a></p><p>转发者必须注明转发链接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概念理解&quot;&gt;&lt;a href=&quot;#概念理解&quot; class=&quot;headerlink&quot; title=&quot;概念理解&quot;&gt;&lt;/a&gt;&lt;strong&gt;概念理解&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;编解码技术，说白了
      
    
    </summary>
    
      <category term="网络编程" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java网络编程之Netty流数据的传输处理（五）</title>
    <link href="http://yoursite.com/2017/11/24/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BNetty%E6%B5%81%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BC%A0%E8%BE%93%E5%A4%84%E7%90%86%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/24/java网络编程之Netty流数据的传输处理（五）/</id>
    <published>2017-11-24T02:43:12.000Z</published>
    <updated>2018-01-06T06:10:51.258Z</updated>
    
    <content type="html"><![CDATA[<p>a</p><h3>Netty流数据的传输处理</h3><p></p><h4 id="Socket-Buffer的缺陷"><a href="#Socket-Buffer的缺陷" class="headerlink" title="Socket Buffer的缺陷"></a><strong>Socket Buffer的缺陷</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于例如TCP/IP这种基于流的传输协议实现，接收到的数据会被存储在socket的接受缓冲区内。不幸的是，这种基于流的传输缓冲区并不是一个包队列，而是一个字节队列。这意味着，即使你以两个数据包的形式发送了两条消息，操作系统却不会把它们看成是两条消息，而仅仅是一个批次的字节序列。因此，在这种情况下我们就无法保证收到的数据恰好就是远程节点所发送的数据。例如，让我们假设一个操作系统的TCP/IP堆栈收到了三个数据包：</p><table><thead><tr><th style="text-align:center">ABC</th><th style="text-align:center">DEF</th><th style="text-align:center">GHI</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于这种流传输协议的普遍性质，在你的应用中有较高的可能会把这些数据读取为另外一种形式：</p><table><thead><tr><th style="text-align:center">ABCDE</th><th style="text-align:center">FG</th><th style="text-align:center">H</th><th style="text-align:center">I</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此对于数据的接收方，不管是服务端还是客户端，应当重构这些接收到的数据，让其变成一种可让你的应用逻辑易于理解的更有意义的数据结构。在上面所述的这个例子中，接收到的数据应当重构为下面的形式：</p><table><thead><tr><th style="text-align:center">ABC</th><th style="text-align:center">DEF</th><th style="text-align:center">GHI</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><h4 id="第一种解决方案（使用特殊字符分割）"><a href="#第一种解决方案（使用特殊字符分割）" class="headerlink" title="第一种解决方案（使用特殊字符分割）"></a><strong>第一种解决方案（使用特殊字符分割）</strong></h4><p>Netty提供了一个分隔符类DelimiterBasedFrameDecoder（自定义分隔符）  </p><p>下面的开发我是居于我的Netty第一个开发程序来讲的，没看过我的这篇文章可以先看看，想信你在Netty第一个开发程序会捕获很多你想不到的知识。</p><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a><strong>服务端</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"><span class="comment">//1 创建2个线程，一个是负责接收客户端的连接。一个是负责进行数据传输的</span></div><div class="line">EventLoopGroup pGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">EventLoopGroup cGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line"><span class="comment">//2 创建服务器辅助类</span></div><div class="line">ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">b.group(pGroup, cGroup)</div><div class="line"> .channel(NioServerSocketChannel.class)</div><div class="line"> .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)</div><div class="line"> .option(ChannelOption.SO_SNDBUF, <span class="number">32</span>*<span class="number">1024</span>)</div><div class="line"> .option(ChannelOption.SO_RCVBUF, <span class="number">32</span>*<span class="number">1024</span>)</div><div class="line"> .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="comment">//1 设置特殊分隔符  </span></div><div class="line">ByteBuf buf = Unpooled.copiedBuffer(<span class="string">"$_"</span>.getBytes());</div><div class="line"><span class="comment">//2</span></div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> DelimiterBasedFrameDecoder(<span class="number">1024</span>, buf));</div><div class="line"><span class="comment">//3 设置字符串形式的解码</span></div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> ServerHandler());</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//4 绑定连接</span></div><div class="line">ChannelFuture cf = b.bind(<span class="number">8765</span>).sync();</div><div class="line"></div><div class="line"><span class="comment">//等待服务器监听端口关闭</span></div><div class="line">cf.channel().closeFuture().sync();</div><div class="line">pGroup.shutdownGracefully();</div><div class="line">cGroup.shutdownGracefully();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>关于EventLoopGroup、ServerBootstrap等等之类的我都在<a href="http://blog.csdn.net/qq_33524158/article/details/78620584" title="optional title" target="_blank" rel="external">Netty的第一个程序</a>都讲得很清楚了，需要了解的可以参考我的第一篇文章。</p><p>代码说明：</p><p>1、 Unpooled.copiedBuffer(“\$<em>“.getBytes())  这个是设置特殊分隔符返回的是Netty中的ByteBuf类型这里我设置的是  \$</em> </p><p>2、DelimiterBasedFrameDecoder（）是处理分隔符的类</p><p>3、StringDecoder() 设置字符串形式的解码</p><p>注意这里使用了StringDecoder()解码成字符串形式，并不像在“<a href="http://blog.csdn.net/qq_33524158/article/details/78620584" title="optional title" target="_blank" rel="external">Netty的第一个程序</a>”那种方式去转换成字符串。</p><h5 id="服务端业务处理"><a href="#服务端业务处理" class="headerlink" title="服务端业务处理"></a><strong>服务端业务处理</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">System.out.println(<span class="string">" server channel active... "</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">String request = (String)msg;</div><div class="line">System.out.println(<span class="string">"Server :"</span> + msg);</div><div class="line">String response = <span class="string">"服务器响应："</span> + msg + <span class="string">"$_"</span>;</div><div class="line">ctx.writeAndFlush(Unpooled.copiedBuffer(response.getBytes()));</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里没什么可说的！看过我的<a href="http://blog.csdn.net/qq_33524158/article/details/78620584" title="optional title" target="_blank" rel="external">Netty的第一个程序</a>这篇文章大家都懂。</p><p>由于在服务端就使用了StringDecoder()解码成字符串形式，这里不需要用ByteBuf去转换成字符串。</p><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a><strong>客户端</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line">Bootstrap b = <span class="keyword">new</span> Bootstrap();</div><div class="line">b.group(group)</div><div class="line"> .channel(NioSocketChannel.class)</div><div class="line"> .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">//1</span></div><div class="line">ByteBuf buf = Unpooled.copiedBuffer(<span class="string">"$_"</span>.getBytes());</div><div class="line"><span class="comment">//2</span></div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> DelimiterBasedFrameDecoder(<span class="number">1024</span>, buf));</div><div class="line"><span class="comment">//3</span></div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> ClientHandler());</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ChannelFuture cf = b.connect(<span class="string">"127.0.0.1"</span>, <span class="number">8765</span>).sync();</div><div class="line"></div><div class="line">cf.channel().writeAndFlush(Unpooled.wrappedBuffer(<span class="string">"777$_"</span>.getBytes()));</div><div class="line">cf.channel().writeAndFlush(Unpooled.wrappedBuffer(<span class="string">"666$_"</span>.getBytes()));</div><div class="line">cf.channel().writeAndFlush(Unpooled.wrappedBuffer(<span class="string">"888$_"</span>.getBytes()));</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//等待客户端端口关闭</span></div><div class="line">cf.channel().closeFuture().sync();</div><div class="line">group.shutdownGracefully();</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于这里客户端也接收服务端返回的数据所以也采用了与服务端一样的处理方式。</p><p>如果你看过我的<a href="http://blog.csdn.net/qq_33524158/article/details/78620584" title="optional title" target="_blank" rel="external">Netty的第一个程序</a>文章，你会发现当时我是休眠1s再进行发送另一条的。到这目前你应该也知道我什么这样做了吧！</p><h5 id="客户端业务处理"><a href="#客户端业务处理" class="headerlink" title="客户端业务处理"></a><strong>客户端业务处理</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">System.out.println(<span class="string">"client channel active... "</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">String response = (String)msg;</div><div class="line">System.out.println(<span class="string">"Client: "</span> + response);</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">ReferenceCountUtil.release(msg);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里没什么可说的！看过我的<a href="http://blog.csdn.net/qq_33524158/article/details/78620584" title="optional title" target="_blank" rel="external">Netty的第一个程序</a>这篇文章大家都懂。</p><p>好！到这第一种解决方案就编写结束了，先启动服务端，再启动客户端</p><p>客户端打印如下：</p><p><img src="http://img.blog.csdn.net/20171124131317717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>客户端签到后服务端的打印如下：</p><p><img src="http://img.blog.csdn.net/20171124131330117?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>源码地址：<a href="https://github.com/hfbin/Thread_Socket/tree/master/Socket/ende--1" target="_blank" rel="external">https://github.com/hfbin/Thread_Socket/tree/master/Socket/ende--1</a></p><h4 id="第二种解决方案（定长）"><a href="#第二种解决方案（定长）" class="headerlink" title="第二种解决方案（定长）"></a><strong>第二种解决方案（定长）</strong></h4><p>Netty提供了一个定长类FixdeLengthFraneDecoder</p><p>使用这个定长的有个弊端：如果由多个字段比如可变长度的字段组成时这个时候并解决不了什么问题，建议使用第一个解决方案。</p><p>FixdeLengthFraneDecoder的使用跟DelimiterBasedFrameDecoder差不多，由于代码都差不多一样这里我不做太多的说明。</p><h5 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a><strong>服务端</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"><span class="comment">//创建2个线程，一个是负责接收客户端的连接。一个是负责进行数据传输的</span></div><div class="line">EventLoopGroup pGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">EventLoopGroup cGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line"><span class="comment">//创建服务器辅助类</span></div><div class="line">ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">b.group(pGroup, cGroup)</div><div class="line"> .channel(NioServerSocketChannel.class)</div><div class="line"> .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)</div><div class="line"> .option(ChannelOption.SO_SNDBUF, <span class="number">32</span>*<span class="number">1024</span>)</div><div class="line"> .option(ChannelOption.SO_RCVBUF, <span class="number">32</span>*<span class="number">1024</span>)</div><div class="line"> .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="comment">//1  设置定长字符串接收  </span></div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> FixedLengthFrameDecoder(<span class="number">3</span>));</div><div class="line"><span class="comment">//2  设置字符串形式的解码</span></div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> ServerHandler());</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//4 绑定连接</span></div><div class="line">ChannelFuture cf = b.bind(<span class="number">8765</span>).sync();</div><div class="line"></div><div class="line"><span class="comment">//等待服务器监听端口关闭</span></div><div class="line">cf.channel().closeFuture().sync();</div><div class="line">pGroup.shutdownGracefully();</div><div class="line">cGroup.shutdownGracefully();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1、FixedLengthFrameDecoder(3)  这里设置定长字符串接收具体设置多长自己定</p><p>2、StringDecoder() 设置字符串形式的解码</p><h5 id="服务端业务处理-1"><a href="#服务端业务处理-1" class="headerlink" title="服务端业务处理"></a><strong>服务端业务处理</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">System.out.println(<span class="string">" server channel active... "</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">String request = (String)msg;</div><div class="line">System.out.println(<span class="string">"Server :"</span> + msg);</div><div class="line">String response =  request ;</div><div class="line">ctx.writeAndFlush(Unpooled.copiedBuffer(response.getBytes()));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="服务端-2"><a href="#服务端-2" class="headerlink" title="服务端"></a><strong>服务端</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line">Bootstrap b = <span class="keyword">new</span> Bootstrap();</div><div class="line">b.group(group)</div><div class="line"> .channel(NioSocketChannel.class)</div><div class="line"> .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> FixedLengthFrameDecoder(<span class="number">3</span>));</div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> ClientHandler());</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ChannelFuture cf = b.connect(<span class="string">"127.0.0.1"</span>, <span class="number">8765</span>).sync();</div><div class="line"></div><div class="line">cf.channel().writeAndFlush(Unpooled.wrappedBuffer(<span class="string">"777"</span>.getBytes()));</div><div class="line">cf.channel().writeAndFlush(Unpooled.wrappedBuffer(<span class="string">"666"</span>.getBytes()));</div><div class="line">cf.channel().writeAndFlush(Unpooled.wrappedBuffer(<span class="string">"888"</span>.getBytes()));</div><div class="line"></div><div class="line"><span class="comment">//等待客户端端口关闭</span></div><div class="line">cf.channel().closeFuture().sync();</div><div class="line">group.shutdownGracefully();</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="客户端业务处理-1"><a href="#客户端业务处理-1" class="headerlink" title="客户端业务处理"></a><strong>客户端业务处理</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">System.out.println(<span class="string">"client channel active... "</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">String response = (String)msg;</div><div class="line">System.out.println(<span class="string">"Client: "</span> + response);</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">ReferenceCountUtil.release(msg);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>好！到这第二种解决方案就编写结束了，先启动服务端，再启动客户端</p><p>客户端打印如下：</p><p><img src="http://img.blog.csdn.net/20171124131343564?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>客户端签到后服务端的打印如下：</p><p><img src="http://img.blog.csdn.net/20171124131356692?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>源码地址：<a href="https://github.com/hfbin/Thread_Socket/tree/master/Socket/ende--2" target="_blank" rel="external">https://github.com/hfbin/Thread_Socket/tree/master/Socket/ende--2</a></p><p>转发者必须注明转发链接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;a&lt;/p&gt;&lt;h3&gt;Netty流数据的传输处理&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;
&lt;h4 id=&quot;Socket-Buffer的缺陷&quot;&gt;&lt;a href=&quot;#Socket-Buffer的缺陷&quot; class=&quot;headerlink&quot; title=&quot;Socket Buffer的缺陷&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="网络编程" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java网络编程之Netty第一个程序（四）</title>
    <link href="http://yoursite.com/2017/11/24/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BNetty%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/24/java网络编程之Netty第一个程序（四）/</id>
    <published>2017-11-23T17:56:11.000Z</published>
    <updated>2018-01-06T06:10:51.325Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、为什么使用Netty？"><a href="#1、为什么使用Netty？" class="headerlink" title="1、为什么使用Netty？"></a><strong>1、为什么使用Netty</strong>？</h4><h4>在介绍Netty之前先说一下为什么选择Netty？</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Netty是业界最流行的NIO框架之一，它的健壮性、功能、性能、可定制性和可扩展性在同类框架中都是首屈一指的，它已经得到成百上千的商用项目验证，例如Hadoop的RPC框架avro使用Netty作为底层通信框架。很多其它业界主流的RPC框架，也使用Netty来构建高性能的异步通信能力。</p><p>通过对Netty的分析，我们将它的优点总结如下：</p><p>1) API使用简单，开发门槛低；</p><p>2) 功能强大，预置了多种编解码功能，支持多种主流协议；</p><p>3) 定制能力强，可以通过ChannelHandler对通信框架进行灵活的扩展；</p><p>4) 性能高，通过与其它业界主流的NIO框架对比，Netty的综合性能最优；</p><p>5) 成熟、稳定，Netty修复了已经发现的所有JDK NIO BUG，业务开发人员不需要再为NIO的BUG而烦恼；</p><p>6) 社区活跃，版本迭代周期短，发现的BUG可以被及时修复，同时，更多的新功能会被加入；</p><p>7) 经历了大规模的商业应用考验，质量已经得到验证。在互联网、大数据、网络游戏、企业应用、电信软件等众多行业得到成功商用，证明了它可以完全满足不同行业的商业应用。</p><p>正是因为这些优点，Netty逐渐成为Java NIO编程的首选框架。</p><p>Netty的功能非常丰富，下图是Netty框架的组成：</p><p><img src="http://img.blog.csdn.net/20171124013326377?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="2、第一个Netty程序"><a href="#2、第一个Netty程序" class="headerlink" title="2、第一个Netty程序"></a><strong>2、第一个Netty程序</strong></h4><p>想必大家都知道每学习一个新内容第一个案例就是HelloWorld,没错下面我们来编写Nettyd的HelloWorld</p><h5 id="2-1-Netty-包下载"><a href="#2-1-Netty-包下载" class="headerlink" title="2.1 Netty 包下载"></a><strong>2.1 Netty 包下载</strong></h5><p>下载netty包，下载地址<a href="http://netty.io/" target="_blank" rel="external">http://netty.io/</a></p><h5 id="2-2-Netty客户端和服务器概述"><a href="#2-2-Netty客户端和服务器概述" class="headerlink" title="2.2 Netty客户端和服务器概述"></a><strong>2.2 Netty客户端和服务器概述</strong></h5><p> 一个Netty程序的工作图如下：<br> <img src="http://img.blog.csdn.net/20171124014209310?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从上图中可以看出，服务器会写数据到客户端并且处理多个客户端的并发连接。从理论上来说，限制程序性能的因素只有系统资源和JVM。为了方便理解，这里举了个生活例子，在山谷或高山上大声喊，你会听见回声，回声是山返回的；在这个例子中，你是客户端，山是服务器。喊的行为就类似于一个Netty客户端将数据发送到服务器，听到回声就类似于服务器将相同的数据返回给你，你离开山谷就断开了连接，但是你可以返回进行重连服务器并且可以发送更多的数据。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然将相同的数据返回给客户端不是一个典型的例子，但是客户端和服务器之间数据的来来回回的传输和这个例子是一样的。本章的例子会证明这一点，它们会越来越复杂。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;接下来后面内容将带着你完成基于Netty的客户端和服务器的应答程序。</p><h5 id="2-3-编写一个应答服务器"><a href="#2-3-编写一个应答服务器" class="headerlink" title="2.3 编写一个应答服务器"></a><strong>2.3 编写一个应答服务器</strong></h5><p>写一个Netty服务器主要由两部分组成：</p><p>•    配置服务器功能，如线程、端口</p><p>•    实现服务器处理程序，它包含业务逻辑，决定当有一个请求连接或接收数据时该做什么</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="comment">//1 创建线两个程组 </span></div><div class="line"><span class="comment">//一个是用于处理服务器端接收客户端连接的</span></div><div class="line"><span class="comment">//一个是进行网络通信的（网络读写的）</span></div><div class="line">EventLoopGroup pGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">EventLoopGroup cGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line"><span class="comment">//2 创建辅助工具类，用于服务器通道的一系列配置</span></div><div class="line">ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">b.group(pGroup, cGroup)<span class="comment">//绑定俩个线程组</span></div><div class="line"><span class="comment">//3</span></div><div class="line">.channel(NioServerSocketChannel.class)<span class="comment">//指定NIO的模式</span></div><div class="line"><span class="comment">//4</span></div><div class="line">.option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)<span class="comment">//设置tcp缓冲区</span></div><div class="line">.option(ChannelOption.SO_SNDBUF, <span class="number">32</span>*<span class="number">1024</span>)<span class="comment">//设置发送缓冲大小</span></div><div class="line">.option(ChannelOption.SO_RCVBUF, <span class="number">32</span>*<span class="number">1024</span>)<span class="comment">//这是接收缓冲大小</span></div><div class="line"><span class="comment">//5</span></div><div class="line">.option(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)<span class="comment">//保持连接</span></div><div class="line"><span class="comment">//6</span></div><div class="line">.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123; </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="comment">//在这里配置具体数据接收方法的处理</span></div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> ServerHandler());</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//7 进行绑定</span></div><div class="line">ChannelFuture cf1 = b.bind(<span class="number">8765</span>).sync();</div><div class="line"><span class="comment">// 等待关闭</span></div><div class="line">cf1.channel().closeFuture().sync();</div><div class="line">pGroup.shutdownGracefully();</div><div class="line">cGroup.shutdownGracefully();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1、NioEventLoopGroup 是用来处理I/O操作的多线程事件循环器，Netty提供了许多不同的EventLoopGroup的实现用来处理不同传输协议。在这个例子中我们实现了一个服务端的应用，因此会有2个NioEventLoopGroup会被使用。第一个经常被叫做‘boss’，用来接收进来的连接。第二个经常被叫做‘worker’，用来处理已经被接收的连接，一旦‘boss’接收到连接，就会把连接信息注册到‘worker’上。如何知道多少个线程已经被使用，如何映射到已经创建的Channels上都需要依赖于EventLoopGroup的实现，并且可以通过构造函数来配置他们的关系。</p><p>2、ServerBootstrap 是一个启动NIO服务的辅助启动类。你可以在这个服务中直接使用Channel，但是这会是一个复杂的处理过程，在很多情况下你并不需要这样做。</p><p>3、这里我们指定使用NioServerSocketChannel类来举例说明一个新的Channel如何接收进来的连接。</p><p>4、你可以设置这里指定的通道实现的配置参数。我们正在写一个TCP/IP的服务端，因此我们被允许设置socket的参数选项比如tcpNoDelay和keepAlive。请参考ChannelOption和详细的ChannelConfig实现的接口文档以此可以对ChannelOptions的有一个大概的认识。</p><p>5、你关注过option()和childOption()吗？option()是提供给NioServerSocketChannel用来接收进来的连接。childOption()是提供给由父管道ServerChannel接收到的连接，在这个例子中也是NioServerSocketChannel。</p><p>6、这里的事件处理类经常会被用来处理一个最近的已经接收的Channel。ChannelInitializer是一个特殊的处理类，他的目的是帮助使用者配置一个新的Channel。也许你想通过增加一些处理类比如DiscardServerHandle来配置一个新的Channel或者其对应的ChannelPipeline来实现你的网络程序。当你的程序变的复杂时，可能你会增加更多的处理类到pipline上，然后提取这些匿名类到最顶层的类上。</p><p>7、我们继续，剩下的就是绑定端口然后启动服务。这里我们在机器上绑定了机器所有网卡上的8080端口。当然现在你可以多次调用bind()方法(基于不同绑定地址)。</p><p>本小节重点内容：</p><p>•    创建ServerBootstrap实例来引导绑定和启动服务器</p><p>•    创建NioEventLoopGroup对象来处理事件，如接受新连接、接收数据、写数据等等</p><p>•    指定InetSocketAddress，服务器监听此端口</p><p>•    设置childHandler执行所有的连接请求</p><p>•    都设置完毕了，最后调用ServerBootstrap.bind() 方法来绑定服务器</p><h5 id="2-4-实现服务器业务逻辑"><a href="#2-4-实现服务器业务逻辑" class="headerlink" title="2.4 实现服务器业务逻辑"></a><strong>2.4 实现服务器业务逻辑</strong></h5><p>服务器业务逻辑必须继承ChannelInboundHandlerAdapter并且重写channelRead方法，这个方法在任何时候都会被调用来接收数据，接收到的是字节，我会使用Netty的ByteBufa来将字节转换成字符串。</p><p>下面是handler的实现，其实现的功能是将客户端发给服务器的数据返回给客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">System.out.println(<span class="string">"server channel active... "</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">ByteBuf buf = (ByteBuf) msg;</div><div class="line"><span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</div><div class="line">buf.readBytes(req);</div><div class="line">String body = <span class="keyword">new</span> String(req, <span class="string">"utf-8"</span>);</div><div class="line">System.out.println(<span class="string">"Server :"</span> + body );</div><div class="line">String response = <span class="string">"进行返回给客户端的响应："</span> + body ;</div><div class="line">ctx.writeAndFlush(Unpooled.copiedBuffer(response.getBytes()));</div><div class="line"><span class="comment">//接收到客户端的数据立马断掉客户端连接 服务端还是启动着</span></div><div class="line"><span class="comment">//.addListener(ChannelFutureListener.CLOSE);</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">System.out.println(<span class="string">"读完了"</span>);</div><div class="line">ctx.flush();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable t)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">ctx.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServerHandler 继承自 ChannelHandlerAdapter，这个类实现了ChannelHandler接口，ChannelHandler提供了许多事件处理的接口方法，然后你可以覆盖这些方法。现在仅仅只需要继承ChannelHandlerAdapter类而不是你自己去实现接口方法。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Netty使用多个ChannelHandler来达到对事件处理的分离，因为可以很容的添加、更新、删除业务逻辑处理handler。Handler很简单，它的每个方法都可以被重写，它的所有的方法中只有channelRead方法是必须要重写的。</p><h5 id="2-5-编写应答程序的客户端"><a href="#2-5-编写应答程序的客户端" class="headerlink" title="2.5 编写应答程序的客户端"></a><strong>2.5 编写应答程序的客户端</strong></h5><p>服务器写好了，现在来写一个客户端连接服务器。应答程序的客户端包括以下几步：</p><p>•    连接服务器</p><p>•    写数据到服务器</p><p>•    等待接受服务器返回相同的数据</p><p>•    关闭连接</p><p>在Netty中,编写服务端和客户端最大的并且唯一不同的使用了不同的BootStrap和Channel的实现，客户端需同时指定host和port来告诉客户端连接哪个服务器。看下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"></div><div class="line">EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"><span class="comment">//1</span></div><div class="line">Bootstrap b = <span class="keyword">new</span> Bootstrap();</div><div class="line"><span class="comment">//2</span></div><div class="line">b.group(group)</div><div class="line"><span class="comment">//3</span></div><div class="line">.channel(NioSocketChannel.class)</div><div class="line"><span class="comment">//4</span></div><div class="line">.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="comment">//在这里配置具体数据接收方法的处理</span></div><div class="line">sc.pipeline().addLast(<span class="keyword">new</span> ClientHandler());</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//5</span></div><div class="line">ChannelFuture cf1 = b.connect(<span class="string">"127.0.0.1"</span>, <span class="number">8765</span>).sync();</div><div class="line"><span class="comment">//发送消息</span></div><div class="line">cf1.channel().writeAndFlush(Unpooled.copiedBuffer(<span class="string">"777"</span>.getBytes()));</div><div class="line">Thread.sleep(<span class="number">1000</span>);</div><div class="line">cf1.channel().writeAndFlush(Unpooled.copiedBuffer(<span class="string">"666"</span>.getBytes()));</div><div class="line">Thread.sleep(<span class="number">1000</span>);</div><div class="line">cf1.channel().writeAndFlush(Unpooled.copiedBuffer(<span class="string">"888"</span>.getBytes()));</div><div class="line"></div><div class="line">cf1.channel().closeFuture().sync();</div><div class="line"></div><div class="line"><span class="comment">//等待关闭</span></div><div class="line">group.shutdownGracefully();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1、BootStrap和ServerBootstrap类似,不过他是对非服务端的channel而言，比如客户端或者无连接传输模式的channel。</p><p>2、如果你只指定了一个EventLoopGroup，那他就会即作为一个‘boss’线程，也会作为一个‘workder’线程，尽管客户端不需要使用到‘boss’线程。</p><p>3、代替NioServerSocketChannel的是NioSocketChannel,这个类在客户端channel被创建时使用。</p><p>4、不像在使用ServerBootstrap时需要用childOption()方法，因为客户端的SocketChannel没有父channel的概念。</p><p>5、我们用connect()方法代替了bind()方法。</p><p>创建启动一个客户端包含下面几步：</p><p>•    创建Bootstrap对象用来引导启动客户端</p><p>•    创建EventLoopGroup对象并设置到Bootstrap中，EventLoopGroup可以理解为是一个线程池，这个线程池用来处理连接、接受数据、发送数据</p><p>•    创建InetSocketAddress并设置到Bootstrap中，InetSocketAddress是指定连接的服务器地址</p><p>•    添加一个ChannelHandler，客户端成功连接服务器后就会被执行</p><p>•    调用Bootstrap.connect()来连接服务器</p><p>•    最后关闭EventLoopGroup来释放资源</p><p>发消息这里我发了三条，每发一条是等待1秒的。至于为什么等1秒，或许下一篇文章你就懂了，如果不等待1秒会出现TCP的粘包、拆包问题。</p><p>你可以试一试发三条消息不设置等待时候服务端是一次打印完的还是分几次打印的。</p><p>记得每发一条数据都要冲刷一下，即：<code>cf1.channel().flush()</code></p><p>上面我使用的是<code>cf1.channel().writeAndFlush(....)</code> 这个相当于<code>cf1.channel().write(...);</code>  <code>cf1.channel().flush();</code></p><h5 id="2-6-实现客户端的业务逻辑"><a href="#2-6-实现客户端的业务逻辑" class="headerlink" title="2.6 实现客户端的业务逻辑"></a><strong>2.6 实现客户端的业务逻辑</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span></span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">ByteBuf buf = (ByteBuf) msg;</div><div class="line"><span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</div><div class="line">buf.readBytes(req);</div><div class="line">String body = <span class="keyword">new</span> String(req, <span class="string">"utf-8"</span>);</div><div class="line">System.out.println(<span class="string">"Client :"</span> + body );</div><div class="line">String response = <span class="string">"收到服务器端的返回信息："</span> + body;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">ReferenceCountUtil.release(msg);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">ctx.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个客户端的业务逻辑跟服务端的业务逻辑基本上差不多，都需要使用ByteBuf来将字节转换成我们人读得懂得字符串。</p><p>客户端的编写完了，下面让我们来测试一下</p><p>服务端启动（图省略）</p><p>客户端打印如图：<br><img src="http://img.blog.csdn.net/20171124014402967?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>客户端启动后服务端的打印：</p><p><img src="http://img.blog.csdn.net/20171124014422961?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>好！Netty的第一个程序到这就结束了！！！</p><p>源代码<a href="https://github.com/hfbin/Thread_Socket/tree/master/Socket/helloworld" target="_blank" rel="external">https://github.com/hfbin/Thread_Socket/tree/master/Socket/helloworld</a></p><p>转发者必须注明转发链接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1、为什么使用Netty？&quot;&gt;&lt;a href=&quot;#1、为什么使用Netty？&quot; class=&quot;headerlink&quot; title=&quot;1、为什么使用Netty？&quot;&gt;&lt;/a&gt;&lt;strong&gt;1、为什么使用Netty&lt;/strong&gt;？&lt;/h4&gt;&lt;h4&gt;在介绍Netty
      
    
    </summary>
    
      <category term="网络编程" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java网络编程之AIO/NIO2.0（三）</title>
    <link href="http://yoursite.com/2017/11/23/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BAIO%E5%8D%B3NIO2.0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/23/java网络编程之AIO即NIO2.0（三）/</id>
    <published>2017-11-22T16:47:36.000Z</published>
    <updated>2018-01-06T06:10:52.529Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a><strong>概念理解</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AIO编程，在NIO基础之上引入了异步通道的概念，并提供了异步文件和异步套接字通道的实现，从而在真正意义上实现了异步非阻塞，之前我们学习的NIO只是非阻寒而并非异步。而AIO它不需要通过多路复用器对注册的通道进行轮询操作即可实现异步读写，从而简化了NIO编程模型。也可以称之为NIO2.0，这种模式才真正的属于我们异步非阻寒的模型。</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a><strong>案例</strong></h4><p>Server.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line"><span class="comment">//线程池</span></div><div class="line"><span class="keyword">private</span> ExecutorService executorService;</div><div class="line"><span class="comment">//线程组</span></div><div class="line"><span class="keyword">private</span> AsynchronousChannelGroup threadGroup;</div><div class="line"><span class="comment">//服务器通道</span></div><div class="line"><span class="keyword">public</span> AsynchronousServerSocketChannel assc;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//创建一个缓存池</span></div><div class="line">executorService = Executors.newCachedThreadPool();</div><div class="line"><span class="comment">//创建线程组</span></div><div class="line">threadGroup = AsynchronousChannelGroup.withCachedThreadPool(executorService, <span class="number">1</span>);</div><div class="line"><span class="comment">//创建服务器通道</span></div><div class="line">assc = AsynchronousServerSocketChannel.open(threadGroup);</div><div class="line"><span class="comment">//进行绑定</span></div><div class="line">assc.bind(<span class="keyword">new</span> InetSocketAddress(port));</div><div class="line"></div><div class="line">System.out.println(<span class="string">"server start , port : "</span> + port);</div><div class="line"><span class="comment">//进行阻塞</span></div><div class="line">assc.accept(<span class="keyword">this</span>, <span class="keyword">new</span> ServerCompletionHandler());</div><div class="line"><span class="comment">//一直阻塞 不让服务器停止</span></div><div class="line">Thread.sleep(Integer.MAX_VALUE);</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Server server = <span class="keyword">new</span> Server(<span class="number">8765</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面的代码都有注释，学了NIO相信这个步骤你也有所了解，不了解NIO的可以看我的上一篇文章。</p><p>ServerCompletionHandler.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerCompletionHandler</span> <span class="keyword">implements</span> <span class="title">CompletionHandler</span>&lt;<span class="title">AsynchronousSocketChannel</span>, <span class="title">Server</span>&gt; </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(AsynchronousSocketChannel asc, Server attachment)</span> </span>&#123;</div><div class="line"><span class="comment">//当有下一个客户端接入的时候 直接调用Server的accept方法，这样反复执行下去，保证多个客户端都可以阻塞</span></div><div class="line">attachment.assc.accept(attachment, <span class="keyword">this</span>);</div><div class="line">read(asc);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">final</span> AsynchronousSocketChannel asc)</span> </span>&#123;</div><div class="line"><span class="comment">//读取数据</span></div><div class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line">asc.read(buf, buf, <span class="keyword">new</span> CompletionHandler&lt;Integer, ByteBuffer&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Integer resultSize, ByteBuffer attachment)</span> </span>&#123;</div><div class="line"><span class="comment">//进行读取之后,重置标识位</span></div><div class="line">attachment.flip();</div><div class="line"><span class="comment">//获得读取的字节数</span></div><div class="line">System.out.println(<span class="string">"Server -&gt; "</span> + <span class="string">"收到客户端的数据长度为:"</span> + resultSize);</div><div class="line"><span class="comment">//获取读取的数据</span></div><div class="line">String resultData = <span class="keyword">new</span> String(attachment.array()).trim();</div><div class="line">System.out.println(<span class="string">"Server -&gt; "</span> + <span class="string">"收到客户端的数据信息为:"</span> + resultData);</div><div class="line">String response = <span class="string">"服务器响应, 收到了客户端发来的数据: "</span> + resultData;</div><div class="line">write(asc, response);</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</div><div class="line">exc.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(AsynchronousSocketChannel asc, String response)</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line">buf.put(response.getBytes());</div><div class="line">buf.flip();</div><div class="line">asc.write(buf).get();</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, Server attachment)</span> </span>&#123;</div><div class="line">exc.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里ServerCompletionHandler必须实现CompletionHandler接口</p><p>CompletionHandler有两个方法，分别是：</p><p>1)  public void completed(AsynchronousSocketChannel asc, Server attachment)</p><p>2) public void failed(Throwable exc, Server attachment)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面我们分别对这两个接口的实现进行分析：首先看completed接口的实现，我们从attachment获取成员变量AsynchronousServerSocketChannel，然后继续调用它的accept方法。可能读者在此可能会心存疑惑，既然已经接收客户端成功了，为什么还要再次调用accept方法呢？原因是这样的：当我们调用AsynchronousServerSocketChannel的accept方法后，如果有新的客户端连接接入，系统将回调我们传入的CompletionHandler实例的completed方法，表示新的客户端已经接入成功，因为一个AsynchronousServerSocketChannel可以接收成千上万个客户端，所以我们需要继续调用它的accept方法，接收其它的客户端连接，最终形成一个循环。每当接收一个客户读连接成功之后，再异步接收新的客户端连接。</p><p>Client.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//创建客户端通道</span></div><div class="line"><span class="keyword">private</span> AsynchronousSocketChannel asc ;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">//打开通道</span></div><div class="line">asc = AsynchronousSocketChannel.open();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//连接通道</span></div><div class="line">asc.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8765</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String request)</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">//往服务端发内容</span></div><div class="line">asc.write(ByteBuffer.wrap(request.getBytes())).get();</div><div class="line"><span class="comment">//读取服务端的响应</span></div><div class="line">read();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">asc.read(buf).get();</div><div class="line">buf.flip();</div><div class="line"><span class="keyword">byte</span>[] respByte = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.remaining()];</div><div class="line">buf.get(respByte);</div><div class="line">System.out.println(<span class="keyword">new</span> String(respByte,<span class="string">"utf-8"</span>).trim());</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//做个死循环让这个程序不要停下来</span></div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">Client c1 = <span class="keyword">new</span> Client();</div><div class="line">c1.connect();</div><div class="line"></div><div class="line">Client c2 = <span class="keyword">new</span> Client();</div><div class="line">c2.connect();</div><div class="line"></div><div class="line">Client c3 = <span class="keyword">new</span> Client();</div><div class="line">c3.connect();</div><div class="line"></div><div class="line"><span class="keyword">new</span> Thread(c1, <span class="string">"c1"</span>).start();</div><div class="line"><span class="keyword">new</span> Thread(c2, <span class="string">"c2"</span>).start();</div><div class="line"><span class="keyword">new</span> Thread(c3, <span class="string">"c3"</span>).start();</div><div class="line"></div><div class="line">Thread.sleep(<span class="number">1000</span>);</div><div class="line"></div><div class="line">c1.write(<span class="string">"c1 aaa"</span>);</div><div class="line">c2.write(<span class="string">"c2 bbbb"</span>);</div><div class="line">c3.write(<span class="string">"c3 ccccc"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>服务端运行结果：</p><p><img src="http://img.blog.csdn.net/20171123113013909?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>客户端运行结果：</p><p><img src="http://img.blog.csdn.net/20171123113022029?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>客户端运行后服务端的响应结果：</p><p><img src="http://img.blog.csdn.net/20171123113030878?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>我们来看一下AsynchronousSocketChannel 底层实现了 读写操作  如下方法：</p><p>public abstract Future<integer> write(ByteBuffer src, long position);</integer></p><p>public abstract Future<integer> read(ByteBuffer dst);</integer></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们发现AIO不需要像NIO编程那样创建一个独立的IO线程处理读写操作，对于AsynchronousServerSocketChannel和AsynchronousSocketChannel，它们都由JDK底层的线程池负责回调并驱动读写操作。正因为如此，基于NIO2.0新的异步非阻塞Channel进行编程比NIO编程更简单。</p><h4 id="BIO-NIO-AIO总结"><a href="#BIO-NIO-AIO总结" class="headerlink" title="BIO NIO AIO总结"></a><strong>BIO NIO AIO总结</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好!到这目前为止 BIO NIO AIO(NIO2.0)都说完了，来总结一下他们之间的区别：</p><blockquote><p>BIO：同步阻塞</p><p>NIO：同步非阻塞</p><p>AIO(NIO2.0)：异步非阻塞</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IO (BIO)和NIO/NIO2.0的区别：其本质就是阻塞和非阻塞的区别</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;阻塞概念：应用程序在获取网络数据的时候，如果网络传输数据很慢，那么程序就一直等着，直到传输完毕为止。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;非阻塞概念；应用程序直接可以获取己经准备就绪好的数据，无需等待。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同步和异步：同步和异步一般是面向操作系统与用程序对操作的层面上来区别的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同步时，应用程序会直接参与IO读写操作，并且我们的应用程序会直接阻塞到某一个方法上，直到数据准备就绪；或者采用轮询的策略实时检查数据的就绪状态，如果就绪获取数据。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;异步时，则所有IO读写操作交给操作系统处理。与我们的应用程序没有直接关系，我们程序不需要关心IO读写。当作系统完成了IO读写操作时，会给我们应用程序发送通知，我们的应用程序直接拿走数据即可。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同步说的是你的server服务器端的执行方式</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;阻塞说的是具体的技术，接收数据的方式、状态（IO、NIO）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NIO/NIO2.0自我感觉比起BIO好多了，但是 NIO/NIO2.0 API繁杂，用起来我个人感觉有点恶心，不易理解。开发出高质量的NIO/NIO2.0程序并不是一件简单的事情，除去NIO固有的复杂性和BUG不谈，作为一个NIO/NIO2.0服务端需要能够处理网络的闪断、客户端的重复接入、客户端的安全认证、消息的编解码、半包读写等等，如果你没有足够的NIO/NIO2.0编程经验积累，一个NIO/NIO2.0框架的稳定往往需要半年甚至更长的时间。更为糟糕的是一旦在生产环境中发生问题，往往会导致跨节点的服务调用中断，严重的可能会导致整个集群环境都不可用，需要重启服务器，这种非正常停机会带来巨大的损失。</p><h4 id="不选择JAVA原生NIO-NIO2-0编程的原因"><a href="#不选择JAVA原生NIO-NIO2-0编程的原因" class="headerlink" title="不选择JAVA原生NIO/NIO2.0编程的原因"></a><strong>不选择JAVA原生NIO/NIO2.0编程的原因</strong></h4><p>1) NIO的类库和API繁杂，使用麻烦，你需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等；</p><p>2) 需要具备其它的额外技能做铺垫，例如熟悉Java多线程编程，因为NIO编程涉及到Reactor模式，你必须对多线程和网路编程非常熟悉，才能编写出高质量的NIO程序；</p><p>3) 可靠性能力补齐，工作量和难度都非常大。例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流的处理等等，NIO编程的特点是功能开发相对容易，但是可靠性能力补齐工作量和难度都非常大；</p><p>4) JDK NIO的BUG，例如臭名昭著的epoll bug，它会导致Selector空轮询，最终导致CPU 100%。官方声称在JDK1.6版本的update18修复了该问题，但是直到JDK1.7版本该问题仍旧存在，只不过该bug发生概率降低了一些而已，它并没有被根本解决。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好！说到这相信大家也知道我的用心，我们可以使用NIO框架Netty来进行NIO编程，它既可以作为客户端也可以作为服务端，同时支持UDP和异步文件传输，功能非常强大。</p><p>后面我会写专门的文章来介绍Netty的使用。</p><p>转发者必须注明转发链接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概念理解&quot;&gt;&lt;a href=&quot;#概念理解&quot; class=&quot;headerlink&quot; title=&quot;概念理解&quot;&gt;&lt;/a&gt;&lt;strong&gt;概念理解&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AIO编程，在NI
      
    
    </summary>
    
      <category term="网络编程" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java网络编程之NIO（二）</title>
    <link href="http://yoursite.com/2017/11/22/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BNIO%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/22/java网络编程之NIO（二）/</id>
    <published>2017-11-22T15:40:17.000Z</published>
    <updated>2018-01-06T06:11:03.872Z</updated>
    
    <content type="html"><![CDATA[<h4 id="NIO类库简介"><a href="#NIO类库简介" class="headerlink" title="NIO类库简介"></a><strong>NIO类库简介</strong></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在介绍NIO编程之前，我们首先需要澄清一个概念，NIO到底是什么的简称？有人称之为New IO，因为它相对于之前的IO类库是新增的，所以被称为New IO，这是它的官方叫法。但是，由于之前老的IO类库是阻塞IO，New IO类库的目标就是要让JAVA支持非阻塞IO，所以，更多的人喜欢称之为非阻塞IO（Non-block IO），由于非阻塞IO更能够体现NIO的特点，所以本书使用的NIO都指的是非阻塞IO。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与Socket类和ServerSocket类相对应，NIO也提供了SocketChannel和ServerSocketChannel两种不同的套接字通道实现。这两种新增的通道都支持阻塞和非阻塞两种模式。阻塞模式使用非常简单，但是性能和可靠性都不好，非阻塞模式正好相反。开发人员一般可以根据自己的需要来选择合适的模式，一般来说，低负载、低并发的应用程序可以选择同步阻塞IO以降低编程复杂度。但是对于高负载、高并发的网络应用，需要使用NIO的非阻塞模式进行开发。</p><p>NIO模型图：</p><p><img src="http://img.blog.csdn.net/20171123004537500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>学习NIO编程，我们首先要了解几个概念：</p><p>Buffer（缓冲区）、Channel (管道、通道）Selector（选择器、多路复用器）</p><p>下面我会一一介绍：</p><h5 id="Buffer（缓冲区）"><a href="#Buffer（缓冲区）" class="headerlink" title="Buffer（缓冲区）"></a><strong>Buffer（缓冲区）</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Buffer是一个对象，它包含一些要写入或者要读取的数据。在NIO类库中加入Buffer对象，体现了新库与原IO的一个重要的区别。在面向流的IO中，可以将数据直接写入或读取到Stream对象中。在NIO库中，所有数据都是用缓冲区处理的（读写）。缓冲区实质上是一个数组，通常它是一个字节数组(ByteBuffer)，也可以使用他类型的数组。这个数组为缓冲区提供了数据的访问读写等操作属性，如位置、容量、上限等概念，参考api文档。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Buffer类型：我们最常用的就是ByteBuffer，实际上每一种java基木类型都对于了一种缓存区（除了Boolean类型）,如下所示：</p><blockquote><p>ByteBuffer：字节缓冲区<br>CharBuffer：字符缓冲区<br>ShortBuffer：短整型缓冲区<br>IntBuffer：整形缓冲区<br>LongBuffer：长整形缓冲区<br>FloatBuffer：浮点型缓冲区<br>DoubleBuffer：双精度浮点型缓冲区</p></blockquote><p>缓冲区的类图继承关系如下所示：<br><img src="http://img.blog.csdn.net/20171122233643749?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每一个Buffer类都是Buffer接口的一个子实例。除了 ByteBuffer，每一个 Buffer 类都有完全一样的操作，只是它们所处理的数据类型不一样。因为大多数标准I/O操作都使用ByteBuffer，所以它除了具有一般缓冲区的操作之外还提供一些特有的操作，方便网络读写。</p><p>下面有个小例子介绍Buffer类型使用。虽然不是很详细但是足够你了解使用了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBuffer</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">//Buffer很恶心你慢慢研究就会发现他的恶心之处  ， 好了 下面好好享受Buffer</span></div><div class="line"><span class="comment">// 1 基本操作</span></div><div class="line"><span class="comment">//创建指定长度的缓冲区</span></div><div class="line">IntBuffer buf = IntBuffer.allocate(<span class="number">10</span>);</div><div class="line">buf.put(<span class="number">13</span>);<span class="comment">// position位置：0 - &gt; 1</span></div><div class="line">buf.put(<span class="number">21</span>);<span class="comment">// position位置：1 - &gt; 2</span></div><div class="line">buf.put(<span class="number">35</span>);<span class="comment">// position位置：2 - &gt; 3</span></div><div class="line"><span class="comment">//把位置复位为0，也就是position位置：3 - &gt; 0   建议每次put()完数据都flip()一下。</span></div><div class="line">buf.flip();</div><div class="line">System.out.println(<span class="string">"使用flip复位："</span> + buf);</div><div class="line">System.out.println(<span class="string">"容量为: "</span> + buf.capacity());<span class="comment">//容量一旦初始化后不允许改变（warp方法包裹数组除外）</span></div><div class="line">System.out.println(<span class="string">"限制为: "</span> + buf.limit());<span class="comment">//由于只装载了三个元素,所以可读取或者操作的元素为3 则limit=3</span></div><div class="line"></div><div class="line"></div><div class="line">System.out.println(<span class="string">"获取下标为1的元素："</span> + buf.get(<span class="number">1</span>));</div><div class="line">System.out.println(<span class="string">"get(index)方法，position位置不改变："</span> + buf);</div><div class="line">buf.put(<span class="number">1</span>, <span class="number">4</span>); <span class="comment">//下标为1的参数变为4    12 --&gt;  4</span></div><div class="line">buf.flip();</div><div class="line">System.out.println(<span class="string">"put(index, change)方法，position位置不变："</span> + buf);;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buf.limit(); i++) &#123;</div><div class="line"><span class="comment">//调用get方法会使其缓冲区位置（position）向后递增一位</span></div><div class="line">System.out.print(buf.get() + <span class="string">"\t"</span>);</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"\n"</span>+<span class="string">"buf对象遍历之后为: "</span> + buf);</div><div class="line"></div><div class="line"><span class="comment">// 2 wrap方法使用</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">//  wrap方法会包裹一个数组: 一般这种用法不会先初始化缓存对象的长度，因为没有意义，最后还会被wrap所包裹的数组覆盖掉。 </span></div><div class="line"><span class="comment">//  并且wrap方法修改缓冲区对象的时候，数组本身也会跟着发生变化。                     </span></div><div class="line"><span class="comment">int[] arr = new int[]&#123;1,2,5&#125;;</span></div><div class="line"><span class="comment">IntBuffer buf1 = IntBuffer.wrap(arr);</span></div><div class="line"><span class="comment">System.out.println(buf1);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">IntBuffer buf2 = IntBuffer.wrap(arr, 0 , 2);</span></div><div class="line"><span class="comment">//这样使用表示容量为数组arr的长度，但是可操作的元素只有实际进入缓存区的元素长度</span></div><div class="line"><span class="comment">System.out.println(buf2);</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 3 其他方法</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">IntBuffer buf1 = IntBuffer.allocate(10);</span></div><div class="line"><span class="comment">int[] arr = new int[]&#123;1,2,5&#125;;</span></div><div class="line"><span class="comment">buf1.put(arr);</span></div><div class="line"><span class="comment">System.out.println(buf1);</span></div><div class="line"><span class="comment">//一种复制方法</span></div><div class="line"><span class="comment">IntBuffer buf3 = buf1.duplicate();</span></div><div class="line"><span class="comment">System.out.println(buf3);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">//设置buf1的位置属性</span></div><div class="line"><span class="comment">//buf1.position(0);</span></div><div class="line"><span class="comment">buf1.flip();</span></div><div class="line"><span class="comment">System.out.println(buf1);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">System.out.println("可读数据为：" + buf1.remaining());</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">int[] arr2 = new int[buf1.remaining()];</span></div><div class="line"><span class="comment">//将缓冲区数据放入arr2数组中去</span></div><div class="line"><span class="comment">buf1.get(arr2);</span></div><div class="line"><span class="comment">for(int i : arr2)&#123;</span></div><div class="line"><span class="comment">System.out.print(Integer.toString(i) + ",");</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h5 id="Channel-管道、通道）"><a href="#Channel-管道、通道）" class="headerlink" title="Channel (管道、通道）"></a><strong>Channel (管道、通道）</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通道(Channel)，它就像自来水管道一样，网络数据通过Channel读取和写入，通道与流不同之处在于通道是双向的，而流只是一个方向上移动（一个流必须是Inputstream或OutputStream的子类），而通道可以用于读、写或者二者同时进行，最关键的是可以与多路复用器结合起来，有多种的状态位，方便多路复用器去识别。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事实上通道分为两大类，一类是网络读写的(SelectableChanneI)，一类是用于文件操作的(FileChannel)，我们使用MJSocketChanneI和ServerSockerChannel都是SelectableChannel的子类。</p><h5 id="Selector（选择器、多路复用器）"><a href="#Selector（选择器、多路复用器）" class="headerlink" title="Selector（选择器、多路复用器）"></a><strong>Selector（选择器、多路复用器）</strong></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多路复用器(Selector)，他是NIO编程的基础，非常重要。多路复用器提供选择己经就绪的任务的能力。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简单说，就是Selctor会不断地轮询注册在其上的通道(Channel)，如果某个通道发生了读写操作，这个通道就处于就绪状态，会被Selector轮询出来，然后通过SelectionKey可以取得就绪的Channel集合，从而进行后续的IO操作。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个多路复用器(Selector)可以负责成千上万Channel通道，没有上限，这也是JDK使用了epoll代了传统的select实现，获得连接句柄没有限制。这也就意味着我们只要一个线程负的轮询，就可以接入成千上万个客户端，这是JDK NIO库的巨大进步。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Selector线程就类似一个管理者(Master)，管理了成千上万个管道，然后轮询那个管道的数据己经准备好，通知cpu执行IO的读取或写入操作。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Selector模式：当IO事件（管道）注册到选择器以后，Selector会分配给和个管道一个key值，相当于标签。Selector选择器是以轮询的方式进行查找注册的所有IO事件（管道），当我们的IO事件（管道）准备就绪后，select就会识别，会通过key值来找到相应的管道，进行相关的数据处理操作（从管道里读或写数据，写到我们的数据缓冲区中）。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个管道都会对选择器进行注册不同的事件状态，以便选择器查找。</p><p>SelectionKey.OP_CONNECT</p><p>SelectionKey.OP_ACCEPT</p><p>SelectionKey.OP_READ</p><p>SelectionKey.OP_WRlTE</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a><strong>案例</strong></h4><p>下面每一行代码基本上都有注释，看不懂也正常api确实有点恶心特别是buffer。祝你好运，开启读代码模式。</p><p>server.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"><span class="comment">//1 多路复用器（管理所有的通道）</span></div><div class="line"><span class="keyword">private</span> Selector seletor;</div><div class="line"><span class="comment">//2 建立缓冲区</span></div><div class="line"><span class="keyword">private</span> ByteBuffer readBuf = ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line"><span class="comment">//3 </span></div><div class="line"><span class="keyword">private</span> ByteBuffer writeBuf = ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//1 打开路复用器</span></div><div class="line"><span class="keyword">this</span>.seletor = Selector.open();</div><div class="line"><span class="comment">//2 打开服务器通道</span></div><div class="line">ServerSocketChannel ssc = ServerSocketChannel.open();</div><div class="line"><span class="comment">//3 设置服务器通道为非阻塞模式</span></div><div class="line">ssc.configureBlocking(<span class="keyword">false</span>);</div><div class="line"><span class="comment">//4 绑定地址</span></div><div class="line">ssc.bind(<span class="keyword">new</span> InetSocketAddress(port));</div><div class="line"><span class="comment">//5 把服务器通道注册到多路复用器上，并且监听阻塞事件</span></div><div class="line">ssc.register(<span class="keyword">this</span>.seletor, SelectionKey.OP_ACCEPT);</div><div class="line"></div><div class="line">System.out.println(<span class="string">"Server start, port :"</span> + port);</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//1 必须要让多路复用器开始监听</span></div><div class="line"><span class="keyword">this</span>.seletor.select();</div><div class="line"><span class="comment">//2 返回多路复用器已经选择的结果集</span></div><div class="line">Iterator&lt;SelectionKey&gt; keys = <span class="keyword">this</span>.seletor.selectedKeys().iterator();</div><div class="line"><span class="comment">//System.out.println("keys = "+ keys);</span></div><div class="line"><span class="comment">//3 进行遍历</span></div><div class="line"><span class="keyword">while</span>(keys.hasNext())&#123;</div><div class="line"><span class="comment">//4 获取一个选择的元素</span></div><div class="line">SelectionKey key = keys.next();</div><div class="line"><span class="comment">//5 直接从容器中移除就可以了</span></div><div class="line">keys.remove();</div><div class="line"><span class="comment">//6 如果是有效的</span></div><div class="line"><span class="keyword">if</span>(key.isValid())&#123;</div><div class="line"><span class="comment">//7 如果为阻塞状态</span></div><div class="line"><span class="keyword">if</span>(key.isAcceptable())&#123;</div><div class="line"><span class="keyword">this</span>.accept(key);</div><div class="line">&#125;</div><div class="line"><span class="comment">//8 如果为可读状态</span></div><div class="line"><span class="keyword">if</span>(key.isReadable())&#123;</div><div class="line"><span class="keyword">this</span>.read(key);</div><div class="line">&#125;</div><div class="line"><span class="comment">//9 写数据</span></div><div class="line"><span class="keyword">if</span>(key.isWritable())&#123;</div><div class="line"><span class="comment">//this.write(key); //ssc</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(SelectionKey key)</span></span>&#123;</div><div class="line"><span class="comment">//ServerSocketChannel ssc =  (ServerSocketChannel) key.channel();</span></div><div class="line"><span class="comment">//ssc.register(this.seletor, SelectionKey.OP_WRITE);</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(SelectionKey key)</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//1 清空缓冲区旧的数据</span></div><div class="line"><span class="keyword">this</span>.readBuf.clear();</div><div class="line"><span class="comment">//2 获取之前注册的socket通道对象</span></div><div class="line">SocketChannel sc = (SocketChannel) key.channel();</div><div class="line"><span class="comment">//3 读取数据</span></div><div class="line"><span class="keyword">int</span> count = sc.read(<span class="keyword">this</span>.readBuf);</div><div class="line"><span class="comment">//4 如果没有数据</span></div><div class="line"><span class="keyword">if</span>(count == -<span class="number">1</span>)&#123;</div><div class="line">key.channel().close();</div><div class="line">key.cancel();</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//5 有数据则进行读取 读取之前需要进行复位方法(把position 和limit进行复位)</span></div><div class="line"><span class="keyword">this</span>.readBuf.flip();</div><div class="line"><span class="comment">//6 根据缓冲区的数据长度创建相应大小的byte数组，接收缓冲区的数据</span></div><div class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="keyword">this</span>.readBuf.remaining()];</div><div class="line"><span class="comment">//7 接收缓冲区数据</span></div><div class="line"><span class="keyword">this</span>.readBuf.get(bytes);</div><div class="line"><span class="comment">//8 打印结果</span></div><div class="line">String body = <span class="keyword">new</span> String(bytes).trim();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"收到客户端内容 : "</span> + body);</div><div class="line"></div><div class="line"><span class="comment">// 9..可以写回给客户端数据 </span></div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(SelectionKey key)</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//1 获取服务通道</span></div><div class="line">ServerSocketChannel ssc =  (ServerSocketChannel) key.channel();</div><div class="line"><span class="comment">//2 执行阻塞方法</span></div><div class="line">SocketChannel sc = ssc.accept();</div><div class="line"><span class="comment">//3 设置阻塞模式</span></div><div class="line">sc.configureBlocking(<span class="keyword">false</span>);</div><div class="line"><span class="comment">//4 注册到多路复用器上，并设置读取标识</span></div><div class="line">sc.register(<span class="keyword">this</span>.seletor, SelectionKey.OP_READ);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Server(<span class="number">8765</span>)).start();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Client.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//需要一个Selector </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//创建连接的地址</span></div><div class="line">InetSocketAddress address = <span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8765</span>);</div><div class="line"></div><div class="line"><span class="comment">//声明连接通道</span></div><div class="line">SocketChannel sc = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="comment">//建立缓冲区</span></div><div class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//打开通道da'd</span></div><div class="line">sc = SocketChannel.open();</div><div class="line"><span class="comment">//进行连接</span></div><div class="line">sc.connect(address);</div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">System.out.println(<span class="string">"请输入你要发给服务端的内容 ： "</span>);</div><div class="line"><span class="comment">//定义一个字节数组，然后使用系统录入功能：</span></div><div class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">System.in.read(bytes);</div><div class="line"></div><div class="line"><span class="comment">//把数据放到缓冲区中</span></div><div class="line">buf.put(bytes);</div><div class="line"><span class="comment">//对缓冲区进行复位</span></div><div class="line"> buf.flip();</div><div class="line"><span class="comment">//写出数据</span></div><div class="line">sc.write(buf);</div><div class="line"><span class="comment">//清空缓冲区数据</span></div><div class="line">buf.clear();</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="keyword">if</span>(sc != <span class="keyword">null</span>)&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">sc.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>客户端运行结果：</p><p><img src="http://img.blog.csdn.net/20171122233743061?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>客户端运行结果：</p><p><img src="http://img.blog.csdn.net/20171122233752780?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>在客户端发一条信息服务端：</p><p><img src="http://img.blog.csdn.net/20171122233802108?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>服务端接收到客户端的信息：</p><p><img src="http://img.blog.csdn.net/20171122233813794?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzM1MjQxNTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看完代码相信大家都会觉得NIO编程难度确实比同步阻塞BIO大很多，我们的NIO例程并没有考虑“半包读”和“半包写”，如果加上这些，代码将会更加复杂。NIO代码既然这么复杂，为什么它的应用却越来越广泛呢，使用NIO编程的优点总结如下：</p><p>1、客户端发起的连接操作是异步的，可以通过在多路复用器注册OP_CONNECT等待后续结果，不需要像之前的客户端那样被同步阻塞；</p><p>2、 SocketChannel的读写操作都是异步的，如果没有可读写的数据它不会同步等待，直接返回，这样IO通信线程就可以处理其它的链路，不需要同步等待这个链路可用；</p><p>3、  线程模型的优化：由于JDK的Selector在Linux等主流操作系统上通过epoll实现，它没有连接句柄数的限制（只受限于操作系统的最大句柄数或者对单个进程的句柄限制），这意味着一个Selector线程可以同时处理成千上万个客户端连接，而且性能不会随着客户端的增加而线性下降，因此，它非常适合做高性能、高负载的网络服务器。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JDK1.7升级了NIO类库，升级后的NIO类库被称为NIO2.0，引人注目的是Java正式提供了异步文件IO操作，同时提供了与Unix网络编程事件驱动IO对应的AIO。下一章介绍AIO。</p><p>转发者必须注明转发链接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;NIO类库简介&quot;&gt;&lt;a href=&quot;#NIO类库简介&quot; class=&quot;headerlink&quot; title=&quot;NIO类库简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;NIO类库简介&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nb
      
    
    </summary>
    
      <category term="网络编程" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
